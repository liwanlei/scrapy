<?xml version="1.0" encoding="utf-8"?>
<items>
<item><title><value>选择一个 Python Web 框架：Django vs Flask vs Pyramid</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/88447/</value></title_url><post_desc><value>Pyramid, Django, 和 Flask都是优秀的框架，为项目选择其中的哪一个都是伤脑筋的事。我们将会用三种框架实现相同功能的应用来更容易的对比三者。</value></post_desc></item>
<item><title><value>Python 语言在企业应用方面遭遇的十大谬误</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/88443/</value></title_url><post_desc><value>在文章里我将详细介绍那些使得 eBay 和 PayPal 的 Python 生态系统从2011年的不超过25个工程师到2014年超过260个工程师所使用的技术和举措。对于本文，我则会专注于10个不得不予以揭露的关于 eBay 和 PayPal 的企业环境的谬误。</value></post_desc></item>
<item><title><value>Python 爬虫 (六) -- Scrapy 框架学习</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/88431/</value></title_url><post_desc><value>本文希望达到以下目标:1.简要介绍Scarpy。2.阅读官网入门文档并实现文档中的范例。3.使用Scarpy优豆瓣爬虫的抓取。4.制定下一步学习目标。</value></post_desc></item>
<item><title><value>用 Python 3 的 async / await 做异步编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88427/</value></title_url><post_desc><value>本文将简单介绍一下这些 PEPs，着重深入的则是 PEP 492。</value></post_desc></item>
<item><title><value>Python 开发者面向文档编程的正确姿势</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88417/</value></title_url><post_desc><value>本文介绍如何利用Python注释提升文档书写的质量以及效率的小技巧。</value></post_desc></item>
<item><title><value>Python 爬虫 (五) --多线程续 (Queue )</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/88413/</value></title_url><post_desc><value>本文希望达到的目标:1.学习Queue模块。2.将Queue模块与多线程编程相结合。3.通过Queue和threading模块, 重构爬虫, 实现多线程爬虫。4.通过以上学习希望总结出一个通用的多线程爬虫小模版。</value></post_desc></item>
<item><title><value>Python 爬虫 (四) --多线程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/88411/</value></title_url><post_desc><value>本文主要介绍了多线程thread模块和threading模块。</value></post_desc></item>
<item><title><value>Python :浅析 return 和 finally 共同挖的坑</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88408/</value></title_url><post_desc><value>本文主要介绍了 return 和 finally 共同挖的坑。</value></post_desc></item>
<item><title><value>一个小时搭建一个全栈 Web 应用框架</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88394/</value></title_url><post_desc><value>本文介绍了创建一个简单的全栈Web应用所需的步骤，其中包括一个Python服务器和一个React前端。你可以轻松的在其基础上进行构建，根据你的实际需求进行修改，或是添加一些其他技术特性。</value></post_desc></item>
<item><title><value>Python 爬虫 (三) - Socket 网络编程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/88396/</value></title_url><post_desc><value>写这篇博文, 也希望回顾并整理一下以前学过的c语言和linux下一些东西, 会将一些Linux网络编程的函数和Python网络变成函数做一个简单的对照, 方便记忆。</value></post_desc></item>
<item><title><value>一个 Reentrant Error 引发的对 Python 信号机制的探索和思考</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88384/</value></title_url><post_desc><value>前几天工作时遇到了一个匪夷所思的问题。经过几次尝试后问题得以解决，但问题产生的原因却仍令人费解。查找 SO 无果，我决定翻看 Python 的源码。断断续续地研究了几天，终于恍然大悟。撰此文以记。</value></post_desc></item>
<item><title><value>Python 判断文件是否存在的三种方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88381/</value></title_url><post_desc><value>这里将介绍三种判断文件或文件夹是否存在的方法，分别使用os模块、Try语句、pathlib模块。</value></post_desc></item>
<item><title><value>Python 标准库笔记(1) — String模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88379/</value></title_url><post_desc><value>String模块包含大量实用常量和类，以及一些过时的遗留功能，并还可用作字符串操作。</value></post_desc></item>
<item><title><value>学习用 Python 编程时要避免的 3 个错误</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88376/</value></title_url><post_desc><value>为了让初学 Python 的程序员避免犯同样的错误，以下列出了我学习 Python 时犯的三种错误。这些错误要么是我长期以来经常犯的，要么是造成了需要几个小时解决的麻烦。</value></post_desc></item>
<item><title><value>用 Python 做股市数据分析（2）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88256/</value></title_url><post_desc><value>这篇博文是用Python分析股市数据系列两部中的第二部，内容基于我在犹他大学 数学3900 (数据科学)的课程 （阅读第一部分）。在这两篇博文中，我会讨论一些基础知识，包括比如如何用pandas从雅虎财经获得数据， 可视化股市数据，平均数指标的定义，设计移动平均交汇点分析移动平均线的方法，回溯测试和 基准分析法。</value></post_desc></item>
<item><title><value>Python 魔术方法 - Magic Method</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88367/</value></title_url><post_desc><value>在Python中，所有以“__”双下划线包起来的方法，都统称为“Magic Method”,例如类的初始化方法 __init__ ,Python中所有的魔术方法均在官方文档中有相应描述，但是对于官方的描述比较混乱而且组织比较松散。很难找到有一个例子。</value></post_desc></item>
<item><title><value>Python标准库（1） — Itertools模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88365/</value></title_url><post_desc><value>官方描述：Functional tools for creating and using iterators.即用于创建高效迭代器的函数。</value></post_desc></item>
<item><title><value>Python 爬虫实战(2)：股票数据定向爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88350/</value></title_url><post_desc><value>本文实战目标是运用python3.5语言， 获取上交所和深交所所有股票的名称和交易信息，输出到保存文件中。</value></post_desc></item>
<item><title><value>Python 爬虫实战（1）：分析豆瓣中最新电影的影评</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88325/</value></title_url><post_desc><value>刚接触python不久，做一个小项目来练练手。前几天看了《战狼2》，发现它在最新上映的电影里面是排行第一的，准备把豆瓣上对它的影评做一个分析。</value></post_desc></item>
<item><title><value>Django 使用 Celery 实现异步任务</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88276/</value></title_url><post_desc><value>通过使用celery，实现异步任务，可以避免网络IO阻塞。</value></post_desc></item>
<item><title><value>所有人都能学会用Python写出RNN-LSTM代码</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87538/</value></title_url><post_desc><value>本文通过一个简单的python实现，教会你循环神经网络。</value></post_desc></item>
<item><title><value>机器学习 Python 库 Top 20</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87535/</value></title_url><post_desc><value>如今开源是创新的核心，推动着技术的飞速革新。本文会为你介绍 2016 年机器学习 Top 20 Python 开源项目，同时分析得出一些有趣的见解和发展趋势。</value></post_desc></item>
<item><title><value>左手程序员，右手作家：你必须会的Jupyter Notebook</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87527/</value></title_url><post_desc><value>为了能与同行们有效沟通，你需要重现整个分析过程，并将说明文字、代码、图表、公式、结论都整合在一个文档中。显然传统的文本编辑工具并不能满足这一需求，所以这隆重推荐一款神器 Jupyter Notebook，不仅能在文档中执行代码，还能以网页形式分享。</value></post_desc></item>
<item><title><value>致Python初学者：Anaconda入门使用指南</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87522/</value></title_url><post_desc><value>打算学习 Python 来做数据分析的你，是不是在开始时就遇到各种麻烦呢？ 到底该装 Python2 呢还是 Python3 ？为什么安装 Python 时总是出错？怎么安装工具包呢？为什么提示说在安装这个工具前必须先安装一堆其他不明所以的工具？ 相信大多数 Python 的初学者们都曾为环境问题而头疼不已……</value></post_desc></item>
<item><title><value>python curses使用</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87519/</value></title_url><post_desc><value>python 中curses封装了c语言的curses，把c中复杂部分简单化，比如addstr(),mvaddstr(),mvwaddstr()合并成了一个addstr()方法。</value></post_desc></item>
<item><title><value>在Python中实现单例模式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87514/</value></title_url><post_desc><value>有些时候你的项目中难免需要一些全局唯一的对象,这些对象大多是一些工具性的东西,在Python中实现单例模式并不是什么难事。</value></post_desc></item>
<item><title><value>TensorFlow与中文手写汉字识别</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87509/</value></title_url><post_desc><value>本文目标是利用TensorFlow做一个简单的图像分类器，在比较大的数据集上，尽可能高效地做图像相关处理，从Train，Validation到Inference，是一个比较基本的Example。</value></post_desc></item>
<item><title><value>Python 201：多进程教程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86917/</value></title_url><post_desc><value>文章用代码详细介绍了python多进程的教程，非常详细的初等进阶教程。</value></post_desc></item>
<item><title><value>如何理解Nginx, WSGI, Flask之间的关系</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87502/</value></title_url><post_desc><value>总括来说，客户端从发送一个 HTTP 请求到 Flask 处理请求，分别经过了 web服务器层，WSGI层，web框架层，这三个层次。不同的层次其作用也不同。</value></post_desc></item>
<item><title><value>Python闭包的两个注意事项</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87500/</value></title_url><post_desc><value>第一点是Python闭包函数所引用的外部自由变量是延迟绑定的。第二点是禁止在闭包函数内对引用的自由变量进行重新绑定。</value></post_desc></item>
<item><title><value>python线程笔记</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87498/</value></title_url><post_desc><value>考虑一下这个场景，我们有10000条数据需要处理，处理每条数据需要花费1秒，但读取数据只需要0.1秒，每条数据互不干扰。该如何执行才能花费时间最短呢？ </value></post_desc></item>
<item><title><value>10行python代码的词云</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87496/</value></title_url><post_desc><value>词云又叫文字云，是对文本数据中出现频率较高的“关键词”在视觉上的突出呈现，形成关键词的渲染形成类似云一样的彩色图片，从而一眼就可以领略文本数据的主要表达意思。</value></post_desc></item>
<item><title><value>__import__ 与动态加载 python module</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87492/</value></title_url><post_desc><value>本文介绍 python module 的动态加载，我们有时希望从配置文件等地获取要被动态加载的 module，但是所读取的配置项通常为字符串类型，无法用 import 加载。</value></post_desc></item>
<item><title><value>5 个开源 Python 库，让机器学习更简单</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87457/</value></title_url><post_desc><value>Python 是一款强大的工具语言，被广泛应用在大数据和机器学习之中。以下推荐了 5 个 Python 库，帮你疏通机器学习之路。</value></post_desc></item>
<item><title><value>flask 源码解析：session</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87450/</value></title_url><post_desc><value>session 用来在不同的请求之间保存一些信息，实现会话保持的效果，对于网站的登陆功能、购买功能至关重要。这篇文章分析 flask 是如何实现 session 的！</value></post_desc></item>
<item><title><value>禁用 Python GC，Instagram 性能提升10%</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87447/</value></title_url><post_desc><value>通过关闭 Python 垃圾收集（GC）机制，该机制通过收集和释放未使用的数据来回收内存，Instagram 的运行效率提高了 10 ％。是的，你没听错！通过禁用 GC，我们可以减少内存占用并提高 CPU 中 LLC 缓存的命中率。如果你对为什么会这样感兴趣，带你发车咯！</value></post_desc></item>
<item><title><value>Python 的单元测试之 unittest</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87490/</value></title_url><post_desc><value>随着项目的不断扩大，单元测试在保证开发效率、可维护性和软件质量等方面的地位越发举足轻重，是一本万利的举措。</value></post_desc></item>
<item><title><value>深入理解 nova-api 的 WSGI</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87487/</value></title_url><post_desc><value>本文是 理解 WSGI 框架 的下篇，重点介绍 WSGI 框架下一些常用的 python module，并使用这些 module 编写一个类似 nova-api 里 WSGI 的简单样例，最后分析 nova 是如何使用这些 module 构建其 WSGI 框架。</value></post_desc></item>
<item><title><value>Python 迁移到 GitHub 的幕后故事</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87470/</value></title_url><post_desc><value>Python 社区早在 2014 年就开始讨论是否迁移到 GitHub 以改进开发流程，当时 Python 使用的版本控制系统是 Mercurial，而 GitHub 只支持 Git 版本控制系统。Python 软件基金会的主管 Brett Cannon 撰文分享了这个决定背后的故事。</value></post_desc></item>
<item><title><value>Python 实现视频下载</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87477/</value></title_url><post_desc><value>最近一两年短视频业务风生水起，各个视频网站都有各自特色的短视频内容。如果有这样一个程序，可以把各大视频网站的热门用户最新发布的视频都下载下来，不仅方便自己观看，还可以将没有版权的视频发布在个人社交网站上，增加自己的人气，岂不美哉？</value></post_desc></item>
<item><title><value>给深度学习入门者的Python快速教程 - Numpy和Matplotlib篇</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87471/</value></title_url><post_desc><value>Numpy基本上成了绝大部分Python科学计算的基础包，当然也包括所有提供Python接口的深度学习框架。而Matplotlib是Python中最常用的可视化工具之一，可以非常方便地创建海量类型地2D图表和一些基本的3D图表。</value></post_desc></item>
<item><title><value>简约而不简单的Django新手图文教程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87444/</value></title_url><post_desc><value>本文面向：有python基础，刚接触web框架的初学者，从最基础开始搭建基于Django的网站。</value></post_desc></item>
<item><title><value>常用查找数据结构及算法（Python实现）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87440/</value></title_url><post_desc><value>本文参考书目《大话数据结构》用Python来实现常用的查找数据结构及算法。</value></post_desc></item>
<item><title><value>24小时从0到1开发阴阳师小程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87438/</value></title_url><post_desc><value>0.序 玩阴阳师的肝帝们都知道，每天早上5点和下午6点会刷新两次封印任务，每次做任务时最蛋疼的就是找各种怪物对应的副本以及神秘线索。 阴阳师提供了 网易精灵 可以进行一些数据查询，但体验实在太感人，所以大…</value></post_desc></item>
<item><title><value>爬虫-漫画喵的100行逆袭</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87434/</value></title_url><post_desc><value>爬虫使用scrapy不能直接抓取动态的页面。小喵需要抓取的网站的漫画都是使用Ajax生成的。需要自己分析各种数据，这个有点麻烦。那么有没有可以渲染页面的工具呢？像浏览器一样的？</value></post_desc></item>
<item><title><value>给深度学习入门者的Python快速教程 - 基础篇</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87465/</value></title_url><post_desc><value>本文将介绍Python的最基本语法，以及一些和深度学习还有计算机视觉最相关的基本使用。</value></post_desc></item>
<item><title><value>[这段代码很Pythonic]相见恨晚的itertools库</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87455/</value></title_url><post_desc><value>很多人都致力于把Python代码写得更Pythonic，一来更符合规范且容易阅读，二来一般Pythonic的代码在执行上也更有效率。今天就先给大家介绍一下Python的系统库itertools。</value></post_desc></item>
<item><title><value>Flask 插件系列 -- Flask-MongoEngine</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87121/</value></title_url><post_desc><value>MongoDB 是一个文档型数据库，是 NoSQL (not only SQL) 的一种，具有灵活、易扩展等诸多优点，受到许多开发者的青睐。ongoEngine 是一个用来操作 MongoDB 的 ORM 框架，在 Flask 中，我们可以直接使用 MongoEngine，它使得在 Flask 中使用 MongoEngine 变得更加简单。</value></post_desc></item>
<item><title><value>命令行神器 Click 简明笔记</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87111/</value></title_url><post_desc><value>Click 是用 Python 写的一个第三方模块，用于快速创建命令行。我们知道，Python 内置了一个 Argparse 的标准库用于创建命令行，但使用起来有些繁琐，Click 相比于 Argparse，就好比 requests 相比于 urllib。</value></post_desc></item>
<item><title><value>实例讲解基于 Flask+React 的全栈开发和部署</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87112/</value></title_url><post_desc><value>我有时在 Web 上浏览信息时，会浏览 Github Trending技术社区的资讯或文章，但觉得逐个去看很费时又不灵活。国外有一款叫 Panda 的产品，它聚合了互联网大多数领域的信息，遗憾的是没有互联网中文领域的信息，于是就萌生了一个想法：写个爬虫，把网站的资讯爬下来并显示出来。</value></post_desc></item>
<item><title><value>神经网络理论基础及Python实现</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87016/</value></title_url><post_desc><value>多层前向神经网络由三部分组成：输出层、隐藏层、输出层，每层由单元组成；输入层由训练集的实例特征向量传入，经过连接结点的权重传入下一层，前一层的输出是下一层的输入；隐藏层的个数是任意的，输入层只有一层，输出层也只有一层</value></post_desc></item>
<item><title><value>用python编写一个本地论文管理器（paper_manager）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87017/</value></title_url><post_desc><value>最近初学NLP相关的深度学习，下了很多论文，数量一多，发现论文管理是个问题。首先论文数目一多，必须要按类别放到子文件夹下。但是某一篇论文，往往有多个主题。比如说某论文使用word2vec给短文本分类，那这篇论文既可以放在word2vec的目录下，也可以放在短文本的目录下，也可以放在分类的目录下。</value></post_desc></item>
<item><title><value>如何编写 Python 文档生成器</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86995/</value></title_url><post_desc><value>在我刚开始接触Python的日子里，我最喜欢做的事情之一是坐在解释器旁使用内置help功能来检查类和方法，决定下一个要敲的内容。这个功能导入一个对象，遍布它的成员，取出文档注释，生成一个类似manpage的输出，从而帮助你找到如何使用正在检查的对象的方法。</value></post_desc></item>
<item><title><value>深入理解python3.4中Asyncio库与Node.js的异步IO机制</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87431/</value></title_url><post_desc><value>如何用yield以及多路复用机制实现一个基于协程的异步事件框架？现有的组件中yield from是如何工作的，值又是如何被传入yield from表达式的？本文能很好的解答这几个问题。</value></post_desc></item>
<item><title><value>教程：用Python从零开始实现K近邻算法</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/87407/</value></title_url><post_desc><value>K近邻算法（或简称kNN）是易于理解和实现的算法，而且是你解决问题的强大工具。在本教程中，你将基于Python（2.7）从零开始实现kNN算法。该实现主要针对分类问题，将会用鸢尾花分类问题来演示。</value></post_desc></item>
<item><title><value>python浅谈正则的常用方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87418/</value></title_url><post_desc><value>写文字屏蔽说到要用正则表达，但正则用好用精通的很难。本文把常用的正则简单介绍下，如果不是很特殊基本都覆盖使用。</value></post_desc></item>
<item><title><value>Python写各大聊天系统的屏蔽脏话功能原理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87419/</value></title_url><post_desc><value>突然想到一个视频里面弹幕被和谐的一满屏的*号觉得很有趣，然后就想用python来试试写写看，结果还真玩出了点效果……</value></post_desc></item>
<item><title><value>如何使用 Pylint 来规范 Python 代码风格</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87415/</value></title_url><post_desc><value>Pylint 提供了简单的方式来分析 Python 代码，其高可配置性很容易使一个部门的人员使用统一的代码风格。本文将通过理论介绍和示例分析阐述如何 Pylint 来规范 Python 代码。</value></post_desc></item>
<item><title><value>探究如何给Python程序做hotfix</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87106/</value></title_url><post_desc><value>使用Python来写服务器端程序，很大的一个优势就是可以进行热更新，即在不停机的情况下，使改动后的程序生效。在开发阶段，这个功能可以大大提高开发效率（写代码–启动服务器–看效果–改代码–hotfix–看效果–提交~）；而在生产环境中，可以以最小的代价（不停机）修复线上的bug。</value></post_desc></item>
<item><title><value>Python初学者之网络爬虫（2）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87019/</value></title_url><post_desc><value>在上篇中，我从花椒的热门推荐页面入手，进而获取到主播个人信息和对应的直播历史视频。本篇接下来将继续讲述我在数据抓取上的开发经历。</value></post_desc></item>
<item><title><value>异步任务神器 Celery 简明笔记</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87086/</value></title_url><post_desc><value>在程序的运行中，我们经常会碰到一些耗时操作，为了避免它们阻塞主程序的运行，我们会采用多线程或异步任务。比如，在 Web 开发中，对新用户的注册，我们通常会给他发一封激活邮件，而发邮件是个 IO 阻塞式任务，如果直接把它放到应用当中，就需要等邮件发出去之后才能进行下一步操作，此时用户只能等待。更好的方式是在业务逻辑中触发一个发邮件的异步任务，而主程序可以继续往下运行。</value></post_desc></item>
<item><title><value>Python 中的异常处理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87087/</value></title_url><post_desc><value>异常处理在任何一门编程语言里都是值得关注的一个话题，良好的异常处理可以让你的程序更加健壮，清晰的错误信息更能帮助你快速修复问题。在Python中，和不部分高级语言一样，使用了try/except/finally语句块来处理异常，如果你有其他编程语言的经验，实践起来并不难。</value></post_desc></item>
<item><title><value>python类中super()和__init__()的区别</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86993/</value></title_url><post_desc><value>python类中super()和__init__()的区别</value></post_desc></item>
<item><title><value>Python爬虫代理池</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86994/</value></title_url><post_desc><value>在公司做分布式深网爬虫，搭建了一套稳定的代理池服务，为上千个爬虫提供有效的代理，保证各个爬虫拿到的都是对应网站有效的代理IP，从而保证爬虫快速稳定的运行，当然在公司做的东西不能开源出来。不过呢，闲暇时间手痒，所以就想利用一些免费的资源搞一个简单的代理池服务。</value></post_desc></item>
<item><title><value>Python函数式编程：从入门到走火入魔</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86950/</value></title_url><post_desc><value>很多人都在谈论函数式编程（Functional Programming），只是很多人站在不同的角度看到的是完全不一样的风景。坚持实用主义的 Python 老司机们对待 FP 的态度应该更加包容，虽然他们不相信银弹，但冥冥中似乎能感觉到 FP 暗合了 Python 教义（The Zen of Python）的某些思想，而且既然 Python 是一门多范式编程语言，并在很大程度上支持函数式编程，那就更没有理由拒绝它。</value></post_desc></item>
<item><title><value>python 描述符解析</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86953/</value></title_url><post_desc><value>python描述符是一个“绑定行为”的对象属性，在描述符协议中，它可以通过方法重写属性的访问。这些方法有 __get__(), __set__(), 和__delete__()。如果这些方法中的任何一个被定义在一个对象中，这个对象就是一个描述符。</value></post_desc></item>
<item><title><value>Python: 多继承模式下 MRO(Method Resolution Order) 的计算方式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86939/</value></title_url><post_desc><value>大家可能已经知道了，在 Python 3(Python 2 的新式类)中多继承模式是使用 C3 算法来确定 MRO(Method Resolution Order) 的。那么具体是怎么计算的呢？本文将基于 https://www.python.org/downlo… 中的几个例子来讲解 MRO 是怎么计算的。</value></post_desc></item>
<item><title><value>性能测试工具Locust</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87384/</value></title_url><post_desc><value>Locust是一个开源性能测试工具，使用Python代码来定义用户行为。用它可以模拟百万计的并发用户访问你的系统。</value></post_desc></item>
<item><title><value>高效的 itertools 模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87380/</value></title_url><post_desc><value>Python 内置的 itertools 模块包含了一系列用来产生不同类型迭代器的函数或类，这些函数的返回都是一个迭代器，我们可以通过 for 循环来遍历取值，也可以使用 next() 来取值。</value></post_desc></item>
<item><title><value>初探函数式编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87377/</value></title_url><post_desc><value>继续向下看廖大教程，看到了函数式编程这一节，当时是觉得没啥用直接跳过了，这次准备要仔细看一遍了，并记录下一些心得。</value></post_desc></item>
<item><title><value>行为驱动开发在 Python 开发测试中的应用</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87412/</value></title_url><post_desc><value>行为驱动开发（BDD Behavior Driven Development）指开发者站在客户的角度来观察系统，思考系统应该具有什么样的行为才能满足客户需求的这样一种开发过程。BDD 基于一种“通用语言”定义了同时能被客户和开发者理解的系统行为，在最大程度上避免表达不一致带来的问题。</value></post_desc></item>
<item><title><value>Python API：OpenStack 隐藏深处的秘密</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87408/</value></title_url><post_desc><value>作为 OpenStack 用户或管理员，您常常需要编写脚本来自动化常见任务。除了 REST 和命令行接口之外，OpenStack 还公开了原生的 Python API 绑定。了解如何使用这些 Python 绑定简化编写 OpenStack 自动化脚本的过程。</value></post_desc></item>
<item><title><value>flask 源码解析：请求</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87397/</value></title_url><post_desc><value>这是 flask 源码解析系列文章的其中一篇，本系列所有文章列表： flask 源码解析：简介 flask 源码解析：应用启动流程 flask 源码解析：路由 flask 源码解析：上下文 flask 源码解析：请求 flask 源码解析：响应 …</value></post_desc></item>
<item><title><value>python开发编译器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87231/</value></title_url><post_desc><value>最近刚刚用python写完了一个解析protobuf文件的简单编译器，深感ply实现词法分析和语法分析的简洁方便。乘着余热未过，头脑清醒，记下一点总结和心得，方便各位pythoner参考使用。</value></post_desc></item>
<item><title><value>Django 中 REST API 的设计</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87226/</value></title_url><post_desc><value>最近学习了REST方面的知识，了解了REST 的基础、API 的设计规则等等。</value></post_desc></item>
<item><title><value>Python并发编程之协程/异步IO</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87202/</value></title_url><post_desc><value>随着node.js的盛行，大家多多少少都听到了异步编程这个概念。Python社区虽然对于异步编程的支持稍显迟缓，但是也在Python3.4中加入了asyncio，在Python3.5上又提供了async/await语法层面的支持，刚正式发布的Python3.6中asynico也已经由临时版改为了稳定版。下面我们就基于Python3.4+来了解一下异步编程。</value></post_desc></item>
<item><title><value>python模块paramiko与ssh</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87088/</value></title_url><post_desc><value>paramiko是用python语言写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。paramiko支持Linux, Solaris, BSD, MacOS X, Windows等平台通过SSH从一个平台连接到另外一个平台。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输。</value></post_desc></item>
<item><title><value>Python装饰器探究——装饰器参数</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87089/</value></title_url><post_desc><value>示例中我们编写的装饰器 json_output 只接受一个隐式参数——即被装饰的方法，在使用此装饰器时本身看上去是并没有参数的。然而有时候需要让装饰器自身带有一些需要的信息，从而使装饰器可以使用恰当的方式装饰方法。</value></post_desc></item>
<item><title><value>使用 Couchdb-python 操作 CouchDB</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87066/</value></title_url><post_desc><value>CouchDB 是一个功能强大的开源 NoSQL 数据库管理系统，使用 JSON 来存储数据，内部使用 JavaScript 作为它的查询语言。目前使用 Python 操作 CouchDB 的主要第三方库为 Couchdb-python。本文将结合实际使用经验，围绕快速插入，查询和更新数据，介绍如何使用 couchdb-python 库操作 CouchDB，从而帮助初学者快速使用 Python 进行 CouchDB 相关开发。</value></post_desc></item>
<item><title><value>Python开启尾递归优化!</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86937/</value></title_url><post_desc><value>尾递归基于函数的尾调用, 每一级调用直接返回函数的返回值更新调用栈,而不用创建新的调用栈, 类似迭代的实现, 时间和空间上均优化了一般递归</value></post_desc></item>
<item><title><value>Python 外部函数调用库ctypes简介</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86940/</value></title_url><post_desc><value>一直对不同语言间的交互感兴趣，python和C语言又深有渊源，所以对python和c语言交互产生了兴趣。最近了解了python提供的一个外部函数库 ctypes, 它提供了C语言兼容的几种数据类型，并且可以允许调用C编译好的库。这里是阅读相关资料的一个记录，内容大部分来自官方文档。</value></post_desc></item>
<item><title><value>Python: 函数参数魔法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86938/</value></title_url><post_desc><value>在 Python 中，定义函数和调用函数都很简单，但如何定义函数参数和传递函数参数，则涉及到一些套路了</value></post_desc></item>
<item><title><value>梯度下降算法以及其Python实现</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86921/</value></title_url><post_desc><value>我是一个机器学习的小白，刚刚开始接触，从最基本的也是很重要的梯度下降开始学习。这篇文章是我对梯度下降的理解，还有很多不完善的地方，我只给出了批量梯度下降算法的python实现，随机梯度下降还需要我进一步编写，而且关于循环停止，本文只是最简单的循环次数停止</value></post_desc></item>
<item><title><value>解释 Python 2 和 Python 3 的版本之间差别</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87372/</value></title_url><post_desc><value>Python 是一种极具可读性和通用性的编程语言。Python 这个名字的灵感来自于英国喜剧团体 Monty Python，它的开发团队有一个重要的基础目标，就是使语言使用起来很有趣。</value></post_desc></item>
<item><title><value>Cython三分钟入门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87368/</value></title_url><post_desc><value>大多数人也认为的速度和易于使用是两极对立的——编写C代码的确非常痛苦。而 Cython 试图消除这种两重性，并让你同时拥有 Python 的语法和 C 数据类型和函数——它们两个都是世界上最好的。</value></post_desc></item>
<item><title><value>python wsgi 简介</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87361/</value></title_url><post_desc><value>WSGI（Web Server Gateway Interface） 的任务就是把上面的数据在 http server 和 python 程序之间简单友好地传递。WSGI是一个标准，被定义在PEP 333。需要 http server 和 python 程序都要遵守一定的规范，实现这个标准的约定内容，才能正常工作。</value></post_desc></item>
<item><title><value>Python mutilprocessing Processing 父子进程共享文件对象?</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87360/</value></title_url><post_desc><value>multiprocessing python多进程模块, 于是, Processing也是多进程的宠儿. 但今天讨论的问题, 似乎也能引起我们一番重视……</value></post_desc></item>
<item><title><value>python 高度健壮性爬虫的异常和超时问题</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/87357/</value></title_url><post_desc><value>爬虫这类型程序典型特征是意外多，无法确保每次请求都是稳定的返回统一的结果，要提高健壮性，能对错误数据or超时or程序死锁等都能进行处理，才能确保程序几个月不停止。</value></post_desc></item>
<item><title><value>flask 源码解析：上下文</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87398/</value></title_url><post_desc><value>这是 flask 源码解析系列文章的其中一篇，本系列所有文章列表： flask 源码解析：简介 flask 源码解析：应用启动流程 flask 源码解析：路由 flask 源码解析：上下文 flask 源码解析：请求 上下文（application co…</value></post_desc></item>
<item><title><value>flask 源码解析：响应</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87396/</value></title_url><post_desc><value>full_dsipatch_request 在调用路由到视图函数之后，会调用 finalize_request 进行最后的处理，在这个方法里就包含了 response 对象的生成和处理逻辑。</value></post_desc></item>
<item><title><value>Python BaseHTTPServer 介绍</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87392/</value></title_url><post_desc><value>本文介绍了Python 自带的 HTTP Server，编写一个极简的 Todo API。虽然编写 Web 应用的时候直接使用框架，但是了解这些底层的基础库总没有什么害处。</value></post_desc></item>
<item><title><value>Python黑魔法 --- 异步IO（ asyncio） 协程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87310/</value></title_url><post_desc><value>python asyncio 网络模型有很多中，为了实现高并发也有很多方案，多线程，多进程。无论多线程和多进程，IO的调度更多取决于系统，而协程的方式，调度来自用户，用户可以在函数中yield一个状态。使用协程可以实现高效的并发任务。</value></post_desc></item>
<item><title><value>python黑魔法---装饰器（decorator）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87309/</value></title_url><post_desc><value>python是一门优雅的语言，有些使用方法就像魔法一样。装饰器(decorator)就是一种化腐朽性为神奇的技巧。</value></post_desc></item>
<item><title><value>Python标准库系列之Redis模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87305/</value></title_url><post_desc><value> 本文详细介绍了Python的Redis标准库API的使用方法， 最后列举了利用redis缓存tornado页面的实例。</value></post_desc></item>
<item><title><value>Python函数式编程入门教程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87203/</value></title_url><post_desc><value>函数式编程相比面向对象编程的一大优势就是不依赖于外部的数据，也不改变外部数据的值，这种思想可以大大减少我们代码的Bug，而且函数式编程也支持我们像使用变量一样使用函数。Python作为面向对象语言，也提供了对于函数式编程的支持。</value></post_desc></item>
<item><title><value>Python标准库之collections使用教程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87201/</value></title_url><post_desc><value>Python为我们提供了4种基本的数据结构：list, tuple, dict, set，但是在处理数据量较大的情形的时候，这4种数据结构就明显过于单一了，比如list作为单向链表在某些情形插入的效率会比较低，有时候我们也需要维护一个有序的dict。所以这个时候我们就要用到Python标准库为我们提供的collections包了</value></post_desc></item>
<item><title><value>基于协程的Python网络库gevent介绍</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87181/</value></title_url><post_desc><value>这次要讲的是gevent，它是一个并发网络库。它的协程是基于greenlet的，并基于libev实现快速事件循环（Linux上是epoll，FreeBSD上是kqueue，Mac OS X上是select）。有了gevent，协程的使用将无比简单，你根本无须像greenlet一样显式的切换，每当一个协程阻塞时，程序将自动调度，gevent处理了所有的底层细节。</value></post_desc></item>
<item><title><value>Python垃圾回收机制详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87064/</value></title_url><post_desc><value>Python中的垃圾回收是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。在Python中，如果一个对象的引用数为0，Python虚拟机就会回收这个对象的内存。</value></post_desc></item>
<item><title><value>Python用format格式化字符串</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87065/</value></title_url><post_desc><value>format是python2.6新增的一个格式化字符串的方法，相对于老版的%格式方法，它有很多优点。</value></post_desc></item>
<item><title><value>不得不知道的Python字符串编码相关的知识</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87042/</value></title_url><post_desc><value>开发经常会遇到各种字符串编码的问题，例如报错SyntaxError: Non-ASCII character ‘ascii’ codec can’t encode characters in position 0-2: ordinal not in range(128)，又例如显示乱码。由于之前不知道编码的原理，遇到这些情况，就只能不断的用各种编码decode和encode。。。</value></post_desc></item>
<item><title><value>Python最差实践</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87043/</value></title_url><post_desc><value>最近在看一些陈年老系统，其中有一些不好的代码习惯遗留下来的坑；加上最近自己也写了一段烂代码导致服务器负载飙升，所以就趁此机会总结下我看到过/写过的自认为不好的Python代码习惯，时刻提醒自己远离这些“最差实践”，避免挖坑。 </value></post_desc></item>
<item><title><value>Python调用C模块以及性能分析</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87044/</value></title_url><post_desc><value>c，ctypes和python的数据类型的对应关系；通过Python调用so文件和python的测试结果</value></post_desc></item>
<item><title><value>7 个测量 Python 脚本和控制内存以及 CPU 使用率的技巧</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86922/</value></title_url><post_desc><value>当运行一个复杂的 Python 程序，它需要很长时间来执行。你或许想提升它的执行时间。但如何做？首先，你需要工具来查明你代码的瓶颈，而且，你也应该控制内存和 CPU 使用率。所以，在本文中，我将对 7 个不同的 Python 工具发表意见，给你一些关于你函数执行时间和内存以及 CPU 使用率的见解。</value></post_desc></item>
<item><title><value>Scikit-learn中的决策树</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86911/</value></title_url><post_desc><value>决策树是一个非参数的监督式学习方法，主要用于分类和回归。算法的目标是通过推断数据特征，学习决策规则从而创建一个预测目标变量的模型。如下如所示，决策树通过一系列if-then-else 决策规则 近似估计一个正弦曲线。</value></post_desc></item>
<item><title><value>python  numpy基础  数组和矢量计算</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87352/</value></title_url><post_desc><value>在python 中，我们用数组操作数据可以极大的提升数据的处理效率，类似于R的向量化操作，使得数据的操作趋于简单化。在python 中，我们使用numpy模块可以进行数组和矢量计算。</value></post_desc></item>
<item><title><value>python  pandas 数据处理</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87349/</value></title_url><post_desc><value>pandas是基于numpy包扩展而来的，因而numpy的绝大多数方法在pandas中都能适用。其中，Series是类似于数组的对象，它有一组数据和与之相关的标签组成。DataFrame数据框，也是一种数据结构，和R中的数据框类似。</value></post_desc></item>
<item><title><value>python  数据清洗之数据合并、转换、过滤、排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87346/</value></title_url><post_desc><value>数据清洗一直是数据分析中极为重要的一个环节。本文就介绍下数据清洗的基本操作。</value></post_desc></item>
<item><title><value>K-Means聚类的Python实践</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87343/</value></title_url><post_desc><value>K-Means应该是最简单的聚类算法之一了吧，理论上很简单，就是随即初始化几个中心点，不断的把他们周围的对象聚集起来，然后根据这群对象的重置中心点，不断的迭代，最终找到最合适的几个中心点，就算完成了。</value></post_desc></item>
<item><title><value>朴素贝叶斯新闻分类器详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87340/</value></title_url><post_desc><value>机器学习的三要素是模型、策略和优化算法。一个具体的机器学习流程是怎么样的呢，本文就使用朴素贝叶斯进行新闻分类进行一个完整的介绍。</value></post_desc></item>
<item><title><value>wsgiref 源码解析</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87390/</value></title_url><post_desc><value>wsgiref 是 PEP 333 定义的 wsgi 规范的范例实现，里面的功能包括了：操作 wsgi 的环境变量、应答头部的处理、实现简单的 HTTP server和简单的对程序端和服务器端校验函数。</value></post_desc></item>
<item><title><value>Python 招聘信息爬取及可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87387/</value></title_url><post_desc><value>自学python的大四狗发现校招招python的屈指可数，全是C++、Java、PHP，但看了下社招岗位还是有的。于是为了更加确定有多少可能找到工作，就用python写了个爬虫爬取招聘信息，数据处理，最后用R语言进行可视化呈现。</value></post_desc></item>
<item><title><value>python logging日志模块以及多进程日志</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87300/</value></title_url><post_desc><value>本篇文章主要对 python logging 的介绍加深理解，更主要是讨论在多进程环境下如何使用logging 来输出日志， 如何安全地切分日志文件。</value></post_desc></item>
<item><title><value>Python标准库之functools/itertools/operator</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87296/</value></title_url><post_desc><value>functools, itertools, operator是Python标准库为我们提供的支持函数式编程的三大模块，合理的使用这三个模块，我们可以写出更加简洁可读的Pythonic代码，本文就通过一些例子来学习了解三大模块的使用。</value></post_desc></item>
<item><title><value>Python 中的单例模式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87294/</value></title_url><post_desc><value>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</value></post_desc></item>
<item><title><value>super 没那么简单</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87291/</value></title_url><post_desc><value>说到 super， 大家可能觉得很简单呀，不就是用来调用父类方法的嘛。如果真的这么简单的话也就不会有这篇文章了，且听我细细道来。</value></post_desc></item>
<item><title><value>用树莓派从零开始做一个家庭监控</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87141/</value></title_url><post_desc><value>市面上有很多产品是关于家庭监控的，效果不错，但是也少了几分自己动手的快感。另外，我们每天一直接触代码，未免有些太“软”了，适当的向硬件靠一靠总归还是好的。先说好，我们的家庭监控是每分钟的照片的监控，并不是真正的实时视频，这种实时视频树莓派性能可能不够。</value></post_desc></item>
<item><title><value>用greenlet实现Python中的并发</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87182/</value></title_url><post_desc><value>协程可以在一个函数执行过程中将其挂起，去执行另一个函数，并在必要时将之前的函数唤醒。在Python的语言环境里，协程是相当常用的实现“并发”的方法。上一篇的例子中，我们演示了如何使用yield关键字来实现协程，这里我们要介绍一个非常好用的框架greenlet</value></post_desc></item>
<item><title><value>Python 正则表达式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87180/</value></title_url><post_desc><value>正则表达式（regular expression）是可以匹配文本片段的模式。最简单的正则表达式就是普通字符串，可以匹配其自身。要注意的是，正则表达式并不是一个程序，而是用于处理字符串的一种模式，如果你想用它来处理字符串，就必须使用支持正则表达式的工具，比如 Linux 中的 awk, sed, grep，或者编程语言 Perl, Python, Java 等等。</value></post_desc></item>
<item><title><value>Python爬虫实战---抓取图书馆借阅信息</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87045/</value></title_url><post_desc><value>Python版本是 2.7 ，同时用到了urllib2、cookielib、re三个模块。urllib2用于创建请求(request)，并抓取网页信息，返回一个类似于文件类型的response对象；cookielib用于储存cookie对象，以实现模拟登录功能；re模块提供对正则表达式的支持，用于对抓取到的页面信息进行匹配，以得到自己想要的信息。</value></post_desc></item>
<item><title><value>初试Gevent – 高性能的Python并发框架</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87041/</value></title_url><post_desc><value>Gevent是一个基于greenlet的Python的并发框架，以微线程greenlet为核心，使用了epoll事件监听机制以及诸多其他优化而变得高效。于greenlet、eventlet相比，性能略低，但是它封装的API非常完善，最赞的是提供了一个monkey类，可以将现有基于Python线程直接转化为greenlet，相当于proxy了一下（打了patch）。</value></post_desc></item>
<item><title><value>基于 Tor 匿名网络的多 IP 爬虫</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86992/</value></title_url><post_desc><value>更换ip的方式有多种，其中tor这类型则适合ip更换次数不大，网页数据量也不大，但是又厌恶代理那天天失效的麻烦，则最简单快捷的便是使用tor在本机搭建一个出口端口，让需要更换ip的爬虫程序制定proxies指向的端口，简单而且快捷</value></post_desc></item>
<item><title><value>Scikit-learn使用总结</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86910/</value></title_url><post_desc><value>在机器学习和数据挖掘的应用中，scikit-learn是一个功能强大的python包。在数据量不是过大的情况下，可以解决大部分问题。学习使用scikit-learn的过程中，我自己也在补充着机器学习和数据挖掘的知识。这里根据自己学习sklearn的经验，我做一个总结的笔记。另外，我也想把这篇笔记一直更新下去。</value></post_desc></item>
<item><title><value>理解 python 中多线程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86909/</value></title_url><post_desc><value>虽然python中由于GIL的机制致使多线程不能利用机器多核的特性，但是多线程对于我们理解并发模型以及底层操作非常有用。线程的有两种使用方法，一种是在函数使用，一种是放在类中使用。</value></post_desc></item>
<item><title><value>Python 描述符简介</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86902/</value></title_url><post_desc><value>Python 2.2 引进了 Python 描述符，同时还引进了一些新的样式类，但是它们并没有得到广泛使用。Python 描述符是一种创建托管属性的方法。除了其他优点外，托管属性还用于保护属性不受修改，或自动更新某个依赖属性的值。</value></post_desc></item>
<item><title><value>隐藏的宝藏，13个不可忽视的优秀 Python 库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87337/</value></title_url><post_desc><value>作为一门语言，你知道 Python 是如何获得现在的成功的吗? 不妨去看看它大量的库吧，不管是原生的，还是第三方的，可能会有所收获。</value></post_desc></item>
<item><title><value>Python标准库系列之模块介绍</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87330/</value></title_url><post_desc><value>Python的模块其实就是封装了一个或者多个功能的代码集合，以便于重用，模块可以是一个文件也可以是一个目录，目录的形式称作包。 </value></post_desc></item>
<item><title><value>flask 源码解析：应用启动流程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87329/</value></title_url><post_desc><value>WSGI application 非常重要的特点是：它是可以嵌套的。换句话说，我可以写个 application，它做的事情就是调用另外一个 application，然后再返回（类似一个 proxy）。</value></post_desc></item>
<item><title><value>flask 源码解析：路由</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87327/</value></title_url><post_desc><value>一个 web 应用不同的路径会有不同的处理函数，路由就是根据请求的 URL 找到对应处理函数的过程。</value></post_desc></item>
<item><title><value>flask 源码解析：简介</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87323/</value></title_url><post_desc><value>Flask是一个“微” python web 开发框架。flask 的特点是简单可扩展。简单有几个方面，比如它只实现 web 框架最核心的功能，保持功能的简洁；还有一个就是代码量少，核心代码 app.py 文件只有 2k+ 行。</value></post_desc></item>
<item><title><value>Python爬虫基础</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87288/</value></title_url><post_desc><value>Python非常适合用来开发网页爬虫，接口简洁、文档完整。此外，Python的第三方库能够模拟登录、处理网页等。</value></post_desc></item>
<item><title><value>从零开始的Python爬虫速成指南</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87284/</value></title_url><post_desc><value>本文以最短的时间写一个最简单的爬虫，可以抓取论坛的帖子标题和帖子内容。</value></post_desc></item>
<item><title><value>Python 作用域(scope) 和 LEGB</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87280/</value></title_url><post_desc><value>作用域是代码正文中的一段代码区域, 作用域的有效范围更多是这段代码区域去衡量,一个作用域可以有多个名字空间, 一个名字空间也能有多个约束(多个赋值语句)。Python中可以通过sys._getframe().f_code.co_name 查看代码所处的作用域。</value></post_desc></item>
<item><title><value>一个非常简单易懂的WIFI密码爆破python脚本</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87277/</value></title_url><post_desc><value>Pywifi是一个操作WIFI设备的跨平台模块，本文就在Linux下使用Pywifi来扫描使用弱口令的WIFI热点。</value></post_desc></item>
<item><title><value>谈谈Python的生成器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87154/</value></title_url><post_desc><value>第一次看到Python代码中出现yield关键字时，一脸懵逼，完全理解不了这个。网上查下解释，函数中出现了yield关键字，则调用该函数时会返回一个生成器。那到底什么是生成器呢？</value></post_desc></item>
<item><title><value>Python爬虫-用Scrapy框架实现漫画的爬取</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87155/</value></title_url><post_desc><value>本篇文章，通过 scrapy 框架来实现相同的功能。scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。关于框架使用的更多详情可浏览官方文档，本篇文章展示的是爬取漫画图片的大体实现过程。</value></post_desc></item>
<item><title><value>python中协程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87156/</value></title_url><post_desc><value> 进程是正在执行程序实例。执行程序的过程中，内核会讲程序代码载入虚拟内存，为程序变量分配空间，建立 bookkeeping 数据结构，来记录与进程有关的信息。一个进程中可以执行多个线程。多个线程共享进程内的资源。所以可以将线程可以看成是共享同一虚拟内存以及其他属性的进程。</value></post_desc></item>
<item><title><value>在Python应用中使用MongoDB</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87157/</value></title_url><post_desc><value>Python是开发社区中用于许多不同类型应用的强大编程语言。很多人都知道它是可以处理几乎任何任务的灵活语言。因此，在Python应用中需要一个什么样的与语言本身一样灵活的数据库呢？那就是NoSQL，比如MongoDB</value></post_desc></item>
<item><title><value>python解析命令行</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87014/</value></title_url><post_desc><value>python解析命令行</value></post_desc></item>
<item><title><value>Python科学计算——任意波形拟合</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87015/</value></title_url><post_desc><value>任意波形的生成 (geneartion of arbitrary waveform) 在商业，军事等领域都有着重要的应用，诸如空间光通信 (free-space optics communication)， 高速信号处理 (high-speed signal processing)，雷达 (radar) 等。在任意波形生成后，如何评估生成的任意波形成为另外一个重要的话题。</value></post_desc></item>
<item><title><value>Python 性能分析入门指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86903/</value></title_url><post_desc><value>虽然并非你编写的每个 Python 程序都要求一个严格的性能分析，但是让人放心的是，当问题发生的时候，Python 生态圈有各种各样的工具可以处理这类问题。</value></post_desc></item>
<item><title><value>Python中的logging模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86887/</value></title_url><post_desc><value>最近修改了项目里的logging相关功能，用到了python标准库里的logging模块，在此做一些记录。主要是从官方文档和stackoverflow上查询到的一些内容。</value></post_desc></item>
<item><title><value>实时 Django 终于来了 —— Django Channels 入门指南</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86861/</value></title_url><post_desc><value>今天，我们很高兴请到Jacob Kaplan-Moss。Jacob是来自Herokai，也是 Django的长期的核心代码贡献者，他将在这里分享一些他对某些特性的深入研究，他认为这些特性将重新定义框架未来。</value></post_desc></item>
<item><title><value>python黑魔法---上下文管理器（contextor）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87317/</value></title_url><post_desc><value>本文所讨论的上下文，简而言之，就是程式所执行的环境状态，或者说程式运行的情景。既然提及上下文，就不可避免的涉及Python中关于上下文的魔法，即上下文管理器（contextor）。</value></post_desc></item>
<item><title><value>python黑魔法---迭代器（iterator）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87312/</value></title_url><post_desc><value>因为Python，我见识了优雅。优雅不经在于自己使用，还在于如何设计API给别人使用。设计api的时候，可以利用python的描述符完成很多工作，而这些描述符操作，还有一个名字就是“魔法方法”。前面我们介绍了一个装饰器魔法，现在再来认识一下迭代器神功。</value></post_desc></item>
<item><title><value>Python并发编程之线程池/进程池</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87272/</value></title_url><post_desc><value>Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程/多进程代码，但是当项目达到一定的规模，频繁创建/销毁进程或者线程是非常消耗资源的，这个时候我们就要编写自己的线程池/进程池，以空间换时间。</value></post_desc></item>
<item><title><value>Python 中 NaN 和 None 的详细比较</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87266/</value></title_url><post_desc><value>python原生的None和pandas, numpy中的numpy.NaN尽管在功能上都是用来标示空缺数据。但它们的行为在很多场景下确有一些相当大的差异。</value></post_desc></item>
<item><title><value>分布式队列神器 Celery</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87238/</value></title_url><post_desc><value>Celery 是一个由 Python 编写的简单、灵活、可靠的用来处理大量信息的分布式系统,它同时提供操作和维护分布式系统</value></post_desc></item>
<item><title><value>python 魔术方法 : 让自定义类更像内置类型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87239/</value></title_url><post_desc><value>Python的魔术方法是Python中那些预定义的像__XXX__类型的函数。使用Python的魔术方法的最大优势在于python提供了简单的方法让对象可以表现得像内置类型一样。</value></post_desc></item>
<item><title><value>分布式任务队列Celery的介绍</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87158/</value></title_url><post_desc><value>在程序运行过程中，要执行一个很久的任务，但是我们又不想主程序被阻塞，常见的方法是多线程。可是当并发量过大时，多线程也会扛不住，必须要用线程池来限制并发个数，而且多线程对共享资源的使用也是很麻烦的事情。本文要介绍一个强大的分布式任务队列Celery。</value></post_desc></item>
<item><title><value>Python 2.x 字符编码终极指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87145/</value></title_url><post_desc><value>本文首先尝试对编码、解码进行一个宏观、直观的解读，然后详细来解释 python2 中的str和unicode，并对常见的UnicodeEncodeError 和 UnicodeDecodeError 异常进行剖析。</value></post_desc></item>
<item><title><value>谈一谈Python的上下文管理器 – 思诚之道</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87135/</value></title_url><post_desc><value>经常在Python代码中看到with语句，仔细分析下，会发现这个with语句功能好强，可以自动关闭资源。这个在Python中叫上下文管理器Context Manager。那我们要怎么用它，什么时候用它呢。这里我们就来聊一聊。</value></post_desc></item>
<item><title><value>基于Python的数据可视化 matplotlib seaborn pandas</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87136/</value></title_url><post_desc><value>基于Python的数据可视化 matplotlib seaborn pandas；原文采用了kaggle上iris花的数据，数据来源从上面的网址上找噢</value></post_desc></item>
<item><title><value>Flask 系列 - 基于 Flask 提供 RESTful Web 服务</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87118/</value></title_url><post_desc><value>REST 全称是 Representational State Transfer，翻译成中文是『表现层状态转移』，估计读者看到这个词也是云里雾里的，我当初也是！这里，我们先不纠结这个词到底是什么意思。事实上，REST 是一种 Web 架构风格，它有六条准则，满足文中六条准则的 Web 架构可以说是 Restuful 的。</value></post_desc></item>
<item><title><value>Python打包分发工具setuptools简介</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87240/</value></title_url><post_desc><value>作为Python标准的打包及分发工具，setuptools可以说相当地简单易用。它会随着Python一起安装在你的机器上。你只需写一个简短的setup.py安装文件，就可以将你的Python应用打包。本文就会介绍下如何编写安装文件及如何打包分发。</value></post_desc></item>
<item><title><value>Python远程部署利器Fabric详解</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87241/</value></title_url><post_desc><value>Fabric是一个Python的库，它提供了丰富的同SSH交互的接口，可以用来在本地或远程机器上自动化、流水化地执行Shell命令。因此它非常适合用来做应用的远程部署及系统维护。本文将为大家详细介绍Fabric的使用。</value></post_desc></item>
<item><title><value>Python通过ctypes调用C程序实例</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87242/</value></title_url><post_desc><value>在做复杂计算时，Python的执行效率是无法同C比的。而且有些算法已经有开源的C库了，我们也没必要用Python重写一份。Python提供的ctypes库，它提供同C语言兼容的数据类型，可以很方便地调用C语言动态链接库中的函数。</value></post_desc></item>
<item><title><value>使用Scrapy构建一个网络爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87243/</value></title_url><post_desc><value>记得n年前项目需要一个灵活的爬虫工具，因为要考虑到各种特殊情形，开发耗了不少人力。后来发现了Python下有这个Scrapy工具，瞬间觉得之前做的事情都白费了。对于一个普通的网络爬虫功能，Scrapy完全胜任，并把很多复杂的编程都包装好了。本文会介绍如何Scrapy构建一个简单的网络爬虫。</value></post_desc></item>
<item><title><value>python在linux制作图形界面（snack）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87119/</value></title_url><post_desc><value>snack是一个用于在linux制作图形界面（GUI）的模块，该模块由c编写，而且redhat的系统都自带这个模块。</value></post_desc></item>
<item><title><value>Python: 熟悉又陌生的字符编码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87120/</value></title_url><post_desc><value>字符编码是计算机编程中不可回避的问题，不管你用 Python2 还是 Python3，亦或是 C++, Java 等，我都觉得非常有必要厘清计算机中的字符编码概念。</value></post_desc></item>
<item><title><value>Python网络爬虫二三事</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87234/</value></title_url><post_desc><value>作为一名合格的数据分析师，其完整的技术知识体系必须贯穿数据获取、数据存储、数据提取、数据分析、数据挖掘、数据可视化等各大部分。在此作为初出茅庐的数据小白，我将会把自己学习数据科学过程中遇到的一些问题记录下来，以便后续的查阅。</value></post_desc></item>
<item><title><value>HTTP协议中你必须知道的三种数据格式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86798/</value></title_url><post_desc><value>实习中的一个主要工作就是分析 HTTP 中的协议，自己也用 Python 写过正则表达式对 HTTP 请求和响应的内容进行匹配，然后把关键字段抽离出来放到一个字典中以备使用(可以稍微改造一下就是一个爬虫工具)。 HTTP 协议中的很多坑，自己都遇到过，我就针对自己遇到的几种 HTTP 常见的数据格式，来做一个总结。</value></post_desc></item>
<item><title><value>Python: 你不知道的 super</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86787/</value></title_url><post_desc><value>在类的继承中，如果重定义某个方法，该方法会覆盖父类的同名方法，但有时，我们希望能同时实现父类的功能，这时，我们就需要调用父类的方法了，可通过使用 super 来实现</value></post_desc></item>
<item><title><value>Python装饰器的另类用法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86788/</value></title_url><post_desc><value>之前有比较系统介绍过Python的装饰器（请查阅《详解Python装饰器》），本文算是一个补充。今天我们一起探讨一下装饰器的另类用法。</value></post_desc></item>
<item><title><value>使用phantomjs采集运用了强制跳转与页面等待等反爬技术的网站</value></title><lei><value>框架</value></lei><title_url><value>http://python.jobbole.com/86784/</value></title_url><post_desc><value>现在在维护一个反反爬虫技术的项目，有朋友提交了一个采集网站，普通请求和scrapy都无法拿到数据，我来尝试了一波 仓库地址在：https://github.com/KCPClub/Anti-Anti-Spider 本次代码在phantomjs目录下 确保你安装好了phantomjs</value></post_desc></item>
<item><title><value>格式化和清洗数据的 Python 工具包</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86758/</value></title_url><post_desc><value>作为数据分析员，清洗数据要花费绝大部分时间，文章汇总了各种方便的python包进行前期数据清洗。</value></post_desc></item>
<item><title><value>利用 Python、SciKit 和文本分类来实现行为分析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86763/</value></title_url><post_desc><value>本文将介绍如何使用文本分类来构建行为描述模型。文中将展示如何使用 SciKit 这个强大的基于 Python 的机器学习包来实现模型构造和评估，还会对模拟的客户及其产品购买历史记录应用该模型。在这种特定的场景中，将会构造一个模型，向客户分配一些音乐听众感兴趣的特色内容。</value></post_desc></item>
<item><title><value>Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86764/</value></title_url><post_desc><value>背景： PySpider：一个国人编写的强大的网络爬虫系统并带有强大的WebUI。采用Python语言编写，分布式架构，支持多种数据库后端，强大的WebUI支持脚本编辑器，任务监视器，项目管理器以及结果查看器。</value></post_desc></item>
<item><title><value>Flask 插件系列 - Flask-Mail</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86765/</value></title_url><post_desc><value>给用户发送邮件是 Web 应用中最常见的任务之一，比如用户注册，找回密码等。Python 内置了一个 smtplib 的模块，可以用来发送邮件，这里我们使用 Flask-Mail，是因为它可以和 Flask 集成，让我们更方便地实现此功能。</value></post_desc></item>
<item><title><value>深入理解Python中的ThreadLocal变量（下）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86753/</value></title_url><post_desc><value>在上篇我们看到了 ThreadLocal 变量的简单使用，中篇对python中 ThreadLocal 的实现进行了分析，但故事还没有结束。本篇我们一起来看下Werkzeug中ThreadLocal的设计。</value></post_desc></item>
<item><title><value>如何在Web服务器80端口上开启SSH服务</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86746/</value></title_url><post_desc><value>在Web服务器80端口上开启SSH服务.本文所讨论的网络端口复用并非指网络编程中采用SO_REUSEADDR选项的 Socket Bind 复用。它更像是一个带特定路由功能的端口转发工具，在应用层实现。</value></post_desc></item>
<item><title><value>玩Python之HTTP代理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86747/</value></title_url><post_desc><value>HTTP代理本质上是一个Web应用，它和其他普通Web应用没有根本区别。HTTP代理收到请求后，根据Header中Host字段的主机名和Get/POST请求地址综合判断目标主机，建立新的HTTP请求并转发请求数据，并将收到的响应数据转发给客户端。</value></post_desc></item>
<item><title><value>预演：使用 TensorFlow 进行深度学习</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86862/</value></title_url><post_desc><value>本文是使用 Tensorflow 来撰写深度学习实施方案的预排，我在此只做简单地介绍。因为我不是计算机领域的专家，所以会有介绍不详尽的的地方。因此，我希望你在阅读这些代码之前，先了解相关的理论知识。</value></post_desc></item>
<item><title><value>适用于 PHP 开发人员的 Python 基础知识</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86734/</value></title_url><post_desc><value>您是一名经验丰富的 PHP 开发人员，并且希望学习 Python 吗？本文将从 PHP 开发人员的角度来探索 Python 开发的世界，将大家熟悉的 PHP 概念（如变量、列表、函数）转换成同等的 Python 概念。</value></post_desc></item>
<item><title><value>Socket 编程实战</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86733/</value></title_url><post_desc><value>本文着重介绍现在用的最多的 network socket，包括其在网络模型中的位置、API 的编程范式、常见错误等方面，最后用 Python 语言中的 socket API 实现几个实际的例子。</value></post_desc></item>
<item><title><value>PyPy 简介</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86735/</value></title_url><post_desc><value>通过带有即时编译器实现的 PyPy 提高 Python 开发的绩效和灵活性。了解 PyPy 和它的优点，以及它能如何加速高性能应用程序的开发。</value></post_desc></item>
<item><title><value>Python 异步网络爬虫（1）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86727/</value></title_url><post_desc><value>本文主要讨论下面几个问题：</value><value>什么是异步（Asynchronous）编程？为什么要使用异步编程？在 Python 中有哪些实现异步编程的方法？Python 3.5 如何使用 async/await 实现异步网络爬虫？</value></post_desc></item>
<item><title><value>Python 内存问题：提示和技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86863/</value></title_url><post_desc><value>Python 打算删除大量涉及像C和C++语言那样的复杂内存管理。当对象离开范围，就会被自动垃圾收集器回收。然而，对于由 Python 开发的大型且长期运行的系统来说，内存管理是不容小觑的事情。</value></post_desc></item>
<item><title><value>Python初学者之网络爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86872/</value></title_url><post_desc><value>本文将介绍我最近在学习Python过程中写的一个爬虫程序，将力争做到不需要有任何Python基础的程序员都能读懂。读者也可以先跳到文章末尾看最终收集的数据效果和完整代码。</value></post_desc></item>
<item><title><value>听说你会 Python ？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86869/</value></title_url><post_desc><value>Python是一门容易入门的语言，但是在学完Python基础知识后你真的会python吗？</value></post_desc></item>
<item><title><value>我为何从 Python 转向 Erlang</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/86860/</value></title_url><post_desc><value>在本文中，我将讲述我是如何从使用python转换到使用Erlang的。如果你正想着选择一门语言入门，那么请不要让我的观点影响到你的决定。我所要讲述的，是我在使用python过程遇到的问题，然后Erlang又是如何帮我解决这些问题的。</value></post_desc></item>
<item><title><value>关于python编码，你真的明白了吗</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86716/</value></title_url><post_desc><value>想要彻底搞清楚编码问题，我们必须要先搞清楚计算机是怎么存储数据的，这就涉及到了计算机基础的几个概念了，开篇我们就先来捋捋这几个容易混淆的概念。</value></post_desc></item>
<item><title><value>详解Python的装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86717/</value></title_url><post_desc><value>Python中的装饰器是你进入Python大门的一道坎，不管你跨不跨过去它都在那里。</value></post_desc></item>
<item><title><value>说说Python中的闭包</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86718/</value></title_url><post_desc><value>Python中的闭包不是一个一说就能明白的概念，但是随着你往学习的深入，无论如何你都需要去了解这么一个东西。</value></post_desc></item>
<item><title><value>使用 Python 进行分布式系统协调</value></title><lei><value>框架</value></lei><title_url><value>http://python.jobbole.com/86713/</value></title_url><post_desc><value>随着大数据时代的到来，分布式是解决大数据问题的一个主要手段，随着越来越多的分布式的服务，如何在分布式的系统中对这些服务做协调变成了一个很棘手的问题。今天我们就来看看如何使用Python，利用开源对分布式服务做协调。</value></post_desc></item>
<item><title><value>Python: 会打扮的装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86859/</value></title_url><post_desc><value>我们知道，在 Python 中，我们可以像使用变量一样使用函数： 函数可以被赋值给其他变量 函数可以被删除 可以在函数里面再定义函数 函数可以作为参数传递给另外一个函数 函数可以作为另一个函数的返回</value></post_desc></item>
<item><title><value>Python使用HTTP2实现苹果原生推送</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86847/</value></title_url><post_desc><value>说起苹果的推送,可能很多开发人员就开始头疼了,因为实现苹果推送服务是1个比较蛋疼的事情,于是便引入了第3方推送平台,比如极光、信鸽之类的服务。由于苹果原生APNs蛋疼的协议,致使本来很简单的1个推送服务让人望而却步。直到苹果最近的HTTP2协议的出现才有所改善。</value></post_desc></item>
<item><title><value>Python: 携带状态的闭包</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86846/</value></title_url><post_desc><value>在 Python 中，函数也是一个对象。因此，我们在定义函数时，可以再嵌套定义一个函数，并将该嵌套函数返回。一个函数返回了一个内部函数，该内部函数引用了外部函数的相关参数和变量，我们把该返回的内部函数称为闭包（Closure）。</value></post_desc></item>
<item><title><value>Python 异步调用命令行工具</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86829/</value></title_url><post_desc><value>当你在自己的 Python 程序中采用了基于事件循环的异步编程方法之后，你就会发现自己不自觉地被其牢牢吸引住，并不是说这一方法多么棒，而是因为你不得不想办法保证程序中的任意环节都不能是阻塞的！</value></post_desc></item>
<item><title><value>从零开始搭建论坛（3）：Flask框架简介</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86707/</value></title_url><post_desc><value>我们知道，Web框架通过将不同Web应用程序中的共性部分给抽象出来，提供一系列通用的接口，从而避免开发者做重复性工作，让其将精力放在业务相关的实现。本篇大概谈了下 Flask 的路由分发和模版渲染。</value></post_desc></item>
<item><title><value>Python 异步网络爬虫（2）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86795/</value></title_url><post_desc><value>上一部分整理了如何利用 aiohttp 和 asyncio 执行异步网络请求，接下来我们将在此基础上实现一个简洁、普适的爬虫框架。</value></post_desc></item>
<item><title><value>对 Python Socket 编程的初探</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86837/</value></title_url><post_desc><value>对于python网络编程来说，免不了要用到socket模块。本文主要分享一下个人对python socket的一些理解。</value></post_desc></item>
<item><title><value>Python 性能分析工具简介</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86833/</value></title_url><post_desc><value>性能分析和调优工具简介 总会遇到一个时候你会想提高程序执行效率，想看看哪部分耗时长成为瓶颈，想知道程序运行时内存和CPU使用情况。这时候你会需要一些方法对程序进行性能分析和调优。 </value></post_desc></item>
<item><title><value>为何我暂停了维护 Python 社区的志愿者工作</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/86830/</value></title_url><post_desc><value>作者是 Python 的核心开发人员，从2002年开始，十四年来自愿用业余时间为 Python 语言添砖加瓦。但这种活雷锋行为并没有得到开发者们的理解，很多人甚至用命令的口吻要求活雷锋们再苦再累也得免费为自己劳动。</value></post_desc></item>
<item><title><value>Python: 陌生的 metaclass</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86821/</value></title_url><post_desc><value>元类 Python 中的元类（metaclass）是一个深度魔法，平时我们可能比较少接触到元类，本文将通过一些简单的例子来理解这个魔法。 类也是对象 在 Python 中，一切皆对象。字符串，列表，字典，函数是对象。</value></post_desc></item>
<item><title><value>Python中单线程、多线程和多进程的效率对比实验</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86822/</value></title_url><post_desc><value>Python是运行在解释器中的语言，查找资料知道，python中有一个全局锁（GIL），在使用多进程(Thread)的情况下，不能发挥多核的优势。而使用多进程(Multiprocess)，则可以发挥多核的优势真正地提高效率。</value></post_desc></item>
<item><title><value>逃离 Python2</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86807/</value></title_url><post_desc><value>大约一个月前，我 tweet 了这条消息：想一想以下的情景：找到一群大型 Python 库的维护人员，让他们签订并声明 2020 年不再对 Python 2.7 提供支持。</value></post_desc></item>
<item><title><value>如何扩展Django用户模块</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86806/</value></title_url><post_desc><value>Django内置的用户验证系统十分强大。大多数情况下，它可以拿来就用，能帮我们省去很多开发、测试的工作。它能满足大多数的使用情况并且很安全。但是有时候，为满足我们的网络应用需求，需要对它进行一些微调。</value></post_desc></item>
<item><title><value>随机森林算法入门(python)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86811/</value></title_url><post_desc><value>昨天收到yhat推送了一篇介绍随机森林算法的邮件，感觉作为介绍和入门不错，就顺手把它翻译一下。</value></post_desc></item>
<item><title><value>编写高效且优雅的 Python 代码（1）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86808/</value></title_url><post_desc><value>Python 作为一门入门极易并容易上瘾的语音，相信已经成为了很多人 “写着玩” 的标配脚本语言。但很多教材并没有教授 Python 的进阶和优化。</value></post_desc></item>
<item><title><value>Flask 插件系列 - Flask-SQLAlchemy</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86797/</value></title_url><post_desc><value>Web 开发中，一个重要的组成部分便是数据库了。Web 程序中最常用的莫过于关系型数据库了，也称 SQL 数据库。另外，文档数据库（如 mongodb）、键值对数据库（如 redis）近几年也逐渐在 web 开发中流行起来，我们习惯把这两种数据库称为 NoSQL 数据</value></post_desc></item>
<item><title><value>Python开发者又一次扩大圈内影响力的机会</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/85712/</value></title_url><post_desc><value>以往发布的内容以技术分享为主，很少覆盖Python技术领域和延伸领域的动态。对于开发者而言，了解自己所在行业和领域但动态也是很有必要的。我们开始筹备的「Python开发者」联合编辑团队就是希望能把分享的内容从技术干货延伸到行业动态，用集体的力量来为集体服务。</value></post_desc></item>
<item><title><value>Python中不尽如人意的断言Assertion</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86684/</value></title_url><post_desc><value>Python中的断言用起来非常简单，你可以在assert后面跟上任意判断条件，如果断言失败则会抛出异常。</value></post_desc></item>
<item><title><value>理解 Python 的 LEGB</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86685/</value></title_url><post_desc><value>Python 的名字空间是 Python 一个非常核心的内容。其他语言中如 C 中，变量名是内存地址的别名，而在 Python 中，名字是一个字符串对象，它与他指向的对象构成一个{name:object}关联。Python 由很多名字空间，而 LEGB 则是名字空间的一种查找规则。</value></post_desc></item>
<item><title><value>一起读 Gevent 源码</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86686/</value></title_url><post_desc><value>这一篇主要想跟大家分享一下 Gevent 实现的基础逻辑，也是有同学对这个很感兴趣，所以贴出来跟大家一起分享一下。</value></post_desc></item>
<item><title><value>Python 装饰器之 functools.wraps</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86687/</value></title_url><post_desc><value>在以前的 Blog 中曾经简单写过 Decorator。这次需要讲的更细一些。Decorator 通过返回包装对象实现间接调用,以此插入额外逻辑。是从老大那边偷来的哪里摘抄来的，应该算是言简意赅了。</value></post_desc></item>
<item><title><value>Ubuntu+Django+Nginx+uWSGI+Mysql搭建Python Web服务器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86688/</value></title_url><post_desc><value>前不久为了部署Django项目，在百度上到处找教程，找到的教程因为这样那样的原因，总是失败，可能是因为作者水平比较高吧，有些细节的东西估计没写出来，造成我这种初学者想照着做都做不成。百度不行就用Google吧，中文不行就找英文的，最后，给我误打误撞的部署成功了。为了加深印象，我用虚拟机再重新部署一次。</value></post_desc></item>
<item><title><value>用 sklearn 对 140W 个点进行 kmeans 基于密度聚类划分</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86667/</value></title_url><post_desc><value>任务需求：现有140w个某地区的ip和经纬度的对应表，根据每个ip的/24块进行初步划分，再在每个区域越100-200个点进行细致聚类划分由于k值未知，采用密度的Mean Shift聚类方式。</value></post_desc></item>
<item><title><value>一行 Python 代码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86678/</value></title_url><post_desc><value>自从08年接触Python，就有爱不释手的感觉，逐渐地，有些不忍地疏远了Perl 和Shell编程，因为python 的优雅么？ 不全是，主要是可以高效开发吧。那一行代码可以干什么呢？有趣!</value></post_desc></item>
<item><title><value>Spark for python developers ---Spark处理后的数据可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86668/</value></title_url><post_desc><value>spark for python developer 一书，说实在的，质量一般，但勉强可以作为python 工程师的入门资料，至此，这一时段的地铁译结束了，开始新的阅读旅程</value></post_desc></item>
<item><title><value>使用Python抓取欧洲足球联赛数据</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86669/</value></title_url><post_desc><value>本文介绍了Web Scraping的基本概念的相关的Python库，并详细讲解了如果从腾讯体育抓取欧洲联赛的详细数据的过程和代码。为下一步的大数据分析的做好准备</value></post_desc></item>
<item><title><value>python unicode 编码整理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86670/</value></title_url><post_desc><value>unicode 与 utf-8 的关系：unicode 是 character set，utf-8 是对 unicode 存储的实现方式</value></post_desc></item>
<item><title><value>Python 列表和元组的区别是什么？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86661/</value></title_url><post_desc><value>对python新手一个非常普遍的问题，列表和元组的有哪些不同？ 本文就来告诉你列表和元组的差异以及它们的使用场景。</value></post_desc></item>
<item><title><value>由一个例子到python的名字空间</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86655/</value></title_url><post_desc><value>python里面最核心的内容就是:名字空间(namespace)</value></post_desc></item>
<item><title><value>用Python爬取实习信息（Scrapy初体验）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86651/</value></title_url><post_desc><value>这两天要弄一个大作业，从水木社区和北大未名社区的实习板块，爬取实习信息，保存在MongoDB数据库。</value><value>
正好想学习一下scrapy框架的使用，就愉快地决定用scrapy来</value></post_desc></item>
<item><title><value>图文详解Python模拟登录新浪微博流程</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86638/</value></title_url><post_desc><value>这篇文章详细解析了新浪微博登录流程，包括各种加密算法解析、验证码解析、跳转解析等等。另外还有登录的代码供参考，代码在文章最后给出，同时也上传到了GitHub，大家可以参考一下。</value></post_desc></item>
<item><title><value>你真明白 Python 装饰器么？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86632/</value></title_url><post_desc><value>装饰器是程序开发中经常会用到的一个功能，用好了装饰器，开发效率如虎添翼，所以这也是Python面试中必问的问题，但对于好多小白来讲，这个功能 有点绕，自学时直接绕过去了，然后面试问到了就挂了，因为装饰器是程序开发的基础知识，这个都 不会，别跟人家说你会Python, 看了下面的文章，保证你学会装饰器。</value></post_desc></item>
<item><title><value>人脸识别算法-特征脸方法（Eigenface）及python实现</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86626/</value></title_url><post_desc><value>这几天无聊，正好想起来以前谁说有同学做人脸识别，感觉好高大上，所以找来一些基础的人脸识别算法来自己实现一下，正好锻炼一下numpy的使用。</value></post_desc></item>
<item><title><value>星号变量的特殊用法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86589/</value></title_url><post_desc><value>在Python中，星号除了用于乘法数值运算和幂运算外，还有一种特殊的用法”在变量前添加单个星号或两个星号”，实现多参数的传入或变量的拆解，本文将详细介绍”星号参数”的用法。</value></post_desc></item>
<item><title><value>Python 二分查找与 bisect 模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86609/</value></title_url><post_desc><value>Python 的 bisect 模块用于列表的二分法插入，用其实现二分查找效率更高.</value></post_desc></item>
<item><title><value>Python 进阶_生成器 &amp; 生成器表达式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86606/</value></title_url><post_desc><value>带有 yield 关键字的的函数在 Python 中被称之为 generator(生成器)。Python 解释器会将带有 yield 关键字的函数视为一个 generator 来处理。一个函数或者子程序都只能 return 一次，但是一个生成器能暂停执行并返回一个中间的结果</value></post_desc></item>
<item><title><value>jieba 源码解析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86603/</value></title_url><post_desc><value>jieba分词是Python 里面几个比较流行的中文分词工具之一。为了理解分词工具的工作原理，以及实现细节对jieba进行了详细的阅读。</value></post_desc></item>
<item><title><value>手把手教你扩展个人微信号（2）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86532/</value></title_url><post_desc><value>上一篇已教你如何从零开始获取并模拟扩展个人微信号所需要的协议。</value><value>本文将会就这些协议进行利用，以各项目为例介绍一些微信有意思功能的实现。</value></post_desc></item>
<item><title><value>scrapy学习笔记</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86584/</value></title_url><post_desc><value>scrapy是python最有名的爬虫框架之一，可以很方便的进行web抓取，并且提供了很强的定制型，这里记录简单学习的过程和在实际应用中会遇到的一些常见问题</value></post_desc></item>
<item><title><value>如何搭建自己的pypi私有源服务器</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86585/</value></title_url><post_desc><value>搭建自己的pypi私有源服务器:python官方有个pypi私有源实现的说明：http://wiki.python.org/moin/PyPiImplementations ，并且列出了几个比较成熟的实现方案</value></post_desc></item>
<item><title><value>用 Python 的魔术方法做出更好的正则表达式 API</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86527/</value></title_url><post_desc><value>我的一个同事提到,他错过了 Ruby 的正则表达式的语法糖。我没有使用过 Ruby 的正则表达式，但是以我对 Python 的足够了解知道 API 是缺少足够的语法糖。</value></post_desc></item>
<item><title><value>ML 能用上的实用数据集</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86586/</value></title_url><post_desc><value>机器学习中重要的一步是创建或寻找合适的数据来训练和检验算法。使用好的数据集可以帮助你规避或发现算法中的错误，改善程序的结果。在多数情况下，创建自己的数据集是一件费时的事。本会向介绍一些有用的数据集，用于文本分类和图像分类问题。</value></post_desc></item>
<item><title><value>百万酒店评论数据，通过 ML 找出有趣的见解</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86583/</value></title_url><post_desc><value>文章详细分析了关于酒店住宿数据的信息，及其在各种不同方面的信息。包括了具体的详细代码和数据展示。</value></post_desc></item>
<item><title><value>爬虫中运用 cookie 来跳过登录问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86562/</value></title_url><post_desc><value>Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。本文用多种python实现方式演示如何加入cookie</value></post_desc></item>
<item><title><value>5 个很好的 Python 面试题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86525/</value></title_url><post_desc><value>5 个很好的 Python 面试题</value></post_desc></item>
<item><title><value>Python源码分析-PyDictObject</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86522/</value></title_url><post_desc><value>目前Cpython使用最多，下面分析下python中字典的源码实现。</value></post_desc></item>
<item><title><value>反爬虫之检测 PhantomJS 访客</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86502/</value></title_url><post_desc><value>作为数据采集工程师经常和反爬虫技术做斗争，其中我使用的爬虫结构是：分布式+多机器+adsl | tor+phantomjs无界面浏览器+机器学习验证码破解/这样已经基本属于爬虫界的大招。但是对方如果通过检测phantomjs的浏览器特性还是能区别出爬虫。</value></post_desc></item>
<item><title><value>详解Python中的__init__和__new__</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86506/</value></title_url><post_desc><value>详解Python中的__init__和__new__</value></post_desc></item>
<item><title><value>Python模板库Mako的用法</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86507/</value></title_url><post_desc><value> Python模板库Mako的用法 </value></post_desc></item>
<item><title><value>Python多核编程mpi4py实践</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86422/</value></title_url><post_desc><value>目前工作中我所接触到的并行处理框架主要有MPI、OpenMP和MapReduce(Hadoop)三个（CUDA属于GPU并行编程，这里不提及）。MPI和Hadoop都可以在集群中运行，而OpenMP因为共享存储结构的关系，不能在集群上运行，只能单机。</value></post_desc></item>
<item><title><value>python supervisor使用</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86423/</value></title_url><post_desc><value>Supervisor 是基于 Python 的进程管理工具，只能运行在 Unix-Like 的系统上，也就是无法运行在 Windows 上。Supervisor 官方版目前只能运行在 Python 2.4 以上版本，但是还无法运行在 Python 3 上，不过已经有一个 Python 3 的移植版 supervisor-py3k。 </value></post_desc></item>
<item><title><value>PYTHON编码的前世今生</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86578/</value></title_url><post_desc><value>这是我在知乎上回答的一个问题：Python 编码为什么那么蛋疼？，期间收到了不少赞，不过发现我的回答还存在一些误导，于是通过查找资料重新整理了一篇，希望能解答你对编码的困惑。</value></post_desc></item>
<item><title><value>python编码的意义</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86564/</value></title_url><post_desc><value>python中有关编码问题的对象有basestring, str, unicode， 标准库有codecs等，在这篇文章里我们基本上不会提到标准库，而仅仅简单的对对象们进行分析。因为这就够了！</value></post_desc></item>
<item><title><value>python装饰器和描述器的使用总结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86565/</value></title_url><post_desc><value>被某些中文教程坑过，我的建议是有问题看官方文档，即使没有很详细的例子，至少不坑 。</value></post_desc></item>
<item><title><value>python当中__metaclass__探讨</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86566/</value></title_url><post_desc><value>在python当中，__new__,__init__,__call__,让人头晕,type创建类，__metaclass__指定类的创建…..我已经晕了，所以今天特地探一下这些东西。下文当中为探讨内容，欢迎指出错误。</value></post_desc></item>
<item><title><value>协同过滤算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86563/</value></title_url><post_desc><value>协作型过滤 协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？</value></post_desc></item>
<item><title><value>Python的时间与日期</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86321/</value></title_url><post_desc><value>Python具有良好的时间和日期管理功能。实际上，计算机只会维护一个挂钟时间(wall clock time)，这个时间是从某个固定时间起点到现在的时间间隔。时间起点的选择与计算机相关，但一台计算机的话，这一时间起点是固定的。其它的日期信息都是从这一时间计算得到的。</value></post_desc></item>
<item><title><value>Python - 装饰器使用过程中的误区</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86313/</value></title_url><post_desc><value>大家都知道装饰器是一个很著名的设计模式，经常被用于AOP(面向切面编程)的场景，较为经典的有插入日志，性能测试，事务处理，Web权限校验，Cache等。</value><value>Python语言本身提供了装饰器语法（@）。</value></post_desc></item>
<item><title><value>用 python 实现各种排序算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86495/</value></title_url><post_desc><value>用 python 实现各种排序算法。包括：归并排序、插入排序、选择排序、希尔排序、堆排序 ( Heap Sort ) 和 快速排序。</value></post_desc></item>
<item><title><value>电影里的代码之《机械姬》：筛法求质数</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/86496/</value></title_url><post_desc><value>今天看了《机械姬》，探讨人工智能话题的电影，豆瓣评分7.5，还是蛮不错的一部电影。影片1:09:29处出现了一段python代码，细看了一下，发现是筛法求质数的python代码，写得非常简练的。</value></post_desc></item>
<item><title><value>依赖安装：setup.py和requirements.txt的对比</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86487/</value></title_url><post_desc><value>对于 setup.py 和 requirements.txt 的角色有很多误解，很多人认为它们是两个重复的事情，甚至创造了 工具 来处理 这种“重复”。</value></post_desc></item>
<item><title><value>Python 3.5 协程究竟是个啥</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86481/</value></title_url><post_desc><value>作为 Python 核心开发者之一，让我很想了解这门语言是如何运作的。我发现总有一些阴暗的角落我对其中错综复杂的细节不是很清楚，但是为了能够有助于 Python 的一些问题和其整体设计，我觉得我应该试着去理解 Python 的核心语法和内部运作机制。</value></post_desc></item>
<item><title><value>sqlalchemy学习笔记</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86482/</value></title_url><post_desc><value>SQLAlchemy是python的一个数据库ORM工具，提供了强大的对象模型间的转换，可以满足绝大多数数据库操作的需求，并且支持多种数据库引擎（sqlite，mysql，postgres, mongodb等），在这里记录基本用法和学习笔记</value></post_desc></item>
<item><title><value>运用phantomjs无头浏览器破解四种反爬虫技术</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86415/</value></title_url><post_desc><value>在与反爬虫的对抗中，我们爬虫的大招有两个，其一是多种ip跟换方式（例如adsl|代理|tor等请参看之前的文章）。其二是无头浏览器，使用自动化的技术来进行自动数据抓取，模拟鼠标与键盘事件，可以用于破解验证码，js解析，诡异的模糊数据这类型的反爬虫技术。</value></post_desc></item>
<item><title><value>python高级之函数</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86404/</value></title_url><post_desc><value>为什么要有函数？因为在平时写代码时，如果没有函数的话，那么将会出现很多重复的代码，这样代码重用率就比较低。并且这样的代码维护起来也是很有难度的，为了解决这些问题，就出现了函数，用来将一些经常出现的代码进行封装，这样就可以在任何需要调用这段代码的地方调用这个函数就行了。</value></post_desc></item>
<item><title><value>教你分分钟学会用python爬虫框架Scrapy爬取心目中的女神</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86405/</value></title_url><post_desc><value>Scrapy主要包括了以下组件：引擎(Scrapy)，调度器(Scheduler)，下载器(Downloader)，项目管道(Pipeline)，下载器中间件(Downloader Middlewares)，爬虫中间件(Spider Middlewares)，调度中间件(Scheduler Middewares)</value></post_desc></item>
<item><title><value>Python之线程、进程和协程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86406/</value></title_url><post_desc><value>我们都知道python网络编程的两大必学模块socket和socketserver，其中的socketserver是一个支持IO多路复用和多线程、多进程的模块。</value></post_desc></item>
<item><title><value>Python数据结构——AVL树的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86556/</value></title_url><post_desc><value>既然，我们已经证明，保持 AVL 树的平衡将会使性能得到很大的提升，那我们看看如何在程序中向树插入一个新的键值。</value></post_desc></item>
<item><title><value>众里寻她千百度，正则表达式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86553/</value></title_url><post_desc><value>正则表达式就是用来匹配特定内容的字符串。举个例子来讲，如果我想找出由a、b组成的，以abb结尾的字符串，比如ababb，那么用正则表达式来表示就是[ab]*abb。</value></post_desc></item>
<item><title><value>让 Python 代码运行更快的技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86545/</value></title_url><post_desc><value>各位要使用这些技巧的话，请在自己的服务器上测试一遍，并且加大测试的数值，目前的用例都是 10 W 次，我们可以测试 100 W , 1000 W 次。。。。如果测试的性能相差不多，请以可读性为主。</value></post_desc></item>
<item><title><value>使用 psutil 和 MongoDB 做系统监控</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86546/</value></title_url><post_desc><value>这篇入门文章描述了怎样创建一系列的图表来监控一台或多台服务器的负载。使用 Python（psutil 和 bottle），MongoDB 和 jquery。不管你使用什么样的数据库或 WEB 框架，思路都是一样的。在最后，你将有一个 web 页面为每台服务器展示图表，图表中显示了 cpu， memory， 和 disk usage。</value></post_desc></item>
<item><title><value>陷阱！python参数默认值</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86543/</value></title_url><post_desc><value>当python执行def语句时，它会根据编译好的函数体字节码和命名空间等信息新建一个函数对象，并且会计算默认参数的值。函数的所有构成要素均可通过它的属性来访问。所有默认参数值则存储在函数对象的__defaults__属性中，它的值为一个列表，列表中每一个元素均为一个默认参数的值。</value></post_desc></item>
<item><title><value>python性能分析</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86237/</value></title_url><post_desc><value>什么是性能分析 没有优化过的程序通常会在某些子程序(subroutine)上消耗大部分的CPU指令周期(CPU　cycle)。性能分析就是分析代码和它正在使用的资源之间有着怎样的关系。</value></post_desc></item>
<item><title><value>网站访问来源热力图呈现的简单数据可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86220/</value></title_url><post_desc><value>个人博客运营了一年，收集到陆陆续续的访问者总数约12w个ip地址。突然手痒，想知道都是哪些地方来的访问者，就用百度api和一些python的简单处理，小半天完成了一简单数据可视化练手项目。</value></post_desc></item>
<item><title><value>深入理解Python中的ThreadLocal变量（中）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86203/</value></title_url><post_desc><value>在上篇中我们看到 ThreadLocal 的引入，使得可以很方便地在多线程环境中使用局部变量。如此美妙的功能到底是怎样实现的？如果你对它的实现原理没有好奇心或一探究竟的冲动，那么接下来的内容估计会让你后悔自己的浅尝辄止了。</value></post_desc></item>
<item><title><value>提高Python运行效率的六个窍门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86308/</value></title_url><post_desc><value>Python是一门优秀的语言，它能让你在短时间内通过极少量代码就能完成许多操作。不仅如此，它还轻松支持多任务处理，比如多进程。不喜欢Python的人经常会吐嘈Python运行太慢。但是，事实并非如此。尝试以下六个窍门，来为你的Python应用提速。</value></post_desc></item>
<item><title><value>Python中如何创建mock？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86301/</value></title_url><post_desc><value>今天我们来谈论下mock的使用。当然，请不要误会，这里的mock可不是嘲弄的意思。mock是一门技术，通过伪造部分实际代码，从而让我们能够验证剩余代码的正确性。现在我们将通过几个简单的示例演示mock在Python测试代码中的使用，以及这项极其有用的技术是如何帮助我们改善测试代码的。</value></post_desc></item>
<item><title><value>Python处理Excel文档之openpyxl</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86295/</value></title_url><post_desc><value>顾名思义，openpyxl就是一个处理excel文档的一个python库。</value></post_desc></item>
<item><title><value>网络爬虫：使用Scrapy框架编写一个抓取书籍信息的爬虫服务</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86296/</value></title_url><post_desc><value>BeautifulSoup是一个非常流行的Python网络抓取库，它提供了一个基于HTML结构的Python对象。虽然简单易懂，又能非常好的处理HTML数据，但是相比Scrapy而言，BeautifulSoup有一个最大的缺点：慢。Scrapy 是一个开源的 Python 数据抓取框架，速度快，强大，而且使用简单 </value></post_desc></item>
<item><title><value>自动化运维之playbook</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86292/</value></title_url><post_desc><value>playbooks适合简单的配置管理以及多服务器机器的管理，同时还可以处理部署复杂的应用。</value><value>
要是服务器不仅仅复杂，数量上还是成千上万的呢，还是推荐使用重量级又古老文明的saltstack。</value></post_desc></item>
<item><title><value>Python Socket 网络编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86111/</value></title_url><post_desc><value>Socket是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：它能实现不同主机间的进程间通信，我们网络上各种各样的服务大多都是基于Socket来完成通信的，例如我们每天浏览网页、QQ聊天、收发email等等。</value></post_desc></item>
<item><title><value>Python面试中8个必考问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86100/</value></title_url><post_desc><value>由lambda表达式创造的函数没有什么特殊的地方，它其实是和def创造的函数式一样的。碰巧的是，《The Hitchhiker’s Guide to Python》也指出，在与lambdas函数相关也有一个被广泛被误解的知识点，不过跟这个case不一样。</value></post_desc></item>
<item><title><value>tornado源码解析之IOLoop</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86097/</value></title_url><post_desc><value>tornado是一个用Python语言写成的Web服务器兼Web应用框架，由FriendFeed公司在自己的网站FriendFeed中使用，被Facebook收购以后框架以开源软件形式开放给大众。</value></post_desc></item>
<item><title><value>Python图像处理库：Pillow 初级教程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86464/</value></title_url><post_desc><value>Pillow中最重要的类就是Image，该类存在于同名的模块中。可以通过以下几种方式实例化：从文件中读取图片，处理其他图片得到，或者直接创建一个图片。</value></post_desc></item>
<item><title><value>Python 五个知识点搞定作用域</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86465/</value></title_url><post_desc><value>块级作用域、局部作用域、作用域、终极版作用域</value></post_desc></item>
<item><title><value>Python 包管理工具解惑</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86466/</value></title_url><post_desc><value>作为一个 Python 初学者，我在包管理上感到相当疑惑（嗯，是困惑）。</value></post_desc></item>
<item><title><value>一分钟让你的程序支持队列和并发</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86459/</value></title_url><post_desc><value>在豆瓣，基本每个工程师都在用DPark，原理就是把任务拆分，利用DPark集群，在多台服务器上同时运行这些任务可以快速的获得结果。但是有些需求不能使用DPark，比如有频繁的数据库操作。</value></post_desc></item>
<item><title><value>numpy：python数据领域的功臣</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/86454/</value></title_url><post_desc><value>numpy对python的意义非凡，在数据分析与机器学习领域为python立下了汗马功劳。现在用python搞数据分析或机器学习经常使用的pandas、matplotlib、sklearn等库，都需要基于numpy构建。毫不夸张地说，没有numpy，python今天在数据分析与机器学习领域只能是捉襟见肘。</value></post_desc></item>
<item><title><value>Python第三方库安装及常见问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86397/</value></title_url><post_desc><value>Python具有丰富的第三方库，而且绝大部分都是开源的。利用好第三方库，能避免重复造轮子，加速开发。</value></post_desc></item>
<item><title><value>把vim配置成顺手的python轻量级IDE（1）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86384/</value></title_url><post_desc><value>网上已经有很多很好的vim使用和配置教程。但每个人都有自己的习惯，因此教程仅作参考，只有在使用过程中才能体会到具体的问题，然后解决问题才能把vim调教的顺手。</value></post_desc></item>
<item><title><value>把vim配置成顺手的python轻量级IDE（2）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86385/</value></title_url><post_desc><value>我在《把vim配置成顺手的python轻量级IDE（1）》中介绍了一些vim的插件，那些插件对于应付简单的实验已经已经能够比较顺手，但是在实际使用中发现在看代码的时候实在是虐心。</value></post_desc></item>
<item><title><value>Python 3: 加密简介-软件开发|Linux.中国-开源社区</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86386/</value></title_url><post_desc><value>Python 3 的标准库中没多少用来解决加密的，不过却有用于处理哈希的库。在这里我们会对其进行一个简单的介绍，但重点会放在两个第三方的软件包：PyCrypto 和 cryptography 上。我们将学习如何使用这两个库，来加密和解密字符串。 </value></post_desc></item>
<item><title><value>使用python写vim插件</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86538/</value></title_url><post_desc><value>vim有各种强大的插件，这不仅归功于其提供的用来编写插件的脚本语言vimL，还得益于它良好的接口实现，从而支持python等语言编写插件。当vim编译时带有+python特性时就能使用python2.x编写插件，+python3则支持python3.x。</value></post_desc></item>
<item><title><value>Python类继承的高级特性</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86539/</value></title_url><post_desc><value>昨天在Python类的多重继承那里纠结了好久,在提问版块提了个问题探讨了探讨才完全搞明白,现在把类的特性整理下,供以后参考</value></post_desc></item>
<item><title><value>通过网络图片小爬虫对比Python中单线程与多线（进）程的效率</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86530/</value></title_url><post_desc><value>批评 Python 的人通常都会说 Python 的多线程编程太困难了，众所周知的全局解释器锁（Global Interpreter Lock，或称 GIL）使得多个线程的 Python 代码无法同时运行。因此，如果你并非 Python 开发者，而是从其他语言如 C++ 或者 Java 转过来的话，你会觉得 Python 的多线程模块并没有以你期望的方式工作。</value></post_desc></item>
<item><title><value>SICP Python 描述 1.2 编程元素</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85980/</value></title_url><post_desc><value>1.2 编程元素 来源：1.2 The Elements of Programming 译者：飞龙 协议：CC BY-NC-SA 4.0 编程语言是操作计算机来执行任务的手段，它也在我们组织关于过程的想法中，作为一种框架。程序用于在编程社群的成员之间…</value></post_desc></item>
<item><title><value>SICP Python描述 1.1 引言</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85977/</value></title_url><post_desc><value>开始在Python中编程的最佳方法就是直接和解释器交互。这一章会描述如何安装Python3，使用解释器开始交互式会话，以及开始编程。</value></post_desc></item>
<item><title><value>从零开始搭建论坛（2）：Web服务器网关接口</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85963/</value></title_url><post_desc><value>在上篇中我们弄清楚了Web 服务器、Web 应用程序、Web框架的概念。对于 Python 来说，越来越多的 Web 框架面世，在给我们更多选择机会的同时，也限制了我们对于 Web Server 的选择。</value></post_desc></item>
<item><title><value>Python 正则模式中 search() 和 match() 有什么区别？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86217/</value></title_url><post_desc><value>在Python正则模式中search()和match()的区别是什么？ 我已经阅读了现有的相关文档，但是我总是记不住，碰到类似的问题，我还要不断地查找再学习，我希望某个大神能够给个清晰的案例，让我能够很好的记住，或者至少能够在Stackoverflow上有个地方能够让我再学习的时候方便地找到。</value></post_desc></item>
<item><title><value>当 Python 和 R 遇上北京二手房</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86190/</value></title_url><post_desc><value>最近忙活了一阵子，终于把房子的事情落实了，俗话说饱暖思淫欲，某天突发奇想能不能利用手头上的一些工具对北京的二手房数据捣鼓一下，看看能不能有一些有意思的发现？想到以前有点python经验，正巧最近也在看R，正好借此机会巩固一下！</value></post_desc></item>
<item><title><value>Python工具分析风险数据</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86162/</value></title_url><post_desc><value>随着网络安全信息数据大规模的增长,应用数据分析技术进行网络安全分析成为业界研究热点，本文带大家用Python工具对风险数据作简单分析，主要是分析蜜罐日志数据，来看看一般大家都使用代理ip干了一些啥事。</value></post_desc></item>
<item><title><value>python中的Queue与多进程（multiprocessing）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86181/</value></title_url><post_desc><value>最近接触一个项目，要在多个虚拟机中运行任务，参考别人之前项目的代码，采用了多进程来处理，于是上网查了查python中的多进程</value></post_desc></item>
<item><title><value>从数据角度解析福州美食</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86176/</value></title_url><post_desc><value>作为一个伪吃货（很想吃但有很多忌口，同时又吃不胖），怀着为福州吃货服务的理想，我决定：这次我来爬爬餐厅。 </value></post_desc></item>
<item><title><value>自动化运维之ansible</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86289/</value></title_url><post_desc><value>ansible是最近两年比较热门的一款服务器自动化运维工具，基于python语言来研发的，目前来说还是有很多类似的工具，比如ansible、puppet、cfengine、chef、func、fabric，ansible集合了许多其它运维工具的优点。它有许多模块组成，简单来说呢，ansib是依赖程序模块并驱动模块工作的一个运维框架！</value></post_desc></item>
<item><title><value>用pyenv和virtualenv搭建单机多版本python虚拟开发环境</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/86285/</value></title_url><post_desc><value>作为主流开发语言，用python开发的程序越来越多。方便的是大多linux系统里面都默认集成了python,开发可以随时随地开始。但有时候这也成为了一个短板，比如说有时候我们需要开发和调试一些需要安装在默认python路</value></post_desc></item>
<item><title><value>pyspider 爬虫教程（3）：使用 PhantomJS 渲染带 JS 的页面</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/86270/</value></title_url><post_desc><value>在上两篇教程中，我们学习了怎么从 HTML 中提取信息，怎么处理一些请求复杂的页面。但是有一些页面，无论是分析 API 请求的地址，还是渲染时进行了加密，让直接抓取请求非常麻烦。这时候就是 PhantomJS 大显身手的时候了。</value></post_desc></item>
<item><title><value>pyspider 爬虫教程（2）：AJAX 和 HTTP</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/86269/</value></title_url><post_desc><value>在上一篇教程中，我们使用 self.crawl API 抓取豆瓣电影的 HTML 内容，并使用 CSS 选择器解析了一些内容。不过，现在的网站通过使用 AJAX 等技术，在你与服务器交互的同时，不用重新加载整个页面。但是，这些交互手段，让抓取变得稍微难了一些：你会发现，这些网页在抓回来后，和浏览器中的并不相同。你需要的信息并不在返回 HTML 代码中。</value></post_desc></item>
<item><title><value>scrapy_redis 和 docker 实现简单分布式爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86093/</value></title_url><post_desc><value>在使用 scrapy 爬取 IT桔子公司信息，用来进行分析，了解 IT 创业公司的一切情况，之前使用 scrapy 写了一个默认线程是10的单个实例，为了防止被 ban IP 设置了下载的速度，3万多个公司信息爬了1天多才完成，现在想到使用分布式爬虫来提高效率。</value></post_desc></item>
<item><title><value>Python 函数 类 语法糖</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86090/</value></title_url><post_desc><value>生成器是用来创建Python序列的一个对象。可以用它迭代序列而不需要在内存中创建和存储整个序列。通常，生成器是为迭代器产生数据的。生成器函数函数和普通函数类似，返回值使用 yield 而不是 return 。</value></post_desc></item>
<item><title><value>谈谈 Python 程序的运行原理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86086/</value></title_url><post_desc><value>在 Python 的世界中，一切都是对象，函数也是对象，类型也是对象，类也是对象，甚至连编译出来的字节码也是对象，.pyc 文件是字节码对象（PyCodeObject）在硬盘上的表现形式。</value></post_desc></item>
<item><title><value>Python Enclosing作用域、装饰器话聊上篇</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86081/</value></title_url><post_desc><value>Jaglo: 听讲Python一切都是对象，是吗？ Pylego: 是的，像函数也是对象。 Jaglo: 那么函数也可以有自己的属性了？ Pylego： 当然，像下面这样写是可以的。</value></post_desc></item>
<item><title><value>Python协程：从yield/send到async/await</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86069/</value></title_url><post_desc><value>Python由于众所周知的GIL的原因，导致其线程无法发挥多核的并行计算能力，显得比较鸡肋。既然在GIL之下，同一时刻只能有一个线程在运行，那么对于CPU密集的程序来说，线程之间的切换开销就成了拖累，而以I/O为瓶颈的程序正是协程所擅长的。</value></post_desc></item>
<item><title><value>Python模块的打包与发布</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86443/</value></title_url><post_desc><value>本文以自己的一个python包为例对打包自己的python项目和上传至PyPi的方法进行了总结。</value></post_desc></item>
<item><title><value>python实现在类中动态添加属性和生成对象</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86419/</value></title_url><post_desc><value>现在有个存储用户信息的像表格一样的文档：第一行是属性，各个属性用逗号(，)分隔，从第二行开始每行是各个属性对应的值，每行代表一个用户。如何实现读入这个文档，每行输出一个用户对象呢？</value></post_desc></item>
<item><title><value>支付宝即时到帐接口的python实现，示例采用django框架</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86420/</value></title_url><post_desc><value>因工作需要研究了支付宝即时到帐接口，并成功应用到网站上，把过程拿出来分享。</value></post_desc></item>
<item><title><value>python中list列表的高级应用 高级函数</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86421/</value></title_url><post_desc><value>在python所有的数据结构中，list具有重要地位，并且非常的方便，这篇文章主要是讲解list列表的高级应用</value></post_desc></item>
<item><title><value>爬虫学习之基于 Scrapy 的爬虫自动登录</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85877/</value></title_url><post_desc><value>在前面文章中我们采用不同的方式进行内容提取。只要发起请求获取响应的网页内容，然后对内容进行格式化存储。我们抓取到的内容可能会重复，也可能需要计算或者组织新的内容甚至是需要登录后才能访问的内容， 那么我们来学习用Scrapy进行自动登录。</value></post_desc></item>
<item><title><value>Python正则表达式学习摘要及资料</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85878/</value></title_url><post_desc><value>在正则表达式中，如果直接给出字符，就是精确匹配。 {m,n}? 对于前一个字符重复 m 到 n 次，并且取尽可能少的情况 在字符串’aaaaaa’中，a{2,4} 会匹配 4 个 a，但 a{2,4}? 只匹配 2 个 a。 ^表示行的开头，^d表示必须以数字开头。$表示行的结束，d$表示必须以数字结束。</value></post_desc></item>
<item><title><value>用KNN来进行验证码识别</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85879/</value></title_url><post_desc><value>验证码让我们想使得用户快速认证的想法破灭了，最近看了一些机器学习的内容，觉得对于大多数极简单的验证码应该是可以用KNN这种方法来破解的，于是整理了一下思绪，撸起袖子做起来！</value></post_desc></item>
<item><title><value>用 Python 实现 Python 解释器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86380/</value></title_url><post_desc><value>Byterun 是一个用 Python 实现的 Python 解释器。随着我对 Byterun 的开发，我惊喜地的发现，这个 Python 解释器的基础结构用 500 行代码就能实现。 </value></post_desc></item>
<item><title><value>Python 包、模块、类以及代码文件和目录的一种管理方案</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86376/</value></title_url><post_desc><value>Python在语义中存在着包、模块、类（当然还有函数）这几个概念。 在编写Python代码时，我们需要管理代码的文件目录结构。</value></post_desc></item>
<item><title><value>Python 多线程和锁</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86372/</value></title_url><post_desc><value>进程是执行中的计算机程序。每个进程都拥有自己的地址空间、内存、数据栈及其它的辅助数据。操作系统管理着所有的进程，并为这些进程合理分配时间。进程可以通过派生新的进程来执行其它任务，不过每个进程都拥有自己的内存和数据栈等，进程之间的数据交换采用 进程间通信(IPC) 方式。</value></post_desc></item>
<item><title><value>python 类和元类(metaclass)的理解和简单运用</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86367/</value></title_url><post_desc><value>今天看到一篇好文，然后结合自己的情况总结一波。这里讨论的python类，都基于python2.7x以及继承于object的新式类进行讨论。</value></post_desc></item>
<item><title><value>Flask web开发(3):模板</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85970/</value></title_url><post_desc><value>本系列笔记是我阅读Miguel Grinberg的《Flask Web Development》的笔记，标题与书本同步。希望通过记录技术笔记的方式促进自己对知识的理解。 本篇对应书本第三章：模板。</value></post_desc></item>
<item><title><value>Matplotlib绘图双纵坐标轴设置及控制设置时间格式</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85967/</value></title_url><post_desc><value>双y轴坐标轴图 今天利用matplotlib绘图，想要完成一个双坐标格式的图。 {代码…} 横坐标设置时间间隔 {代码…} 纵坐标设置显示百分比 {代码…} 知识点 在matplotlib中，整个图像为一个Figure对象。</value></post_desc></item>
<item><title><value>Python 面试问答 Top 25</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/85873/</value></title_url><post_desc><value>Python 是一门解释型、交互式以及面向对象的高级程序设计语言。本文从代码规范、语言细节等方面列出了25个面试中可能被问到的问题，相信对面试者及初学者都有一定帮助。</value></post_desc></item>
<item><title><value>python使用mysql数据库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86158/</value></title_url><post_desc><value>python使用mysql数据库</value></post_desc></item>
<item><title><value>深入理解Python中的ThreadLocal变量（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86150/</value></title_url><post_desc><value>我们知道多线程环境下，每一个线程均可以使用所属进程的全局变量。如果一个线程对全局变量进行了修改，将会影响到其他所有的线程。为了避免多个线程同时对变量进行修改，引入了线程同步机制，通过互斥锁，条件变量或者读写锁来控制对全局变量的访问。</value></post_desc></item>
<item><title><value>pyspider 爬虫教程（1）：HTML 和 CSS 选择器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/86268/</value></title_url><post_desc><value>虽然以前写过 如何抓取WEB页面 和 如何从 WEB 页面中提取信息。但是感觉还是需要一篇 step by step 的教程，不然没有一个总体的认识。不过，没想到这个教程居然会变成一篇译文，在这个爬虫教程系列文章中，会以实际的例子，由浅入深讨论爬取（抓取和解析）的一些关键问题。</value></post_desc></item>
<item><title><value>你们以为我在学C++？其实我在学 Python</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86267/</value></title_url><post_desc><value>我会随便说，C++ 近年来开始”抄袭” Python 么？我只会说，我在用 C++ 来学习 Python。</value></post_desc></item>
<item><title><value>爬虫性能：NodeJs  VS  Python</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86257/</value></title_url><post_desc><value>早就听说Nodejs的异步策略是多么的好，I/O是多么的牛逼……反正就是各种好。今天我就准备给nodejs和python来做个比较。能体现异步策略和I/O优势的项目，我觉得莫过于爬虫了。</value></post_desc></item>
<item><title><value>pickle和cPickle：Python对象的序列化（下）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85772/</value></title_url><post_desc><value>当与你自己的类一起工作时，你必须保证类被腌渍出现在读取pickle的进程的命名空间中。只有该实例的数据而不是类定义被腌渍。类名被用于在反腌渍时，找到构造器（constructor）以创建新对象。</value></post_desc></item>
<item><title><value>pickle和cPickle：Python对象的序列化（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85771/</value></title_url><post_desc><value>目的：Python对象序列化 可用性：pickle至少1.4版本，cPickle 1.5版本以上。pickle模块实现了一种算法，将任意一个Python对象转化成一系列字节（byets）。此过程也调用了serializing对象。代表对象的字节流之后可以被传输或存储，再重构后创建一个拥有相同特征（the same characteristics）的新的对象。</value></post_desc></item>
<item><title><value>浅析Python装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86068/</value></title_url><post_desc><value>Decorator(装饰器）是在写Python代码的过程中，经常会被用到的一个语言特性，它可以大幅度减少重复的模板代码，并且，对于已有代码的重构往往也有奇效。但是，实现一个Decorator时的重重嵌套函数定义，经常让人头晕。</value></post_desc></item>
<item><title><value>用Python实现一个简单的基于内容的推荐引擎</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85927/</value></title_url><post_desc><value>让我们假设你想为一个电子商务网站搭建一个推荐系统。基本上你可以采用两种方法：基于内容的算法和协同过滤算法。我们将分别描述两种算法的优点和缺点，然后进一步深入，讲解一个基于内容的推荐引擎的一个简单的实现</value></post_desc></item>
<item><title><value>不要再写出不能在 Python 4 中运行的程序了</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86040/</value></title_url><post_desc><value>Python 4 有听过吗？ 有想过吗？ 文章在展望Python 的发展方向的基础上，分析了现有的Python代码编写。为了满足 Python2 和Python3 的不同版本需要，现有的程序一般都会写出符合两个版本的代码，但是有想过未来 Python 的发展方向吗？</value></post_desc></item>
<item><title><value>用 Python 进行贝叶斯模型建模（4）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85796/</value></title_url><post_desc><value>之前，我们留了个问题：“我的回复时间受聊天的对象的影响吗？”我们针对每个对话的人都进行了模型参数估计。但是有时候我们想了解更多的影响因素，比如：星期几，时刻等。可以运用 GLM（通用线性模型）更好地了解这些因素的影响。</value></post_desc></item>
<item><title><value>Python数据处理：Pandas模块的 12 种实用技巧</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85742/</value></title_url><post_desc><value>Python 正迅速成为数据科学家们更为钟爱的编程语言。形成该现状的理由非常充分：Python 提供了一种覆盖范围更为广阔的编程语言生态系统，以及具有一定计算深度且性能良好的科学计算库。如果您是 Python 初学者，建议首先看下Python 学习路线。</value></post_desc></item>
<item><title><value>Python 黑魔法之 Encoding &amp; Decoding</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85852/</value></title_url><post_desc><value>本文为科普文：Python 黑魔法之 Encoding &amp; Decoding。本文中的例子在 Ubuntu 14.04 / Python 2.7.11 下运行成功，Python 3+ 的接口有些许不同，需要读者自行转换</value></post_desc></item>
<item><title><value>机器学习从入门到放弃之逻辑回归</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85853/</value></title_url><post_desc><value>之前给出的是KNN算法，通过计算紫色点都周边的剧场的长短，来判断紫色点属于哪个类别。现在有这样一种极端情况，黄点和绿点在紫点周围呈圆周分布，距离一样，咋办？这种情况我们称之为线性分类，关于如何拟合出这条线程函数下面会讲述。</value></post_desc></item>
<item><title><value>隐马尔科夫模型python实现简单拼音输入法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85854/</value></title_url><post_desc><value>在网上看到一篇关于隐马尔科夫模型的介绍，觉得简直不能再神奇，又在网上找到大神的一篇关于如何用隐马尔可夫模型实现中文拼音输入的博客，无奈大神没给可以运行的代码，只能纯手动网上找到了结巴分词的词库，根据此训练得出隐马尔科夫模型，用维特比算法实现了一个简单的拼音输入法。</value></post_desc></item>
<item><title><value>使用Python玩转WMI</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86349/</value></title_url><post_desc><value>最近在网上搜索Python和WMI相关资料时，发现大部分文章都千篇一律，并且基本上只说了很基础的使用，并未深入说明如何使用WMI。本文打算更进一步，让我们使用Python玩转WMI。</value></post_desc></item>
<item><title><value>Python内存数据库/引擎</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86350/</value></title_url><post_desc><value>在平时的开发工作中，我们可能会有这样的需求：我们希望有一个内存数据库或者数据引擎，用比较Pythonic的方式进行数据库的操作（比如说插入和查询）。</value></post_desc></item>
<item><title><value>玩转 Python 3.5 的 await/async</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86331/</value></title_url><post_desc><value>通过新的 async 关键字的魔法，这些函数不再是函数了，现在它们变成了协程（更准确的说是本地协程函数）。</value></post_desc></item>
<item><title><value>Flask web开发(2):程序的基本结构</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85944/</value></title_url><post_desc><value>本系列笔记是我阅读Miguel Grinberg的《Flask Web Development》的笔记，标题与书本同步。希望通过记录技术笔记的方式促进自己对知识的理解。 本篇对应书本第二章：程序的基本结构。</value></post_desc></item>
<item><title><value>Flask web 开发(1)：安装</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85943/</value></title_url><post_desc><value>本系列笔记是我阅读Miguel Grinberg的《Flask Web Development》的笔记，标题与书本同步。希望通过记录技术笔记的方式促进自己对知识的理解。 本篇对应书本第一章：安装。</value></post_desc></item>
<item><title><value>Python异常编程技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85942/</value></title_url><post_desc><value>编程中经常会需要使用到异常处理的情况，在阅读了一些资料后，整理了关于异常处理的一些小技巧记录如下。 </value></post_desc></item>
<item><title><value>神坑·Python 装饰类无限递归</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85939/</value></title_url><post_desc><value>·Python 装饰类无限递归</value></post_desc></item>
<item><title><value>如何正确地使用Python的属性和描述符</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86143/</value></title_url><post_desc><value>关于@property装饰器 在Python中我们使用@property装饰器来把对函数的调用伪装成对属性的访问。 那么为什么要这样做呢？因为@property让我们将自定义的代码同变量的访问/设定联系在了一起，同时为你的类保持一个…</value></post_desc></item>
<item><title><value>基本线性数据结构的Python实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86144/</value></title_url><post_desc><value>本篇主要实现四种数据结构，分别是数组、堆栈、队列、链表。我不知道我为什么要用Python来干C干的事情，总之Python就是可以干。</value></post_desc></item>
<item><title><value>Python Enclosing作用域、闭包、装饰器话聊下篇</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86139/</value></title_url><post_desc><value>Python Enclosing作用域、闭包、装饰器话聊下篇 Python Enclosing作用域、闭包、装饰器的基础篇，请看Python Enclosing作用域、闭包、装饰器话聊上篇 Jaglawz: 我经常看到有人的装饰器是带参数的，这又是咋回事呢…</value></post_desc></item>
<item><title><value>Python标准类型的比较原则：字典VS列表(元组)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86137/</value></title_url><post_desc><value>昨天看《核心编程》发现了一个鲜为人知的知识点，在Python中的字典比较和列表比较的策略竟然不相同，下面做具体分析。 </value></post_desc></item>
<item><title><value>可迭代对象 vs 迭代器 vs 生成器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86258/</value></title_url><post_desc><value>在使用Python的过程中，很容易混淆如下几个关联的概念：容器(container)可迭代对象(Iterable)迭代器(Iterator)生成器(generator)生成器表达式{list,set,dict}解析式</value></post_desc></item>
<item><title><value>python urllib2详解及实例</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86247/</value></title_url><post_desc><value>urllib2是Python的一个获取URLs(Uniform Resource Locators)的组件。他以urlopen函数的形式提供了一个非常简单的接口，这是具有利用不同协议获取URLs的能力，他同样提供了一个比较复杂的接口来处理一般情况，例如：基础验证，cookies,代理和其他。</value></post_desc></item>
<item><title><value>Python元类再谈</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86248/</value></title_url><post_desc><value>在Python中一切都是对象，类型也是对象；类比类型和实例的概念，类型也必然有自己的类型，十分合理。事实上，类型的类型其实就是术语元类型的意思，python里面所有类型的元类型都是type。</value></post_desc></item>
<item><title><value>python与编码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86249/</value></title_url><post_desc><value>在Python接受我们的输入时，总是会先转为Unicode。而且这个过程越早越好。然后Python的处理总是对Unicode进行的，在这个过程中，一定不要进行编码转换的工作。在Python向我们返回结果时，总是会从Unicode转为我们需要的编码。而且这个过程越晚越好。</value></post_desc></item>
<item><title><value>Python初学者的17个技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85770/</value></title_url><post_desc><value>Python初学者的17个技巧 </value></post_desc></item>
<item><title><value>web.py源码分析: 模板(3)</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85760/</value></title_url><post_desc><value>前两篇文章主要说明了web.py的模板系统将模板文件处理后得到的结果：__template__()函数。本文主要讲述模板文件是如何变成__template__()函数的。 </value></post_desc></item>
<item><title><value>web.py源码分析: 模板(2)</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85759/</value></title_url><post_desc><value>上一篇文章web.py源码分析: 模板(1)说明了web.py的模板的大致工作原理。本文重点讲述web.py模板支持的语法是如何转换生成__template__函数的。 本章会列出模板内容以及转换之后的__template__()函数的内容，以及必要的文字说明。模板的名称统一是hello.html。</value></post_desc></item>
<item><title><value>web.py源码分析: 模板(1)</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85756/</value></title_url><post_desc><value>web.py的模板实现利用了Python的可执行对象的动态特性：根据模板内容和渲染函数的参数创建一个函数，该函数执行的时候会返回一个TemplateResult类实例，该实例的字符串化就是模板对应的HTML内容。</value></post_desc></item>
<item><title><value>Python Socket Programming</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85753/</value></title_url><post_desc><value>本文介绍使用Python进行Socket网络编程，假设读者已经具备了基本的网络编程知识和Python的基本语法知识，本文中的代码如果没有说明则都是运行在Python 3.4下。</value></post_desc></item>
<item><title><value>用 Python 进行贝叶斯模型建模（3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85991/</value></title_url><post_desc><value>贝叶斯模型的一个核心优势就是简单灵活，可以实现一个分层模型。这一节将实现和比较整体合并模型和局部融合模型。</value></post_desc></item>
<item><title><value>用 Python 进行贝叶斯模型建模（2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85987/</value></title_url><post_desc><value>在这一节中，我们将用到两种技术，旨在回答：</value><value>①模型和估计的参数是否对潜在数据有很好的模拟？</value><value>
②给定两个独立的模型，哪个对潜在数据模拟的更好？</value></post_desc></item>
<item><title><value>用 Python 进行贝叶斯模型建模（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85996/</value></title_url><post_desc><value>在这一节，我们将讨论贝叶斯方法是如何思考数据的，我们怎样通过 MCMC 技术估计模型参数。</value></post_desc></item>
<item><title><value>用 Python 进行贝叶斯模型建模（0）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85954/</value></title_url><post_desc><value>本教程目前已完成 5 个部分（导论、参数估计、模型检验、分层模型、贝叶斯回归），详细解释了算法和具体的代码实现。无论是对算法理解还是Python编程，都具有非常好的参考价值。</value></post_desc></item>
<item><title><value>你用 Python 写过哪些牛逼的程序/脚本？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85986/</value></title_url><post_desc><value>这个问题来自 Quora 上提问，伯乐在线摘编了 3 个国外程序员的多个小项目，含代码。</value></post_desc></item>
<item><title><value>玩转APP支付</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85855/</value></title_url><post_desc><value>首先为了避免耽误大家的时间,这里我们只实现了微信支付及支付宝的移动支付。对于微信公众支付及支付宝的其他支付场景是不适用的。这里,限于篇幅,只对订单支付及异步回调的部分进行说明,因为如果把所有的接口都过一遍,太耗费时间,还不如直接在pypi上上传1个包,直接使用pip安装。 </value></post_desc></item>
<item><title><value>Python游戏编程之旅（9）：嗷大喵快跑小游戏开发实例</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85807/</value></title_url><post_desc><value>前几期博客我们一起学习了，pygame中的冲突检测技术以及一些常用的数据结构。这次我们来一起做一个简单的酷跑类游戏综合运用以前学到的知识。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（8）：pygame游戏开发常用数据结构</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85806/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。上一个博客我们一起学习了pygame中冲突检测技术。这次我们来一起学习在pygame游戏里面常用的一些数据结构： 数据，列表，元组，队列，栈。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（7）：pygame中的冲突检测技术</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85805/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。上一个博客我们一起学习了pygame中的Sprite模块和如何加载动画。这次我们来一起学习pygame中的冲突检测技术。</value></post_desc></item>
<item><title><value>运用Redis构建分布式爬虫，抓妹子图</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86328/</value></title_url><post_desc><value>当你能够针对一个url进行请求，获取数据，继续请求的时候，说明你的爬虫已经可以自给自足的爬起来。但是这样的爬虫其效率将会严重限制在单进程效率极限之下，时间的主要消耗还是在请求返回的等待时间，如果想进一步提高效率那么多进程以及分布式就会你提高效率的最好手段。</value></post_desc></item>
<item><title><value>Python不能不知的模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86332/</value></title_url><post_desc><value>之前我面试的时候，一般都会问一个问题：「能讲讲你日常开发中都用到了那些Python内置的模块吗」？我为啥爱问这么个问题呢：1. 了解面试者日常的工作。2. 了解面试者对技术的热情和主动性。3. 侧面验证面试者技术水平。</value></post_desc></item>
<item><title><value>MkDocs 文档生成逻辑浅析</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86320/</value></title_url><post_desc><value>MkDocs是一个用于创建项目文档的快速，简单的静态站点生成器。文档源码使用Markdown来撰写，用一个YAML文件作为配置文档。MkDocs处理的是一系列的Markdown文档，然后将Markdown文档的内容解析出来，保存在Python字典中。</value></post_desc></item>
<item><title><value>Python yield与实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85935/</value></title_url><post_desc><value>yield的功能类似于return，但是不同之处在于它返回的是生成器。</value></post_desc></item>
<item><title><value>Google Python Class --- Sorting</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86133/</value></title_url><post_desc><value>继续前面两篇，我个人觉得这篇是干货最多的，至少我从中学到了不少东西。废话少说，开始吧！</value></post_desc></item>
<item><title><value>python语音智能对话聊天机器人，linux&amp;&amp;树莓派双平台兼容</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86130/</value></title_url><post_desc><value>项目简介：运用百度语音进行声音转中文的识别与合成，智能对话使用图灵机器人，录音则，ｌｉｎｕｘ端用pythonaudio 模块。树莓派端因为pythonaudio不兼容问题，因此用arecord进行录音．最终代码约１５０行 。</value></post_desc></item>
<item><title><value>爬虫破解IP限制：ADSL动态IP服务器部署</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86127/</value></title_url><post_desc><value>目前遇到的比较难搞的反爬虫技术有两个：特别难识别的人机识别验证码–如极验的手势验证，另外就是ip大量的限制，如R网站两次访问就被强制跳转到验证码页面。针对这个问题，采用爬虫届大招一样的ADSL动态部署起来，要是，要明白用ADSL就意味着是开始拼成本了。不再像是过去随意一台电脑就爱怎么爬怎么爬。</value></post_desc></item>
<item><title><value>Python环境Memo</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86235/</value></title_url><post_desc><value>最近同时看两本书，都是关于如何利用python做数据分析的。两本书对应两种业务场景，因此分别对应着两个不同的开发环境（其实是对应不同的发行版本）。这就很麻烦了：不同环境下冲突起来没完没了，一个不小心，就要重装系统了。</value></post_desc></item>
<item><title><value>Anaconda使用总结</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/86236/</value></title_url><post_desc><value>Python易用，但用好却不易，其中比较头疼的就是包管理和Python不同版本的问题，特别是当你使用Windows的时候。为了解决这些问题，有不少发行版的Python，比如WinPython、Anaconda等，此外，还有virtualenv、pyenv等工具管理虚拟环境。 </value></post_desc></item>
<item><title><value>Nginx 中 map 模块的使用及性能测试</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85748/</value></title_url><post_desc><value>最近我操刀了leetcode的论坛迁移，整个过程持续了几周的时间，总算暂时告了一个段落。常使用leetcode论坛的用户应该已经发现论坛已经大变样了吧~期间遇到了不少坑坑洼洼，将来也还会有好多问题等待去一一解决。关于这个迁移过程中的收货，这篇文章中就不细说了，有时间再另开一篇博文。这篇文章主要关注在url-mapping以及它的性能问题。</value></post_desc></item>
<item><title><value>python数据统计，分组的一些小技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85746/</value></title_url><post_desc><value>最近在用python做数据统计，这里总结了一些最近使用时查找和总结的一些小技巧，希望能帮助在做这方面时的一些童鞋。有些技巧是很平常的用法，平时我们没有注意，但是在特定场景，这些小方法还是能带来很大的帮助。</value></post_desc></item>
<item><title><value>浅析tornado协程运行原理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85744/</value></title_url><post_desc><value>去年有一段时间一直在研究各种python协程框架，包括gevent, asyncio, tornado。阅读tornado的源码还是两个多月前的事了，一直想写一篇文章出来整理整理，但不知道从何处开始下笔。在试图画图的过程中，发现其实有好多细节自己也没有琢磨透，导致在如何组织这幅流程图的问题上斟酌了好久，不过好在最后终于捯饬出了一张自己觉得还算及格的流程图，作完图的时候我感觉比起之前刚阅读完代码时候的理解又上了一个层次。</value></post_desc></item>
<item><title><value>实现简单的垃圾邮件过滤器，来讲解机器学习的概念</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85683/</value></title_url><post_desc><value>这个教程简单地介绍了如何使用 Python 2.x 和 Weka 进行机器学习。Weka 是一个数据处理和机器学习工具。这篇文章通过实现一个简单的垃圾邮件过滤器来讲解机器学习的概念。</value></post_desc></item>
<item><title><value>Python 中的 MySQL 数据库连接池</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85997/</value></title_url><post_desc><value>Python 中的 MySQL 数据库连接池。本文的问题怎么来的呢？正是我给公司的代码加上连接池后产生的。一加连接池，就会有一定几率出现；一去掉连接池，就不会有。</value></post_desc></item>
<item><title><value>深入对比数据科学工具箱：Python 和 R 的异常处理机制</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85992/</value></title_url><post_desc><value>异常处理，是编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）。Python和R作为一门编程语言自然也是有各自的异常处理机制的，异常处理机制在代码编写中扮演着非常关键的角色，却又是许多人容易混淆</value></post_desc></item>
<item><title><value>深入对比数据科学工具箱：Python和R 的 Web 编辑器</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85988/</value></title_url><post_desc><value>工欲善其事必先利其器，如果现在要评选数据科学中最好用的Web 编辑器（注意一定是可以通过Web访问的），RStudio和Jupyter一定是角逐的最大热门，正确使用编辑器可以很大地提升我们的工作效率。本文将讲解一些RStudio和Jupyter的使用技巧。</value></post_desc></item>
<item><title><value>使用Python和Perl绘制北京跑步地图</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85808/</value></title_url><post_desc><value>当你在一个城市，穿越大街小巷，跑步跑了几千公里之后，一个显而易见的想法是，如果能把在这个城市的所有路线全部画出来，会是怎样的景象呢？</value></post_desc></item>
<item><title><value>Python游戏编程之旅（5）：嗷大喵爱吃鱼小游戏开发实例</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85802/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。我们一同在前几期的博客中已经学到了很多pygame的基本知识了，现在该做个小游戏实战一下了。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（6）：pygame中的Sprite（精灵）模块和加载动画</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85795/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。直到现在我们已经学了很多pygame基础知识了，从这篇博客开始我们将会学习pygame中高级部分，更多和精灵模块，冲突检测相关的知识。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（4）：pygame中加载位图与常用的数学函数</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85794/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。在上一篇博客中，我们学习了pygame事件与设备轮询。这次我们来一起了解一下如何在pygame中加载位图，以及pygame中一些常用的数学函数。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（2）：pygame中的IO、数据</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85786/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。这次我们将一起学习pygame中的IO、数据和更多关于字体打印的知识。</value></post_desc></item>
<item><title><value>python 装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85932/</value></title_url><post_desc><value>python 装饰器</value></post_desc></item>
<item><title><value>Python 实现图书超期提醒小帮手</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85928/</value></title_url><post_desc><value>本来就很喜欢逛图书馆，时不时去借本书（注：借的都没看过），但我这个学期突然发现了问题，每本书都可以借两个月，但不幸的是我最近一学期借的书全部超期，一天一毛钱，我心疼这钱啊！！！灵机一动，为什么不写个脚本来通知自己图书超期呢？说了这么多废话，我们就进入主题吧</value></post_desc></item>
<item><title><value>Python爬虫(2):Coursera抓站小结</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85896/</value></title_url><post_desc><value>某些网站需要进行账户和密码登陆, 需要使用POST方法向服务器发送账户和密码表单数据, 这里就需要模拟登陆.</value></post_desc></item>
<item><title><value>Django添加全文搜索功能入门篇</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86123/</value></title_url><post_desc><value>haystack是django的开源搜索框架，该框架支持Solr, Elasticsearch, Whoosh, *Xapian*搜索引擎，不用更改代码，直接切换引擎，减少代码量。</value></post_desc></item>
<item><title><value>基本排序算法的Python实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/86119/</value></title_url><post_desc><value>本篇主要实现九(八）大排序算法，分别是冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序,计数排序。希望大家回顾知识的时候也能从我的这篇文章得到帮助。</value></post_desc></item>
<item><title><value>Python Socket 编程：聊天室示例程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/86112/</value></title_url><post_desc><value>上一篇我们学习了简单的PythonTCPSocket编程，通过分别写服务端和客户端的代码了解基本的PythonSocket编程模型。本文再通过一个例子来加强一下对Socket编程的理解。</value></post_desc></item>
<item><title><value>10个对所有学科都有用的Python数据可视化库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85647/</value></title_url><post_desc><value>浏览一下Python程序库目录你会发现无论要画什么图，都能找到相对的库——从适用于眼球移动研究的GazeParser，到用于可视化实时神经网络训练过程的pastalog。有许多库只完成非常特定的任务，也有许多可以用于更广泛的领域。</value></post_desc></item>
<item><title><value>python元编程详解（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85718/</value></title_url><post_desc><value>件开发中很重要的一条原则就是“不要重复自己的工作（Don’t repeat youself）”，也就是说当我们需要复制粘贴代码时候，通常都需要寻找一个更加优雅的解决方案，在python中，这类问题常常会归类为“元编程”。主要目的：是创建函数和类，并用他们操作代码（例如修改，生成，或者包装自己已有的代码）。python中基于这个目的的主要特性包括：装饰器，类装饰器，元类。这篇文章带大家一起讨论各种元编程技术。</value></post_desc></item>
<item><title><value>python元编程详解（2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85719/</value></title_url><post_desc><value>上一章，我们对函数进行装饰，但是有时候我们又想撤销这个函数的修饰，直接访问那个没有被修饰的函数，这时候我们就可以用到wrapped函数进行函数装饰器的解包。</value></post_desc></item>
<item><title><value>python元编程详解（3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85720/</value></title_url><post_desc><value>在理解元类之前，你需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（3）：pygame事件与设备轮询</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85787/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。在上一篇博客中，我们学习了pygame中的IO、数据。这次我们来一起了解一下pygame事件与设备轮询。</value></post_desc></item>
<item><title><value>Python游戏编程之旅（1）：初识pygame</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85785/</value></title_url><post_desc><value>本系列博客介绍以python+pygame库进行小游戏的开发。有写的不对之处还望各位海涵。</value></post_desc></item>
<item><title><value>学习Python的三种境界</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/85780/</value></title_url><post_desc><value>我从入门Python到现在也没有多少时间，所以写如此大的一个题目必定会引发各种批判，当然我没有想造一个大新闻，只是想根据自己的学习历程做一个简单的总结，同时将这三个阶段对应的一些好的书籍简单介绍介绍。</value></post_desc></item>
<item><title><value>手把手教你写电商爬虫(3):实战尚妆网AJAX请求处理和内容提取</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85914/</value></title_url><post_desc><value>看完两篇，相信大家已经从开始的小菜鸟晋升为中级菜鸟了，好了，那我们就继续我们的爬虫课程。上一课呢一定是因为对手太强，导致我们并没有完整的完成尚妆网的爬虫。..</value></post_desc></item>
<item><title><value>手把手教你写电商爬虫(2):实战尚妆网分页商品采集爬虫</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85905/</value></title_url><post_desc><value>第一课讲了一些基础性的东西，通过软柿子”切糕王子”这个电商网站好好的练了一次手，相信大家都应该对写爬虫的流程有了一个大概的了解，那么这课咱们就话不多说，正式上战场，对垒尚妆网。</value></post_desc></item>
<item><title><value>手把手教你写电商爬虫(1):找个软柿子捏捏</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85904/</value></title_url><post_desc><value>话说现在基本上大家都在网上买东西，国家经济数据已经可以在网络购物的数据中略微窥见一二，再加上目前B2B行业的持续火爆，大有把所有交易搬到网上来的趋势，这个系列教程就来讲讲如果爬取这些大量的电商交易的数据。</value></post_desc></item>
<item><title><value>Python爬虫(2)--Coursera抓站小结</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85897/</value></title_url><post_desc><value>某些网站需要进行账户和密码登陆, 需要使用POST方法向服务器发送账户和密码表单数据, 这里就需要模拟登陆.</value></post_desc></item>
<item><title><value>Python爬虫(3):Socket网络编程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85898/</value></title_url><post_desc><value>python的网络变成比c语言简单许多, 封装许多底层的实现细节, 方便程序员使用的同时, 也使程序员比较难了解一些底层的东西, 我觉得学网络编程还是用c语言更好一点.</value></post_desc></item>
<item><title><value>python元编程详解（4）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85721/</value></title_url><post_desc><value>上一篇文章我们详细解释了如何利用元类来控制类的创建，下面我们利用元类来控制实例的创建</value></post_desc></item>
<item><title><value>Python 中的对象概述</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85711/</value></title_url><post_desc><value>在 Python 的世界中，一切皆对象。 int / list / dict / … 都是对象，除此之外，函数、类本身也是对象，那么，这些对象究竟是什么呢？从结果看，Python 中的对象是 C 语言中结构体在堆上申请的一片内存区域。</value></post_desc></item>
<item><title><value>10天100小时学数据科学，我推荐你这样学！</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85704/</value></title_url><post_desc><value>有位网友在 Quora 提问，并补充说「我有10天空闲时间，每天想花十个小时学习数据科学入门知识，应该学点什么呢？谢谢」伯乐在线摘编了 Roman Trusov 的回复，非常值得新手参考。</value></post_desc></item>
<item><title><value>Python 工匠：善用变量来改善代码质量</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85702/</value></title_url><post_desc><value>作为『Python 工匠』系列文章的第一篇，我想先谈谈 『变量（Variables）』。因为如何定义和使用变量，一直都是学习任何一门编程语言最先要掌握的技能之一。</value></post_desc></item>
<item><title><value>python进程、线程、协程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85781/</value></title_url><post_desc><value>线程是属于进程的，线程运行在进程空间内，同一进程所产生的线程共享同一内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。线程可与属于同一进程的其它线程共享进程所拥有的全部资源，但是其本身基本上不拥有系统资源，只拥有一点在运行中必不可少的信息(如程序计数器、一组寄存器和栈)。</value></post_desc></item>
<item><title><value>从零开始搭建论坛（1）：Web服务器与Web框架</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85874/</value></title_url><post_desc><value>之前用 Django 做过一个小的站点，感觉Django太过笨重，于是就准备换一个比较轻量级的 Web 框架来玩玩。Web.py 作者已经挂掉，项目好久没有更新，所以不准备用它。而 Flask 也是一个成熟的轻量级 Web 框架，在 github 上有众多的 Star 和 Fork，文档和扩展也很丰富，值得学习。</value><value>
学习一个框架最好的方式就是用框架做一个项目，在实战中理解掌握框架。这里我用 Flas</value></post_desc></item>
<item><title><value>你真的理解Python中MRO算法吗？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85685/</value></title_url><post_desc><value>Python语言包含了很多优秀的特性，其中多重继承就是其中之一，但是多重继承会引发很多问题，比如二义性，Python中一切皆引用，这使得他不会像C++一样使用虚基类处理基类对象重复的问题，但是如果父类存在同名函数的时候还是会产生二义性，Python中处理这种问题的方法就是MRO。</value></post_desc></item>
<item><title><value>深入理解 Python 异步编程(上)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88291/</value></title_url><post_desc><value>本文深入地学习了异步编程是什么、为什么、在Python里是怎么样发展的。我们找到了一种让代码看起来跟同步代码一样简单，而效率却提升N倍（具体提升情况取决于项目规模、网络环境、实现细节）的异步编程方法。</value></post_desc></item>
<item><title><value>Python: 受限制的 "函数调用"</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88286/</value></title_url><post_desc><value>最近在工作上, 遇到了一个比较特殊的需求:为了安全, 设计一个函数或者装饰器, 然后用户在 “定义/调用” 函数时, 只能访问到我们允许的内置变量和全局变量。本文详细介绍了这个需求的具体实现与完美方案。</value></post_desc></item>
<item><title><value>Python 源码理解: '+=' 和 'xx = xx + xx' 的区别</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88282/</value></title_url><post_desc><value>本文介绍了+=的实际作用: 它应该能算是一个加强版的+, 因为它比+多了一个写回本身的功能.不过是否能够写回本身, 还是得看对象自身是否支持, 也就是说是否具备Py_NotImplemented标识, 是否支持sq_inplace_concat, 如果具备, 才能实现, 否则, 也就是和 + 效果一样而已.</value></post_desc></item>
<item><title><value>Python3 是如何解决棘手的字符编码问题的？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88277/</value></title_url><post_desc><value>Python3 最重要的一项改进之一就是解决了 Python2 中字符串与字符编码遗留下来的这个大坑。之前已经介绍过 Python2 字符串设计上的一些缺陷。当然这并不算 Bug，只要处理的时候多留心也可以避免这些坑，但在 Python3这些问题都很好的解决了。</value></post_desc></item>
<item><title><value>Python 编码为什么那么蛋疼？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88264/</value></title_url><post_desc><value>据说，每个做 Python 开发的都被字符编码的问题搞晕过，你好像知道怎么解决，但是错误又出现在其它地方，总是重蹈覆辙，问题究竟出在哪里？为了弄清楚这个问题，我决定从 python 字符串的构成以及字符编码的细节上进行深入浅出的分析。</value></post_desc></item>
<item><title><value>Python 入门最容易犯的错误</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88262/</value></title_url><post_desc><value>Python 以其简单易懂的语法格式与其它语言形成鲜明对比，初学者遇到最多的问题就是不按照 Python 的规则来写，即便是有编程经验的程序员，也容易按照固有的思维和语法格式来写 Python 代码，有一个外国小伙总结了一些大家常犯的错误，本文把他翻译过来并在原来的基础补充了我的一些理解，希望可以让你避开这些坑。</value></post_desc></item>
<item><title><value>Tyrion 中文文档（含示例源码）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/88252/</value></title_url><post_desc><value>Tyrion是一个基于Python实现的支持多个WEB框架的Form表单验证组件，其完美的支持Tornado、Django、Flask、Bottle Web框架。Tyrion主要动能有：表单验证，生成HTML标签和保留上次提交内容。</value></post_desc></item>
<item><title><value>用不到 50 行的 Python 代码构建最小的区块链</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88248/</value></title_url><post_desc><value>随着比特币的不断发展,它的底层技术区块链也逐步走进公众视野,引起大众注意。本文用不到50行的Python代码构建最小的数据区块链，简单介绍了区块链去中心化的结构与其实现原理。</value></post_desc></item>
<item><title><value>使用 MPI for Python 并行化遗传算法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88242/</value></title_url><post_desc><value>本文中作者使用MPI的Python接口mpi4py来将自己的遗传算法框架GAFT进行多进程并行加速。并对加速效果进行了简单测试。项目链接:GitHub: https://github.com/PytLab/gaft</value></post_desc></item>
<item><title><value>Python 面向对象（进阶篇）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88230/</value></title_url><post_desc><value>本篇将详细介绍Python 类的成员、成员修饰符、类的特殊成员。</value></post_desc></item>
<item><title><value>用Python做股市数据分析（一）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87813/</value></title_url><post_desc><value>近年来，计算机科学加入了高等数学的阵营，为金融和证券交易带来了革命性的变化。如今交易主要由计算机来完成：算法能以人类难以达到的速度做出交易决策。</value></post_desc></item>
<item><title><value>Python 面向对象（初级篇）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88214/</value></title_url><post_desc><value>面向过程编程最易被初学者接受，其往往用一长段代码来实现指定功能，开发过程中最常见的操作就是粘贴复制，即：将之前实现的代码块复制到现需功能处。</value></post_desc></item>
<item><title><value>你真的了解 WebSocket 吗？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88207/</value></title_url><post_desc><value>WebSocket协议是基于TCP的一种新的协议。WebSocket最初在HTML5规范中被引用为TCP连接，作为基于TCP的套接字API的占位符。它实现了浏览器与服务器全双工(full-duplex)通信。其本质是保持TCP连接，在浏览器和服务端通过Socket进行通信。本文将使用Python编写Socket服务端，一步一步分析请求过程。</value></post_desc></item>
<item><title><value>使用 Sphinx 制作简洁而又美观的文档</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/88194/</value></title_url><post_desc><value>使用 Sphin 创建能够以各种格式自动进行分发的可维护的、样式支配的文档。发现 Sphinx 如何抽象化单调的部分，并提供自动函数来解决一些常见问题，比如突出显示标题索引和特殊代码。</value></post_desc></item>
<item><title><value>基于 Agent 的模型入门：Python 实现隔离仿真</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87812/</value></title_url><post_desc><value>2005 年诺贝尔经济学奖得主托马斯·谢林（Thomas Schelling）在上世纪 70 年代就纽约的人种居住分布得出了著名的 Schelling segregation model，这是一个 ABM（agent-based model），当年谢林只能通过铅笔在纸上进行模拟，而这次则利用 Python 进行仿真实现这个模型。</value></post_desc></item>
<item><title><value>现代情感分析方法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87811/</value></title_url><post_desc><value>本文介绍了自然语言处理领域里的现代情感分析方法——Word2Vec和Doc2Vec。</value></post_desc></item>
<item><title><value>Python vs Ruby: 谁是最好的 web 开发语言？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87906/</value></title_url><post_desc><value>这两种语言在许多方面有相似之处。它们都是高级的面向对象的编程语言，都是交互式脚本语言、都提供标准库且支持持久化。但是，Python 和 Ruby 的解决方法却千差万别，因为它们的发展历程导致它们的语法和原理都大不相同。</value></post_desc></item>
<item><title><value>一步一步教你如何搭建自己的视频聚合站</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88188/</value></title_url><post_desc><value>作为一个炉石传说玩家，经常有事没事开着直播网站看看大神们的精彩表演。不过因为各个平台互相挖人的关系，导致关注的一些主播分散到了各个直播平台，来回切换有点麻烦，所以萌生了做一个视频聚合站的想法。</value></post_desc></item>
<item><title><value>Gevent 拾遗</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88165/</value></title_url><post_desc><value>本文介绍gevent一些重要的模块，包括Timeout，Event\AsynResult, Semphore, socket patch，这些模块都涉及当前协程与hub的切换。</value></post_desc></item>
<item><title><value>Gevent 调度流程解析</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88149/</value></title_url><post_desc><value>gevent是目前应用非常广泛的网络库，高效的轮询IO库libev加上greenlet实现的协程（coroutine），使得gevent的性能非常出色，尤其是在web应用中。本文介绍gevent的调度流程，主要包括gevent对greenlet的封装和使用，以及greenlet与libev的协作。</value></post_desc></item>
<item><title><value>用于构建优秀命令行的 4 个 Python 库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87902/</value></title_url><post_desc><value>在本文中，我将介绍如何在几个库的帮助下，在 Python 中实现这些功能。读完后，读者会了解到如何使用  Prompt Toolkit, Click（命令行界面创建工具包）、Pygments 和 Fuzzy Finder 来实现一个易于使用的 REPL。我计划在不到 20 行的 Python 代码中实现这一点。</value></post_desc></item>
<item><title><value>TensorFlow 实战：Neural Style</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87875/</value></title_url><post_desc><value>Neural Style是一个非常有意思的深度学习应用：输入一张代表内容的图片和一张代表风格的图片，深度学习网络会输出一张融合了这个风格和内容的新作品。TensorFlow是Google开源的最流行的深度学习框架。作者anishathalye使用TensorFlow实现了Neural Style，并将其开源放在了GitHub上。本文对他的代码进行深入剖析。</value></post_desc></item>
<item><title><value>如何编写一个拼写纠错器？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87872/</value></title_url><post_desc><value>2007年的某个星期，我的两个朋友(Dean和Bill)分别向我传达了他们对Google的拼写自动纠错能力的赞叹。例如输入”speling”，Google会立即显示”spelling”的检索结果。我原以为这两位才智卓越的工程师、数学家，会对其工作原理有准确的推测，事实上他们没有。后来我意识到，他们怎么会对离自身专业领域如此远的东西认知清晰呢？</value></post_desc></item>
<item><title><value>Python Enhanced Generator － Coroutine</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88143/</value></title_url><post_desc><value>本文主要介绍python中Enhanced generator即coroutine相关内容，包括基本语法、使用场景、注意事项，以及与其他语言协程实现的异同。</value></post_desc></item>
<item><title><value>Greenlet 详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88125/</value></title_url><post_desc><value>greenlet跟强大，可以从一个协程切换到任意其他协程，这是generator做不到的，但这种能力其实也是双刃剑，前面的注意事项也提到了，必须保证greenlet的正常结束，在协程之间任意的切换很容易出问题。</value></post_desc></item>
<item><title><value>Python Yield Generator 详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88133/</value></title_url><post_desc><value>本文将由浅入深详细介绍yield以及generator，包括以下内容：什么generator，生成generator的方法，generator的特点，generator基础及高级应用场景，generator使用中的注意事项。本文不包括enhanced generator即pep342相关内容。</value></post_desc></item>
<item><title><value>Python Decorator 基础</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88111/</value></title_url><post_desc><value>一般来说，装饰器是一个函数，接受一个函数（或者类）作为参数，返回值也是也是一个函数（或者类）。本文主要讲述了装饰器在python decorator 中的基础运用。</value></post_desc></item>
<item><title><value>ShutIt：一个基于 Python 的 shell 自动化框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87867/</value></title_url><post_desc><value>本文通过实例简单介绍了ShutIt这个基于Python的自动化框架的使用方法。除了pexpect，我们又多了这个选择。</value></post_desc></item>
<item><title><value>如何用 Python 检测伪造的视频</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87863/</value></title_url><post_desc><value>本文以一段自打24小时耳光的视频为例子，介绍了如何利用均值哈希算法来检查重复视频帧。 </value></post_desc></item>
<item><title><value>Python 编码错误的本质原因</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87859/</value></title_url><post_desc><value>不论你是有着多年经验的 Python 老司机还是刚入门 Python 不久的新贵，你一定遇到过UnicodeEncodeError、UnicodeDecodeError 错误，每当遇到错误我们就拿着 encode、decode 函数翻来覆去的转换，有时试着试着问题就解决了，有时候怎么试都没辙，只有借用 Google 大神帮忙，但似乎很少去关心问题的本质是什么，那么你有没有想过一次性彻底把 Python 字符编码给搞懂呢？</value></post_desc></item>
<item><title><value>代码这样写不止于优雅（Python 版）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87856/</value></title_url><post_desc><value>上周写了一篇：代码这样写更优雅，朋友们纷纷表示希望再写点儿，今天就接着这个话题写点 Python 中那些 Pythonic 的写法，希望可以抛砖引玉。</value></post_desc></item>
<item><title><value>代码这样写更优雅(Python 版)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87851/</value></title_url><post_desc><value>要写出 Pythonic（优雅的、地道的、整洁的）代码，还要平时多观察那些大牛代码，Github 上有很多非常优秀的源代码值得阅读，比如：requests、flask、tornado，笔者列举一些常见的 Pythonic 写法，希望能给你带来一点启迪。</value></post_desc></item>
<item><title><value>Anacodna之conda与 virtualenv对比使用教程，创建虚拟环境</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85588/</value></title_url><post_desc><value>conda与 virtualenv对比使用教程，创建虚拟环境</value></post_desc></item>
<item><title><value>Python Mysql 数据库操作</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85589/</value></title_url><post_desc><value>Python 中对数据的操作， 增删改均要在指针对象执行了sql语句后， 使用连接对象commit， 查询的结果使用指针对象的fetch系列方法获取</value></post_desc></item>
<item><title><value>tornado 源码阅读-初步认识</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85590/</value></title_url><post_desc><value>最近闲暇无事,阅读了一下tornado的源码,对整体的结构有了初步认识,与大家分享</value></post_desc></item>
<item><title><value>如何确定一个字符串中是否所有字符全部互不相同</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85577/</value></title_url><post_desc><value>在技术面试中经常会遇到算法题，接下来，我计划(在我的能力范围内)写一些常见面试题及其解决思路，希望可以巩固自己的知识，如果可以顺便帮助到一些朋友，就更好不过了。</value></post_desc></item>
<item><title><value>什么时候使用 Lambda 函数？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87848/</value></title_url><post_desc><value>Lambda 函数又称匿名函数，匿名函数就是没有名字的函数，函数没有名字也行？当然可以啦。有些函数如果只是临时一用，而且它的业务逻辑也很简单时，就没必要非给它取个名字不可。</value></post_desc></item>
<item><title><value>Python 解惑：整数比较</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87845/</value></title_url><post_desc><value>在 Python 中一切都是对象，毫无例外整数也是对象，对象之间比较是否相等可以用==，也可以用is。清楚is和==的区别之后，对此也许你有可能会遇到下面的这些困惑，于是就有了这样一篇文章，试图把Python中一些隐晦的东西趴出来，希望对你有一定的帮助。</value></post_desc></item>
<item><title><value>Python 中的垃圾回收机制</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87843/</value></title_url><post_desc><value>GC作为现代编程语言的自动内存管理机制，专注于两件事：1. 找到内存中无用的垃圾资源 2. 清除这些垃圾并把内存让出来给其他对象使用。GC彻底把程序员从资源管理的重担中解放出来，让他们有更多的时间放在业务逻辑上。但这并不意味着码农就可以不去了解GC，毕竟多了解GC知识还是有利于我们写出更健壮的代码。</value></post_desc></item>
<item><title><value>字典对象的 Pythonic 用法（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87836/</value></title_url><post_desc><value>字典对象在Python中作为最常用的数据结构之一，和数字、字符串、列表、元组并列为5大基本数据结构，字典中的元素通过键来存取，而非像列表一样通过偏移存取。笔者总结了字典的一些常用Pyhonic用法</value></post_desc></item>
<item><title><value>如何构建一个分布式爬虫：实战篇</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87833/</value></title_url><post_desc><value>本篇文章将是『如何构建一个分布式爬虫』系列文章的最后一篇，拟从实战角度来介绍如何构建一个稳健的分布式微博爬虫。</value></post_desc></item>
<item><title><value>Python基础：分分钟入门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85568/</value></title_url><post_desc><value>最近公司BOSS要公司的市场／产品什么的学Python，特记录一篇Python基础内容，供有一点基础的同事们快速入门。</value></post_desc></item>
<item><title><value>Python 延迟初始化（lazy property）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85553/</value></title_url><post_desc><value>Python 对象的延迟初始化是指，当它第一次被创建时才进行初始化，或者保存第一次创建的结果，然后每次调用的时候直接返回该结果。 延迟初始化主要用于提高性能，避免浪费计算，并减少程序的内存需求。 </value></post_desc></item>
<item><title><value>python blinker库学习</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85554/</value></title_url><post_desc><value>Blinker 是一个基于Python的强大的信号库，它既支持简单的对象到对象通信，也支持针对多个对象进行组播。Flask的信号机制就是基于它建立的。</value></post_desc></item>
<item><title><value>机器学习从入门到放弃之决策树算法</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85555/</value></title_url><post_desc><value>决策树故名思意是用于基于条件来做决策的，而它运行的逻辑相比一些复杂的算法更容易理解，只需按条件遍历树就可以了，需要花点心思的是理解如何建立决策树。</value></post_desc></item>
<item><title><value>Python序列化模型数据为JSON</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85556/</value></title_url><post_desc><value>相信使用Python做Web开发的朋友都会遇到这样1个问题,那就是在项目开发中使用模型框架,比如SQLAlchemy、Peewee,我们在做RESTful接口时如何将这些模型序列化为JSON数据。 </value></post_desc></item>
<item><title><value>用Python实现文档聚类</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85481/</value></title_url><post_desc><value>在本教程中，我会利用 Python 来说明怎样聚类一系列的文档。我所演示的实例会识别出 top 100 电影的（来自 IMDB 列表）剧情简介的隐藏结构。关于这个例子的详细讨论在初始版本里。</value></post_desc></item>
<item><title><value>爬虫学习之基于Scrapy的网络爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85684/</value></title_url><post_desc><value>面对工作复杂的需求，通常需要你自己去定义并实现很多非常基础的爬虫框架上的功能，或者需要组合很多Python第三方库来做。Python中有很多非常优秀的爬虫框架，比如我们接下来要学习到的Scrapy。Scrapy官方有很经典的入门文档说明，这一篇仅仅是通过一个简单的实例来了解Scrapy这个库是如何来进行网络内容提取的。</value></post_desc></item>
<item><title><value>Python要你命三千</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85686/</value></title_url><post_desc><value>文章有点标题党，主要是分享一些Python好用的语法糖，用更少的代码实现同样的功能，而且还很优雅。</value></post_desc></item>
<item><title><value>Python 代码调试技巧</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85668/</value></title_url><post_desc><value>Debug 对于任何开发人员都是一项非常重要的技能，它能够帮助我们准确的定位错误，发现程序中的 bug。python 提供了一系列 debug 的工具和包，可供我们选择。本文将主要阐述如何利用 python debug 相关工具进行 debug。</value></post_desc></item>
<item><title><value>如何构建一个分布式爬虫：基础篇</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87826/</value></title_url><post_desc><value>继上篇我们谈论了Celery的基本知识后，本篇继续讲解如何一步步使用Celery构建分布式爬虫。</value></post_desc></item>
<item><title><value>如何构建一个分布式爬虫：理论篇</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87823/</value></title_url><post_desc><value>本系列文章计划分三个章节进行讲述，分别是理论篇、基础篇和实战篇。理论篇主要为构建分布式爬虫而储备的理论知识。</value></post_desc></item>
<item><title><value>超详细的 Python 实现新浪微博模拟登陆（小白都能懂）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87820/</value></title_url><post_desc><value>最近由于需要一直在研究微博的爬虫，第一步便是模拟登陆，从开始摸索到走通模拟登陆这条路其实还是挺艰难的，需要一定的经验，为了让朋友们以后少走点弯路，这里我把我的分析过程和代码都附上来。</value></post_desc></item>
<item><title><value>flask查询whois信息实例</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85509/</value></title_url><post_desc><value>flask基础实现不再赘述，不了解的同学可以通过官方文档学习</value></post_desc></item>
<item><title><value>Flask 源码剖析——服务启动篇</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85510/</value></title_url><post_desc><value>因为Flask是一个Web框架，所以需要一个HTTP服务，而HTTP服务是基于TCP服务的，而TCP服务最终会有一个基础服务来处理socket。这一条线都能够解释的通。</value></post_desc></item>
<item><title><value>Python 爬虫-模拟登录知乎-爬取拉勾网职位信息</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85511/</value></title_url><post_desc><value>用Python写爬虫是很方便的,最近看了xlzd.me的文章，他的文章写的很到位，提供了很好的思路。因为他的文章部分代码省略了。下面是基于他的文章的三个代码片段:基于Python3,Python2的话需要修改下input输入函数和print的用法。</value></post_desc></item>
<item><title><value>五分钟战胜 Python 字符编码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85482/</value></title_url><post_desc><value>本文不谈复杂的理论，就经验教你字符处理八字真言：确定编码，同类交互。文章针对Python 2.7，主要因为3对的编码已经有了很大的改善并且实际原理一样，更改一下操作命令即可。了解完本文，你可以轻松解决文字处理，特殊平台（Windows?）下的编码，爬虫编码等问题。</value></post_desc></item>
<item><title><value>我的自动化之旅：为人民服务的自动化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85545/</value></title_url><post_desc><value>很久以前，当我第一次读到“程序员修炼(The Pragmatic Programmer)”时，我读了一些让我真真难以忘怀的建议。”不要使用手工流程(Don’t Use Manual Procedures)”。这在Ubiquitous Automation一节。总之，他们希望你将所有的事情都自动化。</value></post_desc></item>
<item><title><value>机器学习从入门到放弃之KNN算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85531/</value></title_url><post_desc><value>本系列将尽可能降低数学的描述(避免一长串的数学证明)来描述机器学习算法的基本原理。如果需要对算法进行深入了解和学习，那么读者还是应该学习算法背后的数学原理。</value></post_desc></item>
<item><title><value>为Flask编写1个百度编辑器的插件</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85532/</value></title_url><post_desc><value>这篇文章的作者,直接在视图中定义对应的操作,进行一系列图片上传功能的。但是,这并没有满足我的要求,我想要的想过是直接导入一个模块,然后它帮我做完一切的事情</value></post_desc></item>
<item><title><value>python实现地址分布可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85533/</value></title_url><post_desc><value>当你知道某些详细地址信息，该如何利用。本文通过调用百度地图接口，实现用户可视化展示，便于更清楚地了解用户。注册百度地图开放平台帐号</value></post_desc></item>
<item><title><value>python迭代器资料整理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85650/</value></title_url><post_desc><value>满足迭代协议的对象就是迭代器 ，iterator就是实现了Iteration Protocol的对象，这类对象都支持循环遍历的操作（for／while／支持迭代的函数list() sum()…）。</value></post_desc></item>
<item><title><value>爬取豆瓣电影top250提取电影分类进行数据分析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85649/</value></title_url><post_desc><value> 我们今天要爬取的是豆瓣电影top250页面如下所示： 我们需要的是里面的电影分类，通过查看源代码观察可以分析出我们需要的东西。直接进入主题吧！ </value></post_desc></item>
<item><title><value>Flask学习摘要</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85651/</value></title_url><post_desc><value>Flask学习摘要</value></post_desc></item>
<item><title><value>利用Django通用类视图(class-based view)编写数据驱动(ModeForm)WEB程序整理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85652/</value></title_url><post_desc><value>最近在学习Django，官方文档介绍地十分详细。但是“大而全”就难免会有些不够速成，和我们这个浮躁的互联网时代格格不入，所以我就整理了这个文档。就像coolshell说的，一泡屎的时间就可以看完。</value></post_desc></item>
<item><title><value>震惊小伙伴的单行代码（Python篇）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85504/</value></title_url><post_desc><value>每篇文章都令人印象深刻的揭示了这些语言中一些出色优秀的编程特征。编程高手们利用这些技巧提高编程速度、改进软件质量，编程初学者能从这些简洁的预防中学到各种编程语言的真谛。本《震惊小伙伴的单行代码系列》将逐一介绍这些各种编程语言单行代码文章，供大家学习参考。</value></post_desc></item>
<item><title><value>用Python理解Web并发模型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85490/</value></title_url><post_desc><value>虽然异步是我们急需掌握的高阶技术，但是不积跬步无以至千里，同步技术的学习是不能省略的。今天这篇文章主要用Python来介绍Web并发模型，直观地展现同步技术的缺陷以及异步好在哪里。</value></post_desc></item>
<item><title><value>Python Web部署方式总结</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85489/</value></title_url><post_desc><value>学过PHP的都了解，php的正式环境部署非常简单，改几个文件就OK，用FastCgi方式也是分分钟的事情。相比起来，Python在web应用上的部署就繁杂的多，主要是工具繁多，主流服务器支持不足，在了解Python的生产环境部署方式之前，先明确一些概念！很重要</value></post_desc></item>
<item><title><value>Python time模块学习</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85491/</value></title_url><post_desc><value>time模块提供了一些用于管理时间和日期的C库函数，由于它绑定到底层C实现，因此一些细节会基于具体的平台。</value></post_desc></item>
<item><title><value>混淆id的一种方法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85534/</value></title_url><post_desc><value>众所周知，在web应用的API中，总是会出现数据库item的id。比如GET /posts/1表示获取id为1的文章内容。这样做十分简洁，但存在被人爬数据的风险。比如我可以大致猜测或者试一下id的范围，1,2,3…10000这样迭代地爬数据。如果服务器不做访问限制，很轻易就能把所有数据就能爬下来。而且，这样的数字id也会暴露一些信息，比如id小的一般是更早创建的。</value></post_desc></item>
<item><title><value>Python socket编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85535/</value></title_url><post_desc><value>Python 提供了两个基本的 socket 模块 Socket，它提供了标准的 BSD Sockets API。 SocketServer，它提供了服务器中心类，可以简化网络服务器的开发。 </value></post_desc></item>
<item><title><value>用 Python 排序数据的多种方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85488/</value></title_url><post_desc><value>Python 列表有内置就地排序的方法 list.sort()，此外还有一个内置的 sorted() 函数将一个可迭代对象（iterable）排序为一个新的有序列表。本文我们将去探索用 Python 做数据排序的多种方法。</value></post_desc></item>
<item><title><value>爬虫学习之一个简单的网络爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85653/</value></title_url><post_desc><value>这是一个网络爬虫学习的技术分享，主要通过一些实际的案例对爬虫的原理进行分析，达到对爬虫有个基本的认识，并且能够根据自己的需要爬到想要的数据。有了数据后可以做数据分析或者通过其他方式重新结构化展示。</value></post_desc></item>
<item><title><value>从源码编译 Python</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85641/</value></title_url><post_desc><value>尝试通过源码自己编译 Python，使用的系统是 Ubuntu14.04 LTS。</value></post_desc></item>
<item><title><value>Python 之父谈论 Python 的未来</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/85631/</value></title_url><post_desc><value>作为一门已经开源25年、面向对象的动态语言，毫无疑问，Python近年来已经成为软件开发者主要的工具。大家喜欢它对程序员的友好性以及其框架和库丰富的生态系统。我们来看一看Van Rossum对Python未来有哪些看法？</value></post_desc></item>
<item><title><value>如果有人让你推荐Python技术书，请让他看这个列表</value></title><lei><value>书籍</value></lei><title_url><value>http://python.jobbole.com/85620/</value></title_url><post_desc><value>好的技术书籍可以帮助我们快速地成长，大部分人或多或少地受益于经典的技术书籍。我们经常能收到让推荐Python书籍的消息，索性通过投票做了这个书单。如果这个列表让你受益，请扩散给更多人，谢谢！</value></post_desc></item>
<item><title><value>OpenCV 形状分析（上）：计算轮廓中心</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85600/</value></title_url><post_desc><value>今天，我们将开始由3部分构成的形状检测分析系列教程。</value></post_desc></item>
<item><title><value>Python的metaclass</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85492/</value></title_url><post_desc><value>metaclass一般译作元类，它是一个类的类（型）。简单来说，元类的实例是一个类，而这个类的类就是元类了.也就是说，相对于类可以在运行时动态构造对象而言，元类也可以在运行时动态生成类。在C++等语言中，要得知一个对象的类是很麻烦的（MFC是用宏来实现的）；而Python由于有自省功能，所以非常简单。</value></post_desc></item>
<item><title><value>用 Python 拓展 GDB（四）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85493/</value></title_url><post_desc><value>欢迎来到《用python拓展gdb》的最后一篇。第一篇结尾，我提到了通用语言相对于领域特定语言的一项优势，即在处理数据上更加灵活。其实通用语言还有着另一样优势，领域特定语言只能局限在宿主程序中使用，而通用语言则无此限制。对于通用语言来说，gdb暴露的接口不过是又一个库而已。</value></post_desc></item>
<item><title><value>Python的16个“坑”</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85452/</value></title_url><post_desc><value>不要使用可变对象作为函数默认值，生成器不保留迭代过后的结果，lambda在闭包中会保存局部变量</value></post_desc></item>
<item><title><value>使用virtualenv搭建独立的Python环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85459/</value></title_url><post_desc><value> virtualenv可以搭建虚拟且独立的python环境，可以使每个项目环境与其他项目独立开来，保持环境的干净，解决包冲突问题。</value></post_desc></item>
<item><title><value>给 Python程序员的函数式编程实践经验</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85480/</value></title_url><post_desc><value>这篇文章会让读者了解到在 python 背景下的函数式编程。除了作为学术课程的一部分，大部分程序员很少会接触到函数式编程语言，比如 Lisp 或者 Haskell。</value></post_desc></item>
<item><title><value>在Python中实现你自己的推荐系统</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85516/</value></title_url><post_desc><value>两种最普遍的推荐系统的类型是基于内容和协同过滤（CF）。协同过滤基于用户对产品的态度产生推荐，也就是说，它使用“人群的智慧”来推荐产品。与此相反，基于内容的推荐系统集中于物品的属性，并基于它们之间的相似性为你推荐。</value></post_desc></item>
<item><title><value>6 种 Python 数据可视化工具</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85601/</value></title_url><post_desc><value>在 Python 中，将数据可视化有多种选择，正是因为这种多样性，何时选用何种方案才变得极具挑战性。</value></post_desc></item>
<item><title><value>Pythonista 容易忽略的python编程方式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85435/</value></title_url><post_desc><value>Python 之禅 ：优美胜于丑陋，明了胜于晦涩，简洁胜于复杂，复杂胜于凌乱，扁平胜于嵌套，间隔胜于紧凑，可读性很重要，即便假借特例的实用性之名，也不可违背这些规则，不要包容所有错误，除非你确定需要这样做</value></post_desc></item>
<item><title><value>Python 弱引用 学习</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85431/</value></title_url><post_desc><value>和许多其它的高级语言一样，Python使用了垃圾回收器来自动销毁那些不再使用的对象。每个对象都有一个引用计数，当这个引用计数为0时Python能够安全地销毁这个对象。</value></post_desc></item>
<item><title><value>学习Python编程的19个资源</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85461/</value></title_url><post_desc><value>用Python编写代码一点都不难，事实上它一直被赞誉为最容易学的编程语言。如果你准备学习web开发， Python是一个不错的开始，甚至想做游戏的话，用Python来开发游戏的资源也有很多。这是快速学习这门语言的途径之一。</value></post_desc></item>
<item><title><value>Python数据结构——AVL树的基本概念</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85460/</value></title_url><post_desc><value>在上一节中我们讨论了建立一个二叉搜索树。我们知道，当树变得不平衡时get和put操作会使二叉搜索树的性能降低到O(n)。在这一节中我们将看到一种特殊的二叉搜索树，它可以自动进行调整，以确保树随时都保持平衡。</value></post_desc></item>
<item><title><value>Python数据结构——二叉搜索树的实现（下）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85449/</value></title_url><post_desc><value>我们把注意力转向二叉搜索树中最具挑战性的方法，删除一个键值（参见Listing 7）。首要任务是要找到搜索树中要删除的节点。</value></post_desc></item>
<item><title><value>Python数据结构——二叉搜索树的实现（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85448/</value></title_url><post_desc><value>我们讨论两种ADT MAP的实现方式，基于列表的二分查找和哈希表。在这一节中，我们将要学习二叉搜索树，这是另一种键指向值的Map集合，在这种情况下我们不用考虑元素在树中的实际位置，但要知道使用二叉树来搜索更有效率。</value></post_desc></item>
<item><title><value>用 Python 拓展 GDB（三）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85447/</value></title_url><post_desc><value>所谓的convenience function，正如其名“便利函数”，指gdb会话中，可用于辅助数据处理的一类函数。</value></post_desc></item>
<item><title><value>数据流编程教程：如何使用Airflow构建数据科学工作流</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85610/</value></title_url><post_desc><value>Airflow 是一个我们正在用的工作流调度器，相对于传统的crontab任务管理，Airflow很好的为我们理清了复杂的任务依赖关系、监控任务执行的情况。我们喜欢它是因为它写代码太容易了，也便于调试、维护和继承重用，而不是像xml那样的配置文件用来描述DAG。</value></post_desc></item>
<item><title><value>Python 装饰器的理解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85611/</value></title_url><post_desc><value>Python的装饰器可以实现在代码运行期间修改函数的上下文， 即可以定义函数在执行之前进行何种操作和函数执行后进行何种操作， 而函数本身并没有任何的改变。 这个看起来很复杂， 实际上应用到了我之前说过的闭包…</value></post_desc></item>
<item><title><value>Python中的下划线</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85612/</value></title_url><post_desc><value>这篇文章讨论Python中下划线_的使用。跟Python中很多用法类似，下划线_的不同用法绝大部分（不全是）都是一种惯例约定。</value></post_desc></item>
<item><title><value>python 互联网数据处理模块介绍</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85602/</value></title_url><post_desc><value>互联网无处不在。即使是很小的，一次性使用的脚本都经常与远程服务进行交互以发送或接收数据。 Python有丰富的Web协议库，非常适合用于编程的基于Web服务的服务器和客户端编程。</value></post_desc></item>
<item><title><value>聊一聊 Python 2 中的编码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85597/</value></title_url><post_desc><value>在 Python 尤其是 Python2 中，编码问题是困扰开发者尤其初学者的一大问题。什么 Unicode/UTF-8/str ，又是 decode/encode 的，搞得人头都大了。其实不然，这有点类似 Java 中 java.io 包一样，看似庞大难懂，但是可以非常精细地定制需求。</value></post_desc></item>
<item><title><value>用 Python 拓展 GDB（二）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85428/</value></title_url><post_desc><value>项目中的某个类太过于复杂？正在使用某个自定义的数据结构？想要快速看出某个属性的编码代表什么？Pretty-Printer可以帮你解决以上所有问题。</value></post_desc></item>
<item><title><value>用 Python 拓展 GDB（一）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85415/</value></title_url><post_desc><value>之前写的《GDB 自动化操作的技术》一文介绍了可在gdb内部使用的DSL（领域特定语言）来自动化gdb的操作。借助该DSL，我们分别实现了一个名为mv的自定义命令，和“对账”用的调试脚本。在末尾，我提到了也可以用python来实现拓展脚本。</value></post_desc></item>
<item><title><value>枕边的函数“氏”</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85235/</value></title_url><post_desc><value>今日向大家介绍 3 位美人，分别是命令氏、面向对象氏、函数氏。</value></post_desc></item>
<item><title><value>Python--Virtualenv简明教程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85398/</value></title_url><post_desc><value>virtualenv通过创建独立Python开发环境的工具, 来解决依赖、版本以及间接权限问题. 比如一个项目依赖Django1.3 而当前全局开发环境为Django1.7, 版本跨度过大, 导致不兼容使项目无法正在运行, 使用virtualenv可以解决这些问题.</value></post_desc></item>
<item><title><value>Python （类）实例方法的特殊属性</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85399/</value></title_url><post_desc><value>Python 3 有两种 bound method, 一种是 instance method,一种是 class method（class instance method）,两种都可以被实例访问；对于 instance method 其 __self__ 属性值为 instance 本身，而 class method 其属性值则为 class 本身；bound method 可以通过对应的底层函数，访问函数的所有特殊属性。</value></post_desc></item>
<item><title><value>Python 数据科学入门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85394/</value></title_url><post_desc><value>Python 在数据科学领域越来越流行了。它的流行不无道理。 Python 容易学，有超强数据科学库，并且和 Hadoop 以及 Spark 等数据库和工具整合得非常好。</value></post_desc></item>
<item><title><value>5个理由告诉你为什么要学习使用Python装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85393/</value></title_url><post_desc><value>Python 装饰器使用非常地简单。任何会使用 Python 函数的人都可以学习使用装饰器</value></post_desc></item>
<item><title><value>如何实现一个神经网络</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85119/</value></title_url><post_desc><value>指南是从IPython Notebook （Python 2 ）中生成的，在每一章的末尾指南会链接到Notebook中，所以你可以使用并自己执行那些例子。 这些神经网络是使用 NumPy 实现的，这个库提供了有如向量和矩阵乘积的线性代数的高效实现。</value></post_desc></item>
<item><title><value>gevent 学习笔记 —— 协程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85438/</value></title_url><post_desc><value>gevent是一个基于协程的Python网络库。我们先理解这句，也是这次学习的重点——协程。</value></post_desc></item>
<item><title><value>Python 性能优化</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88070/</value></title_url><post_desc><value>当我们提到一门编程语言的效率时：通常有两层意思，第一是开发效率，这是对程序员而言，完成编码所需要的时间；另一个是运行效率，这是对计算机而言，完成计算任务所需要的时间。编码效率和运行效率往往是鱼与熊掌的关系，是很难同时兼顾的。不同的语言会有不同的侧重，python语言毫无疑问更在乎编码效率，life is short，we use python。</value></post_desc></item>
<item><title><value>GAFT - 一个使用 Python 实现的遗传算法框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/88069/</value></title_url><post_desc><value>最近需要用到遗传算法来优化一些东西，最初是打算直接基于某些算法实现一个简单的函数来优化，但是感觉单纯写个非通用的函数运行后期改进算子或者别人使用起来都会带来困难，同时遗传算法基本概念和运行流程相对固定，改进也一般通过编码机制，选择策略，交叉变异算子以及参数设计等方面，对于算法的整体结构并没有大的影响。这样对于遗传算法来说，就非常适合写个相对固定的框架然后给算子、参数等留出空间以便对新算法进行测试和改进。于是就动手写了个遗传算法的小框架gaft，本文对此框架进行一些介绍并分别以一个一维搜索和二维搜索为例子对使用方法进行了介绍。</value></post_desc></item>
<item><title><value>Python数据结构——树的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85336/</value></title_url><post_desc><value>用嵌套列表表示树时，我们使用 Python 的列表来编写这些函数。把界面写成列表的一系列方法与我们已实现其他的抽象数据类型有些不同，它为我们提供一个简单、可以直接查看的递归数据结构。列表实现树时，我们将存储根节点作为列表的第一个元素的值。第二个元素的本身是一个表示左子树的列表。第三个元素表示在右子树的另一个列表。</value></post_desc></item>
<item><title><value>Python数据结构——解析树及树的遍历</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85337/</value></title_url><post_desc><value>完成树的实现之后，现在我们来看一个例子，告诉你怎么样利用树去解决一些实际问题。在这个章节，我们来研究解析树。解析树常常用于真实世界的结构表示，例如句子或数学表达式。</value></post_desc></item>
<item><title><value>Python数据结构——二叉堆的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85338/</value></title_url><post_desc><value> 在前面的章节里我们学习了“先进先出”（FIFO）的数据结构：队列（Queue）。队列有一种变体叫做“优先队列”（Priority Queue）。优先队列的出队（Dequeue）操作和队列一样，都是从队首出队。</value></post_desc></item>
<item><title><value>Python-编写1个Memcached的命令行</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85586/</value></title_url><post_desc><value>近期在项目中使用到了Memcached,相比redis较为齐全的工具,这个非关系型数据库客户端只能通过telnet与服务器端进行交互,于是有了为这个数据编写1个简便的客户端工具的想法。</value></post_desc></item>
<item><title><value>使用 pyenv + virtualenv 打造多版本 Python 开发环境</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85587/</value></title_url><post_desc><value>pyenv 是针对 python 版本的管理，通过修改环境变量的方式实现；virtualenv 是针对python的包的多版本管理，通过将python包安装到一个模块来作为python的包虚拟环境，通过切换目录来实现不同包环境间的切换。</value></post_desc></item>
<item><title><value>我看 CGI</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/85400/</value></title_url><post_desc><value>最近一直再看 django 源代码，发现对运行机制还是蛮感兴趣的（太懒了，这块一直没有深入研究过），因为扯到了 wsgi 规范，就想到了原始的 cgi 接口规范, 这里就先写写我对 cgi 接口规范 的认知，同时也为了下次组内分享预留个开头。</value></post_desc></item>
<item><title><value>使用 Flask 实现 RESTful API</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85390/</value></title_url><post_desc><value>Flask是一个使用Python开发的基于Werkzeug的Web框架。Flask非常适合于开发RESTful API，因为它具有以下特点：使用Python进行开发，Python简洁易懂，容易上手，灵活，可以部署到不同的环境，支持RESTful请求分发。</value></post_desc></item>
<item><title><value>Python性能优化的20条建议</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85385/</value></title_url><post_desc><value>算法的时间复杂度对程序的执行效率影响最大，在Python中可以通过选择合适的数据结构来优化时间复杂度，如list和set查找某一个元素的时间复杂度分别是O(n)和O(1)。不同的场景有不同的优化方式，总得来说，一般有分治，分支界限，贪心，动态规划等思想。</value></post_desc></item>
<item><title><value>Python 性能分析大全</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85381/</value></title_url><post_desc><value>程序运行的速度如何？程序运行时间的瓶颈在哪里？能否稍加改进以提高运行速度呢？为了更好了解python程序，我们需要一套工具，能够记录代码运行时间，生成一个性能分析报告，方便彻底了解代码，从而进行针对性的优化（本篇侧重于代码性能分析，不关注如何优化）</value></post_desc></item>
<item><title><value>Hack Python 整数对象</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85373/</value></title_url><post_desc><value> 写这篇文章的原因是目前在看《Python源码剖析》[1]，但是这本书的作者陈儒老师剖析源码的目的好像不是太明确，我读这本书和看源码的目的很简单：为了理解计算机的运行，理解大型软件工程的设计。</value></post_desc></item>
<item><title><value>Python 的优雅技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85374/</value></title_url><post_desc><value>枚举 ，字典/集合 解析，强制浮点数除法，简单的服务器，简单的服务器，分析脚本，对象自检，调试脚本，简化if结构，字符串/数列 逆序，优雅地打印，三元运算</value></post_desc></item>
<item><title><value>Python 开发者节省时间的 10 个方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88066/</value></title_url><post_desc><value>在这篇文章，我想强调一些 Python 可以节约时间并最大限度地提高生产力的方面。在做准备时，我咨询了几个 Pythonists，他们最节省时间的技巧是什么？答案在这里…</value></post_desc></item>
<item><title><value>帮你提升 Python 的 27 种编程语言</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/88062/</value></title_url><post_desc><value>我们做 Python 核心开发过程的一部分事情是由于领会的特点具有在其他语言我们具有优势，是否能够用一种合适的方式让 Python 代码容易读写。这意味着学习别的程序语言能够明确特定的风格，并且在 Python 中编程提高人对软件开发的认识。</value></post_desc></item>
<item><title><value>程序员必知的 Python 陷阱与缺陷列表</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88045/</value></title_url><post_desc><value>本文关注的主要是python陷阱，具体而言，是指CPython，而且除非特别说明，所有代码示例都是在python2.7运行的。</value></post_desc></item>
<item><title><value>图解机器学习：神经网络和 TensorFlow 的文本分类</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/88041/</value></title_url><post_desc><value>开发人员经常说，如果你想开始机器学习，你应该首先学习算法。但是我的经验则不是。我认为你应该首先了解：应用程序如何工作。一旦了解了这一点，深入探索算法的内部工作就会变得更加容易。</value></post_desc></item>
<item><title><value>十行代码实现牛顿方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85295/</value></title_url><post_desc><value>从今天起，我将推出系列博文：十行代码解决数学问题。这第一篇我将介绍牛顿迭代法，这种古老的数值逼近法能够用来求解复杂多项式和任意可导函数的根。</value></post_desc></item>
<item><title><value>用Python创建Excel高级工作表</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85320/</value></title_url><post_desc><value>我已写过多篇文章介绍如何使用 Python 和 Pandas 操作数据得到有用的 Excel 表格。依我的经验，不管 Python 工具有多么强大，有时候仍然需要利用更高阶的 Excel 特性来传递信息或者进一步分析数据。</value></post_desc></item>
<item><title><value>Python 迭代器模块 itertools 简介</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85321/</value></title_url><post_desc><value>Python提供了一个非常棒的模块用于创建自定义的迭代器，这个模块就是 itertools。itertools 提供的工具相当高效且节省内存。使用这些工具，你将能够创建自己定制的迭代器用于高效率的循环。</value></post_desc></item>
<item><title><value>Python map, reduce, filter和sorted</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85313/</value></title_url><post_desc><value>Python,map, reduce, filter,sorted</value></post_desc></item>
<item><title><value>Python Mock的入门</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85312/</value></title_url><post_desc><value>Mock这个词在英语中有模拟的这个意思，因此我们可以猜测出这个库的主要功能是模拟一些东西。准确的说，Mock是Python中一个用于支持单元测试的库，它的主要功能是使用mock对象替代掉指定的Python对象，以达到模拟对象的行为</value></post_desc></item>
<item><title><value>6个Python性能优化技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85375/</value></title_url><post_desc><value>Python是一门非常酷的语言，因为很少的Python代码可以在短时间内做很多事情，并且，Python很容易就能支持多任务和多重处理。Python的批评者声称Python性能低效、执行缓慢，但实际上并非如此：尝试以下6个小技巧，可以加快Pytho应用程序。</value></post_desc></item>
<item><title><value>Python 自定义函数的特殊属性（收藏专用）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85364/</value></title_url><post_desc><value>Python 中通过函数定义所创建的用户自定义函数对象均具有一些特殊属性，需要注意的是这里介绍的是自定义函数（function类型）的特殊属性，而非方法（method 类型）的特殊属性，函数和方法的特熟属性以及默认的返回值可能不尽相同。</value></post_desc></item>
<item><title><value>深入理解 tornado 之底层 ioloop 实现</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85365/</value></title_url><post_desc><value>最近打算学习 tornado 的源码，所以就建立一个系列主题 “深入理解 tornado”。 在此记录学习经历及个人见解与大家分享。文中一定会出现理解不到位或理解错误的地方，还请大家多多指教 。</value></post_desc></item>
<item><title><value>奇怪的 dead lock</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85275/</value></title_url><post_desc><value>在服务器上的程序遇到一个 import 卡死的情况，而且这个 bug 只能在服务器上重现，个人电脑上不会重现。</value></post_desc></item>
<item><title><value>Python数据结构——树的基本概念</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85271/</value></title_url><post_desc><value>我们已经学过了像栈和队列这样的线性数据结构，同时我们对递归也有了一定的了解，现在让我们来看看另一种常见的数据结构——树（Tree）。树在计算机科学里应用广泛，包括操作系统，图形学，数据库和计算机网络。</value></post_desc></item>
<item><title><value>Erlang/Elixir: 使用 OpenCV, Python 搭建图片缩略图服务器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85266/</value></title_url><post_desc><value>这篇文章是在OSX上测试和运行的。 应用程序进程树, 默认 Poolboy 中初始化10个用于处理图片的 Python 工作进程(Worker) 。</value></post_desc></item>
<item><title><value>Python数据结构——队列</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85264/</value></title_url><post_desc><value>队列是一种列表，不同的是队列只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的数据，先进先出，这点和栈不一样，在栈中，最后入栈的元素反而被优先处理。可以将队列想象成在银行前排队的人群，排在最前面的人第一个办理业务，新来的人只能在后面排队，直到轮到他们为止。</value></post_desc></item>
<item><title><value>机器学习算法实践-Logistic回归与梯度上升算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88022/</value></title_url><post_desc><value>本文主要分为两部分，第一部分主要介绍Logistic回归的理论相关的部分，涉及到通过似然函数建立Logistic回归模型以及使用梯度上升算法优化参数两个主要的内容；第二部分主要总结Logistic回归模型的代码实现和模型训练以及测试等。</value></post_desc></item>
<item><title><value>7 个你现在就该学习 Python 的理由</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87991/</value></title_url><post_desc><value>Python 是一门更注重可读性和效率的语言，尤其是相较于 Java，PHP 以及 C++ 这样的语言，它的这两个优势让其在开发者中大受欢迎。</value></post_desc></item>
<item><title><value>Python 中的异步编程：Asyncio</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87988/</value></title_url><post_desc><value>如果你已经决定要理解 Python 的异步部分，欢迎来到我们的“Asyncio How-to ”。</value></post_desc></item>
<item><title><value>机器学习算法实践-朴素贝叶斯(Naive Bayes)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/88007/</value></title_url><post_desc><value>上一篇总结了决策树的实现，本文中我将一步步实现一个朴素贝叶斯分类器，并采用SMS垃圾短信语料库中的数据进行模型训练，对垃圾短信进行过滤，在最后对分类的错误率进行了计算。</value></post_desc></item>
<item><title><value>机器学习算法实践-决策树(Decision Tree)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87994/</value></title_url><post_desc><value>本文为这系列博客的第一篇，关于决策树(Decision Tree)的算法实现，文中我将对决策树种涉及到的算法进行总结并附上自己相关的实现代码。文中我将一步步通过MLiA的隐形眼镜处方数集构建决策树并使用Graphviz将决策树可视化。</value></post_desc></item>
<item><title><value>python中的魔术方法__</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85310/</value></title_url><post_desc><value>python中的魔术方法__:__ new__, __ init__, __ call__,__ del__</value></post_desc></item>
<item><title><value>Virtualenv + SublimeText 的Python开发环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85307/</value></title_url><post_desc><value>尝试了Docker, vagrant, virtualenv，这几个东西都可以实现创建一个较为干净的python开发环境，在尝试了他们之后在这里分享一下心得，仅供参考，这里假定读者也有以上工具的相关经验，不喜勿喷。</value></post_desc></item>
<item><title><value>与 Python 无缝集成：基本特殊方法（1）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85366/</value></title_url><post_desc><value>有许多特殊方法允许类与Python紧密结合，标准库参考将其称之为基本，基础或本质可能是更好的术语。这些特殊方法构成了创建与其他Python特性无缝集成的类的基础。</value></post_desc></item>
<item><title><value>Python 字符串格式化</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85319/</value></title_url><post_desc><value>对于一种语言，我们主张关注于用一种合适的方法来处理大部分的情况，Python字符串格式化却是一个另类，而且其越来越多样化。</value></post_desc></item>
<item><title><value>用 Python 导入一个 Docker 容器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85334/</value></title_url><post_desc><value>在将不同应用彼此分离的方面，Docker容器做的相当出色，但是怎样才能使得这些应用能够互相交互呢？</value></post_desc></item>
<item><title><value>Python 框架介绍</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85335/</value></title_url><post_desc><value>今天，有非常多的Python框架，用来帮助你更轻松的创建web应用。这些框架把相应的模块组织起来，使得构建应用的时候可以更快捷，也不用去关注一些细节（例如socket和协议），所以需要的都在框架里了。接下来我们会介绍不同的选项。</value></post_desc></item>
<item><title><value>使用 Python 读取 8 GB 大小的文件</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85265/</value></title_url><post_desc><value>如何使用Python读取1个8GB大小的文件,这个问题其实在笔试中会经常遇到的1个题目。在我们打开文件的时候并没有发生任何异常,而在我们调用read方法时才出现问题。我们知道,文件对象的read方法会尝试将所有内容以1行的形式读入,显然这种方式对于大文件是不可行的。</value></post_desc></item>
<item><title><value>我的Django项目中的权限机制</value></title><lei><value>框架</value></lei><title_url><value>http://python.jobbole.com/85261/</value></title_url><post_desc><value>本文主要介绍我在Django博客使用的权限设置，我的博客中几乎所有的权限设置都是我自己写的。这么做的原因是我在写Flask博客的时候，学到了一些这方面的知识，感觉很不错。因此就借鉴里面的逻辑，自己写了这方面的代码。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（四）：图像直方图和反向投影</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85257/</value></title_url><post_desc><value>当我们想比较两张图片相似度的时候，可以使用这一节提到的技术 直方图对比 反向投影 关于这两种技术的原理可以参考我上面贴的链接。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（五）：图像中边界和轮廓检测</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85253/</value></title_url><post_desc><value>关于边缘检测的基础来自于一个事实，即在边缘部分，像素值出现”跳跃“或者较大的变化。如果在此边缘部分求取一阶导数，就会看到极值的出现。 而在一阶导数为极值的地方，二阶导数为0。基于这个原理，就可以进行边缘检测。</value></post_desc></item>
<item><title><value>为什么 Django 能持续统治 Python 开发世界</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87986/</value></title_url><post_desc><value>对于 Python 开发者来说，web 开发框架真可谓玲琅满目。然而 Django , 毋庸置疑的成为最受青睐的 web 框架。通过本篇博客，我来为大家讲解下为什么相比 Flask、Pyramid、Tornado、Bottle、Diesel、Pecan、Falcon 这些流行的 Python web 框架，Python 开发者更倾向于选择 Django。</value></post_desc></item>
<item><title><value>浅析 Python 的类、继承和多态</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87983/</value></title_url><post_desc><value>几乎所有的特殊方法（包括 __init__）都是隐式调用的（不直接调用）。对一切皆对象的 Python 来说，类自己当然也是对象。</value></post_desc></item>
<item><title><value>Python 多进程实践</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85303/</value></title_url><post_desc><value>多进程的方式可以增加脚本的并发处理能力， python 支持这种多进程的编程方式.在类unix系统中， python的os 模块内置了fork 函数用以创建子进程</value></post_desc></item>
<item><title><value>R语言和 Python —— 一个错误的分裂</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/85304/</value></title_url><post_desc><value>“数据科学”的目标是从数据中得出有效的统计推论。标签“数据”看起来和使用什么样的数据无关，但这不对：它难到不可能——做科学却没有接近或得到个人数据，理解系统自身产生的缺陷，智能灵敏地处理伴随非理想状态的数据。</value></post_desc></item>
<item><title><value>自己写一个 wsgi 服务器运行 Django 、Tornado 等框架应用</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85296/</value></title_url><post_desc><value>前几天写了 浅谈cgi、wsgi、uwsgi 与 uWSGI 等一些 python web 开发中遇到的一些名词的理解，今天博主就根据 wsgi 标准实现一个 web server，并尝试用它来跑 Django、tornado 框架的 app。 </value></post_desc></item>
<item><title><value>一些实用的 python 小建议</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85297/</value></title_url><post_desc><value>给dict设置默认值 这样能设置所有key的默认值为[]，包括新添的key .列表去重的快速方法,列表深复制,时间转换相关,计算日期之差,使用map作iterator,判断奇数</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（三）：图像像素点操作</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85254/</value></title_url><post_desc><value>像素 有两种直接操作图片像素点的方法： 第一种办法就是将一张图片看成一个多维的list，例如对于一张图片im，想要操作第四行第四列的像素点就直接 im[3,3] 就可以获取到这个点的RGB值。 第二种就是使用 OpenCV 提供的 Get1D、 Get2D 等函数。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理视频（二）： 视频处理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85251/</value></title_url><post_desc><value>使用 Canny 算法边缘识别 Canny 算法是一种多级边缘识别算法。 Canny边缘识别算法可以分为以下5个步骤： 应用高斯滤波来平滑图像。找寻图像的强度梯度（intensity gradients）。应用非最大抑制（non-maximum suppression）技术来消除边误检。应用双阈值的方法来决定可能的（潜在的）边界。利用滞后技术来跟踪边界。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（八）：图像二值化处理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85246/</value></title_url><post_desc><value>图像二值化就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果。将256个亮度等级的灰度图像通过适当的阈值选取而获得仍然可以反映图像整体和局部特征的二值化图像。</value></post_desc></item>
<item><title><value>python 求职 Top10 城市，来看看是否有你所在的城市</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87980/</value></title_url><post_desc><value>本次以上篇文章“5分钟掌握智联招聘网站爬取并保存到MongoDB数据库”中爬取的数据为基础，分析关键词为“python”的爬取数据的情况，获取包括全国python招聘数量Top10的城市列表以及其他相关信息。</value></post_desc></item>
<item><title><value>5 分钟掌握智联招聘网站爬取并保存到 MongoDB 数据库</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87977/</value></title_url><post_desc><value>第一篇先来介绍数据采集，即用python爬取网站数据。</value></post_desc></item>
<item><title><value>那些有趣/用的 Python 库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87969/</value></title_url><post_desc><value>总有一款适合你。</value></post_desc></item>
<item><title><value>我用 Python 和 Twilio 实现自动化选课</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87948/</value></title_url><post_desc><value>用简单的程序监控选课，BeaitifulSoup 抓取课程空位，Twilio 发消息到手机，每隔一段时间运行一次。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理视频（三）： 标记运动轨迹</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85206/</value></title_url><post_desc><value>光流是进行视频中运动对象轨迹标记的一种很常用的方法，在OpenCV中实现光流也很容易。 CalcOpticalFlowPyrLK 函数计算一个稀疏特征集的光流，使用金字塔中的迭代 Lucas-Kanade 方法。</value></post_desc></item>
<item><title><value>Python数据结构——栈</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85204/</value></title_url><post_desc><value>栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。咖啡厅内的一摞盘子是现实世界中常见的栈的例子。只能从最上面取盘子，盘子洗净后，也只能摞在这一摞盘子的最上面。栈被称为一种后入先出（LIFO，last-in-first-out）的数据结构。</value></post_desc></item>
<item><title><value>Pyston 0.5 发布</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85190/</value></title_url><post_desc><value>Pyston发布0.5版，全面启用引用计数垃圾回收方式，改善了与已有CPython第三方库的兼容性。同时无缝支持NumPy 1.11.0。</value></post_desc></item>
<item><title><value>用ctypes观察Python对象的内存结构</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85291/</value></title_url><post_desc><value>在 Python 中一切皆是对象，而在实现 Python 的 C 语言中，这些对象只不过是一些比较复杂的结构体而已。本文通过 ctypes 访问对象对应的结构体中的数据，加深对 Python 对象的理解。</value></post_desc></item>
<item><title><value>scrapy入门教程3：scrapy的shell命令</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85289/</value></title_url><post_desc><value>scrapy目前的命令可以分为项目命令和全局命令两大类，共14种（嗯 ，我认真的数了两遍），分布也极其对称，项目级命令7种全局命令7种（嗯，我又认真的数了一遍）。</value></post_desc></item>
<item><title><value>理解Python中的线程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85287/</value></title_url><post_desc><value>我们将会看到一些在Python中使用线程的实例和如何避免线程之间的竞争。你应当将下边的例子运行多次，以便可以注意到线程是不可预测的和线程每次运行出的不同结果。声明：从这里开始忘掉你听到过的关于GIL的东西，因为GIL不会影响到我想要展示的东西。</value></post_desc></item>
<item><title><value>python(logging )日志模块学习</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85279/</value></title_url><post_desc><value>Logger：用于输出的日志的总对象。Handlers：用来指定log的输出方式。Formatters：设置日志信息的结构和内容格式，默认的时间格式为%Y-%m-%d %H:%M:%S。Filter：过滤器，用来过滤的输出内容（如：只输出debug以上的内容）</value></post_desc></item>
<item><title><value>scrapy入门教程1：scrapy环境配置以及安装</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85280/</value></title_url><post_desc><value>anaconda是一个开源的、免费的python类库的集合，貌似一装就安装了200+的包，各种依赖包各种搞定。所以赶快戳顶层链接去下载吧。下面介绍的其他工具一些是anaconda自带的，一些是通过anaconda安装的，总之，anaconda是一切的基石。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理视频（一）： 输入输出</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85247/</value></title_url><post_desc><value>视频的处理和图片的处理类似，只不过视频处理需要连续处理一系列图片。一般有两种视频源，一种是直接从硬盘加载视频，另一种是获取摄像头视频。</value></post_desc></item>
<item><title><value>Python 迭代器小结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85240/</value></title_url><post_desc><value>一直会用到迭代器和生成器这些概念，之前也是从其他人博客和书上学习了python中的迭代器和生成器，但是自己一直没有对这两个家伙进行总结，特此在这里总结。</value></post_desc></item>
<item><title><value>很全的 Python 面试题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85231/</value></title_url><post_desc><value>taizilongxu 综合整理的 Python 面试题</value></post_desc></item>
<item><title><value>python爬虫神器PyQuery的使用方法</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85222/</value></title_url><post_desc><value>PyQuery 来了，乍听名字，你一定联想到了 jQuery，如果你对 jQuery 熟悉，那么 PyQuery 来解析文档就是不二之选！包括我在内！PyQuery 是 Python 仿照 jQuery 的严格实现。语法与 jQuery 几乎完全相同，所以不用再去费心去记一些奇怪的方法了。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（六）：对象识别</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85223/</value></title_url><post_desc><value>特征识别 这里主要用到两个函数： GoodFeaturesToTrack 和 extractSURF GoodFeaturesToTrack: 在图像中寻找具有大特征值的角点。 SURF算法: 是一个稳健的图像识别和描述算法。</value></post_desc></item>
<item><title><value>永远别写for循环</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87832/</value></title_url><post_desc><value>为什么要挑战自己在代码里不写for loop？因为这样可以迫使你去使用比较高级、地道的语法或库。文中以python为例子，讲了不少大家其实在别人的代码里都见过、但自己很少用的语法。</value></post_desc></item>
<item><title><value>高效使用 Python 可视化工具 Matplotlib</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87831/</value></title_url><post_desc><value>Matplotlib是Python中最常用的可视化工具之一,可以非常方便地创建海量类型的2D图表和一些基本的3D图表。本文主要介绍了在学习Matplotlib时面临的一些挑战，为什么要使用Matplotlib，并推荐了一个学习使用Matplotlib的步骤。</value></post_desc></item>
<item><title><value>四个 Python 库，实现超实用的命令行功能</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87830/</value></title_url><post_desc><value>在二部曲系列文章的第二部分关于伟大的命令行 UI 终端应用文章中，我们探索了“提示工具包”，“命令行界面创建工具包“，“Pygments”和“模糊搜索”。</value></post_desc></item>
<item><title><value>Python 多线程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85177/</value></title_url><post_desc><value>现在的操作系统多是多任务操作系统。每个应用程序都有一个自己的进程。操作系统会为这些进程分配一些执行资源，例如内存空间等。在进程中，又可以创建一些线程，他们共享这些内存空间，并由操作系统调用，以便并行计算。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（一）：基本操作</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85178/</value></title_url><post_desc><value>图片读、写和显示操作 .图片显示： 第一种方式使用cv2.cv的LoadImage、ShowImage和SaveImage函数 </value></post_desc></item>
<item><title><value>scrapy入门教程2：建立一个简单的爬取南邮新闻标题的爬虫demo</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85281/</value></title_url><post_desc><value>通过上一篇内容我们已经将scrapy环境配置完毕，下面我们来实现一个demo来爬取南京邮电大学新闻页面的内容。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（七）：图像灰度化处理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85224/</value></title_url><post_desc><value>为了加快处理速度，在图像处理算法中，往往需要把彩色图像转换为灰度图像。灰度数字图像是每个像素只有一个采样颜色的图像，这类图像通常显示为从最暗黑色到最亮的白色的灰度。</value></post_desc></item>
<item><title><value>Django的一次请求到响应的流程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85203/</value></title_url><post_desc><value>本文主要介绍 Django 的从发起请求到响应的整个流程。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理视频（五）： 运动方向判断</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85208/</value></title_url><post_desc><value>在检测出运动的物体之后，我还需要知道运动的方向，使用了上一节中的办法检测运动我发现很难去计算运动方向，开始考虑通过计算轮廓的中点的变化来实现，但是因为每次检测出得轮廓的数量不稳定，所以这个办法会让误差不可控。</value></post_desc></item>
<item><title><value>Python-OpenCV 处理视频（四）： 运动检测</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85207/</value></title_url><post_desc><value>平均值法 通过计算两帧图像之间变化了的像素点占的百分比，来确定图像中是否有动作产生。 这里主要用到 Absdiff 函数，比较两帧图像之间有差异的点，当然需要将图像进行一些处理，例如平滑处理，灰度化处理.</value></post_desc></item>
<item><title><value>Python-OpenCV 处理图像（二）：滤镜和图像运算</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85179/</value></title_url><post_desc><value>喜欢自拍的人肯定都知道滤镜了，下面代码尝试使用一些简单的滤镜，包括图片的平滑处理、灰度化、二值化等.</value></post_desc></item>
<item><title><value>Python 黑魔法 --- 描述器（descriptor）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85176/</value></title_url><post_desc><value>Python黑魔法—描述器（descriptor）Python黑魔法，前面已经介绍了两个魔法，装饰器和迭代器，通常还有个生成器。生成器固然也是一个很优雅的魔法。生成器更像是函数的行为。而连接类行为和函数行为的时候，还有一个描述器魔法，也称之为描述符。</value></post_desc></item>
<item><title><value>我实现了一个人工机器学习写作器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85171/</value></title_url><post_desc><value>基于 Sikit-Learn/NLTK，根据训练语料自动生成文本。</value></post_desc></item>
<item><title><value>你不知道的按位运算</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85168/</value></title_url><post_desc><value>不用乘法，除法，求模运算来实现两个整数相除，看起来很简单，我可以用除数减去被除数，直到除数小于被除数，记录减法操作的次数即可。假设是计算m/n，那么时间复杂度为O(m/n)。用Python实现后，Time Limit Exceeded。我们考虑有没有更加优化的算法呢？</value></post_desc></item>
<item><title><value>使用 exec 函数时需要注意的一些安全问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85165/</value></title_url><post_desc><value>众所周知，在 python 中可以使用 exec 函数来执行包含 python 源代码的字符串: {代码…} exec 函数的这个功能很是强大，慎用。如果一定要用的话，那么就需要注意一下下面这些安全相关的问题。 全局变量和内置函…</value></post_desc></item>
<item><title><value>让我们一起来构建一个模板引擎（三）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85157/</value></title_url><post_desc><value>在 上篇文章 中我们的模板引擎实现了对 if 和 for 对支持，同时在文章的最后我给大家留了一个 问题：如何实现支持 include 和 extends 的标签功能。 在本篇文章中我们将一起来动手实现这两个功能。</value></post_desc></item>
<item><title><value>让我们一起来构建一个模板引擎（二）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85156/</value></title_url><post_desc><value>在 上篇文章中我们的模板引擎实现了变量和注释功能，同时在文章的最后我给大家留了一个 问题：如何实现支持 if 和 for 的标签功能: {代码…} 在本篇文章中我们将一起来实现这个功能。</value></post_desc></item>
<item><title><value>让我们一起来构建一个模板引擎（一）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85155/</value></title_url><post_desc><value>本系列文章要讲的就是如何从零开始实现一个这样的模板引擎</value></post_desc></item>
<item><title><value>Python多版本切换工具-Pyenv\virtualenv及Anaconda科学计算环境的配置</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85153/</value></title_url><post_desc><value>解决多python环境下，python版本切换的工具–pyenv应运而生。同时，另外一个工具virtualenv则提供了一种功能， 就是将一个目录建立为一个虚拟的python环境， 这样的话， 用户可以建立多个虚拟环境， 每个环境里面的python版本可以是不同的， 也可以是相同的， 而且环境之间相互独立。</value></post_desc></item>
<item><title><value>六款好用的Python IDE</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85147/</value></title_url><post_desc><value>“工欲善其事，必先利其器”，如果说编程是程序员的手艺，那么IDE就是程序员吃饭的家伙了。一这里收集了一些对开发者非常有帮助的，比较好的Python IDE。如果你有其他更好的推荐，请在评论区和大家分享一下！</value></post_desc></item>
<item><title><value>Python数据结构——双端队列</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85148/</value></title_url><post_desc><value>双端队列（Deque），是一种类似于队列的元素的有序集合。它拥有两端，队首和队尾，并且元素保持在当前的位置。双端队列的一个不同点就是，添加和删除元素的位置不受限制。新元素可以在队首或者队尾添加。同样地，双端队列中的元素可以从两端弹出。在某种意义上，这种混合的线性结构同时具有栈和队列的性质。</value></post_desc></item>
<item><title><value>用C语言扩展Python的功能</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85143/</value></title_url><post_desc><value>Pyton和C分别有着各自的优缺点，用Python开发程序速度快，可靠性高，并且有许多现成模块可供使用，但执行速度相对较慢；C语言则正好相反，其执行速度快，但开发效率低。为了充分利用两种语言各自的优点，比较好的做法是用Python开发整个软件框架，而用C语言实现其关键模块。本文介绍如何利用C语言来扩展Python的功能，并辅以具体的实例讲述如何编写Python的扩展模块。</value></post_desc></item>
<item><title><value>使用 exec 函数时需要注意的一些安全问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85135/</value></title_url><post_desc><value>众所周知，在 python 中可以使用 exec 函数来执行包含 python 源代码的字符串.exec 函数的这个功能很是强大，慎用。如果一定要用的话，那么就需要注意一下下面这些安全相关的问题。 </value></post_desc></item>
<item><title><value>exec 函数的 globals 和 locals 参数的用法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85134/</value></title_url><post_desc><value>exec 函数的 globals 和 locals 参数的用法</value></post_desc></item>
<item><title><value>利用装饰器给python的函数加上类型限制</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85123/</value></title_url><post_desc><value>作为一名python的脑残粉，请先跟我念一遍python大法好。 其作为动态语言的灵活，简介的代码，确实在某些情况下确实比其他编程语言要好。但你有没有想过，有时这些灵活的语法，可能会造成一些糟糕的体验。</value></post_desc></item>
<item><title><value>BetaMeow：利用机器学习做五子棋AI</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85034/</value></title_url><post_desc><value>前段时间AlphaGo和李世石广受关注，作为人工智能的脑残粉，看完比赛后激动不已，因为有一定的机器学习的基础，便打算撸一个棋类的AI，但我还算有点自知之明，围棋AI，甚至google打算做得通用AI是做不出的了，所以打算撸一个五子棋的AI。</value></post_desc></item>
<item><title><value>使用flask开发RESTful架构的api服务器端(1)–什么是RESTful和为什么选择flask</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85004/</value></title_url><post_desc><value>什么是RESTful和为什么选择flask</value></post_desc></item>
<item><title><value>使用flask开发RESTful架构的api服务器端(2)–flask的安装和使用</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85005/</value></title_url><post_desc><value>flask是一个纯python的web应用框架，使用python安装工具pip可以很方便的进行安装，如果开发环境中已经有了pip工具，那么可以迅速的安装完flask.</value></post_desc></item>
<item><title><value>使用flask开发RESTful架构的api服务器端(3)–简单的RESTful services</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85006/</value></title_url><post_desc><value>上一章中已经介绍了如何安装和使用flask，下面开始搭建一个RESTful架构的services了，RESTful架构在第一章中就已经进行了介绍，简单的说我们要用HTTP的4个方法来操作我们的服务器资源</value></post_desc></item>
<item><title><value>使用flask开发RESTful架构的api服务器端(4)–flask操作数据库</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85007/</value></title_url><post_desc><value>flask有一个对数据库的扩展flask-sqlalchemy，它简化了在flask中对sqlalchemy的操作，sqlalchemy是一个强大的关系数据库框架，支持一些数据库后端，提供高级的ORM和底层访问数据库的本地sql功能</value></post_desc></item>
<item><title><value>使用flask开发RESTful架构的api服务器端(5)–部署flask应用到nginx</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85008/</value></title_url><post_desc><value>flask只是一个web框架，提供用户便捷的开发方式，它并不是一个真正的web服务器程序，想要这个服务端应用能够支持高并发、高性能的访问，还是需要将flask应用部署到真正的web服务器上，nginx就是起到这个作用的</value></post_desc></item>
<item><title><value>你用 Python 做过什么有趣的数据挖掘项目？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84992/</value></title_url><post_desc><value>有网友在知乎提问：我最近刚开始学习 Python， numpy， scipy 等， 想做一些数据方面的项目，但是之前又没有这方面的经验。所以想知道大家都做过什么有趣的项目， 或者有什么好入手的方向推荐下。（本文是何明科的分享）</value></post_desc></item>
<item><title><value>零基础 20 分钟搭建 SAE 微信个人号后台</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84967/</value></title_url><post_desc><value>最近看到伯乐在线上有写配置微信后台的东西，用了不错的框架，看评论感觉没有讲怎么配置到云端有点可惜。刚好五一我给人写了一个SAE后台（MyPlatform），他给我的要求是文章列表、自动回复。我顺带还录了个配置视频给他，可谓二十分钟零基础配置。利用一下这个项目，我写了这篇文章，来介绍一下SAE上Python搭建的微信个人公众号后台的配置，希望能有所帮助。</value></post_desc></item>
<item><title><value>Python 类与元类的深度挖掘（2）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84986/</value></title_url><post_desc><value>上一篇解决了通过调用类对象生成实例对象过程中可能遇到的命名空间相关的一些问题，这次我们向上回溯一层，看看类对象本身是如何产生的。</value></post_desc></item>
<item><title><value>数据科学部门如何使用Python和R组合完成任务</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84984/</value></title_url><post_desc><value>和那些数据科学比赛不同，在真实的数据科学中，我们可能更多的时间不是在做算法的开发，而是对需求的定义和数据的治理。所以，如何更好的结合现实业务，让数据真正产生价值成了一个更有意义的话题</value></post_desc></item>
<item><title><value>Python爬虫建站入门手记（3）：采集入库</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84977/</value></title_url><post_desc><value>上回，我已经大概把爬虫写出来了。 我写了一个内容爬虫，一个爬取tag里面内容链接的爬虫 其实还差一个，就是收集一共有哪些tag的爬虫。但是这里先不说这个问题，因为我上次忘了 这次又不想弄。。</value></post_desc></item>
<item><title><value>Python爬虫建站入门手记（2）：编写爬虫</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84976/</value></title_url><post_desc><value>上回，我装了环境 也就是一对乱七八糟的东西 装了pip，用pip装了virtualenv，建立了一个virtualenv，在这个virtualenv里面，装了Django，创建了一个Django项目，在这个Django项目里面创建了一个叫做web的阿皮皮。</value></post_desc></item>
<item><title><value>Python爬虫建站入门手记（1）：环境搭建</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84975/</value></title_url><post_desc><value>从今天起，我将在这里更新一个系列的python简单爬虫到建立网站的实践手记。 内容将会从最简单的开始，环境搭建，基本爬虫，入库，用Django建立可供用户访问的网站，网站部署。 </value></post_desc></item>
<item><title><value>Python 的内置字符串方法（收藏专用）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85122/</value></title_url><post_desc><value>字符串处理是非常常用的技能，但 Python 内置字符串方法太多，常常遗忘，为了便于快速参考，特地依据 Python 3.5.1 给每个内置方法写了示例并进行了归类，便于大家索引。</value></post_desc></item>
<item><title><value>200 行代码实现简易版 2048 游戏</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84971/</value></title_url><post_desc><value>处理游戏主逻辑的时候我们会用到一种十分常用的技术：状态机，或者更准确的说是有限状态机（FSM）</value></post_desc></item>
<item><title><value>Python图像处理库Pillow入门</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84956/</value></title_url><post_desc><value>Pillow是Python里的图像处理库（PIL：Python Image Library），提供了了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。 </value></post_desc></item>
<item><title><value>Tornado异步笔记（1）：异步任务</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84944/</value></title_url><post_desc><value>Python的web框架名目繁多，各有千秋。正如光荣属于希腊，伟大属于罗马。Python的优雅结合WSGI的设计，让web框架接口实现千秋一统。WSGI 把应用（Application）和服务器（Server）结合起来。Django 和 Flask 都可以结合 gunicon 搭建部署应用。与 django 和 flask 不一样，tornado 既可以是 wsgi 应用，也可以是 wsgi 服务。</value></post_desc></item>
<item><title><value>Python 类与元类的深度挖掘</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84945/</value></title_url><post_desc><value>上一篇介绍了 Python 枚举类型的标准库，除了考虑到其实用性，还有一个重要的原因是其实现过程是一个非常好的学习、理解 Python 类与元类的例子。因此接下来两篇就以此为例，深入挖掘 Python 中类与元类背后的机制。</value></post_desc></item>
<item><title><value>Python dict sort排序 按照key，value</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85124/</value></title_url><post_desc><value>我们知道Python的内置dictionary数据类型是无序的。可是有时我们需要对dictionary中 的item进行排序输出，可能根据key，也可能根据value来排。到底有多少种方法可以实现对dictionary的内容进行排序输出呢？下面摘取了 一些精彩的解决办法。</value></post_desc></item>
<item><title><value>Scrapy爬虫 - 获取知乎用户数据</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85125/</value></title_url><post_desc><value>Scrapy爬虫 – 获取知乎用户数据。关于如何安装Python以及Scrapy框架，这里不做介绍，请自行网上搜索。</value></post_desc></item>
<item><title><value>Python “黑魔法” 之 Meta Classes</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85126/</value></title_url><post_desc><value>接触过 Django 的同学都应该十分熟悉它的 ORM 系统。对于 python 新手而言，这是一项几乎可以被称作“黑科技”的特性：只要你在models.py中随便定义一个Model的子类,开发之余，我也曾脑补过其背后的原理.</value></post_desc></item>
<item><title><value>Python “黑魔法” 之 Generator Coroutines</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85117/</value></title_url><post_desc><value>学过 Python 的都知道，Python 里有一个很厉害的概念叫做 生成器（Generators）。一个生成器就像是一个微小的线程，可以随处暂停，也可以随时恢复执行，还可以和代码块外部进行数据交换。恰当使用生成器，可以极大地简化代码逻辑。</value></post_desc></item>
<item><title><value>Python 中的枚举类型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84112/</value></title_url><post_desc><value>枚举类型可以看作是一种标签或是一系列常量的集合，通常用于表示某些特定的有限集合，例如星期、月份、状态等。Python 的原生类型（Built-in types）里并没有专门的枚举类型，但是我们可以通过很多方法来实现它，例如字典、</value></post_desc></item>
<item><title><value>Python的函数式编程，从入门到⎡放弃⎦</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84927/</value></title_url><post_desc><value>很早以前就听说过了函数式编程，印象中是一种很晦涩难懂的编程模式，但却一直没有去进行了解。恰好这周组内的周会轮到我主持，一时也没想到要分享什么。灵光一闪，就选定函数式编程这个主题吧，只需要讲解入门方面的知识就好。</value></post_desc></item>
<item><title><value>基于Python与Qt的快速GUI编程</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84935/</value></title_url><post_desc><value>这个应用程序是采用30行代码（不包括空白行与注释代码）编写的一个完整的“对话框样式”应用程序。“对话框样式”表示这个应用程序没有菜单栏，通常也没有工具栏或者状态栏，常见的情况是有一些按钮控件，但没有中心窗口控件（central widget）。</value></post_desc></item>
<item><title><value>手把手教你扩展个人微信号（1）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84918/</value></title_url><post_desc><value>现在的日常生活已经离不开微信，难免会生出微信有没有什么API可以使用的想法。那样就可以拿自己微信做个消息聚合、开个投票什么的，可是显然没有这种东西。不过还好，有网页版微信不就等于有了API么，这个项目就是出于这个想法出现的。</value></post_desc></item>
<item><title><value>可视化图的基本算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84902/</value></title_url><post_desc><value>关于图的基本表示与基本算法，包括图的邻接表和邻接矩阵表示法；图的广度优先（BFS）与深度优先（DFS）搜索算法；最小权生成树问题的 Kruskal 算法与 Prim 算法；单源最短路径的 Dijkstra 算法。</value></post_desc></item>
<item><title><value>python的一些误区</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85115/</value></title_url><post_desc><value>python是一门非常有趣的语言。它提供了许多非常方便的标准库和许多内置命令是我们轻松完成任务.但是好东西太多了就有选择恐惧症了，以至于我们不能很好第利用这个标准库和它的基本机构。下面列出了一些对python新手来说很简单有效的陷阱。</value></post_desc></item>
<item><title><value>python-文本处理和正则表达式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85113/</value></title_url><post_desc><value>这周在工作中遇到很多需要从一段字符中增删查改的工作，第一遍用自己写的脚本去做，结果是可重用性不高，而且效率也不太好。其中也用到了python中的正则表达式部分re,后来就想能不能将我遇到的这类问题全部用正则去解决，具体就是python的re模块。</value></post_desc></item>
<item><title><value>matplotlib 绘图可视化知识点整理</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85106/</value></title_url><post_desc><value>本文作为学习过程中对matplotlib一些常用知识点的整理，方便查找。 强烈推荐ipython无论你工作在什么项目上，IPython都是值得推荐的。利用ipython –pylab，可以进入PyLab模式，已经导入了matplotlib库与相关软件…</value></post_desc></item>
<item><title><value>关于Python类属性与实例属性的讨论</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85100/</value></title_url><post_desc><value>之所以想写这个文章是因为碰巧看到网上一篇关于Pyhon中类属性及实例属性区别的帖子。因为我之前也被这个问题困扰过，今天碰巧看到了这篇帖子，发现帖子的作者只是描述了现象，然后对原因的解释比较含糊。</value></post_desc></item>
<item><title><value>Python之美[从菜鸟到高手]--生成器之全景分析</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84903/</value></title_url><post_desc><value> yield指令，可以暂停一个函数并返回中间结果。使用该指令的函数将保存执行环境，并且在必要时恢复。生成器比迭代器更加强大也更加复杂，需要花点功夫好好理解贯通。</value></post_desc></item>
<item><title><value>Python快速搭建自动回复微信公众号</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84904/</value></title_url><post_desc><value>在之前的一篇文章 Python利用 AIML 和 Tornado 搭建聊天机器人微信订阅号 中用 aiml 实现了一个简单的英文聊天机器人订阅号。但是只能处理英文消息，现在用 图灵机器人 来实现一个中文的聊天机器人订阅号。</value></post_desc></item>
<item><title><value>用python生成验证码图片</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84905/</value></title_url><post_desc><value>基本上大家使用每一种网络服务都会遇到验证码，一般是网站为了防止恶意注册、发帖而设置的验证手段。其生成原理是将一串随机产生的数字或符号，生成一幅图片，图片里加上一些干扰象素（防止OCR）。下面就详细讲解如何生成验证码。</value></post_desc></item>
<item><title><value>在 Mac 上打包 PyQT 程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84897/</value></title_url><post_desc><value>有许多人使用 Python 来写图形化界面时选择了 PyQT，但是有许多人不知道如何将开发好的程序打包成为安装包，这篇文章我就来介绍一种非常简单的也是非常基础的在 MAC 下打包 PyQT 程序的方法。</value></post_desc></item>
<item><title><value>Python 和 R 数据分析/挖掘工具互查</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85101/</value></title_url><post_desc><value> 在此总结一些在数据分析/挖掘中可能用到的功能，方便大家索引或者从一种语言迁移到另一种。当然，这篇博客还会随时更新（不会另起一篇，为了方便大家索引），请大家如果有需要收藏到书签中。</value></post_desc></item>
<item><title><value>Python自然语言处理入门</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/85094/</value></title_url><post_desc><value>本文从概念和实际操作量方面，从零开始，介绍在Python中进行自然语言处理。</value></post_desc></item>
<item><title><value>深入 Python 字典的内部实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85040/</value></title_url><post_desc><value>字典是通过键（key）索引的，因此，字典也可视作彼此关联的两个数组。</value></post_desc></item>
<item><title><value>一种部署 Python 代码的新方法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85057/</value></title_url><post_desc><value>在Nylas，我们喜欢使用Python进行开发。它的语法简单并富有表现力，拥有大量可用的开源模块和框架，而且这个社区既受欢迎又有多样性。</value></post_desc></item>
<item><title><value>Python 浮点数运算</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85086/</value></title_url><post_desc><value>浮点数用来存储计算机中的小数，与现实世界中的十进制小数不同的是，浮点数通过二进制的形式来表示一个小数。在深入了解浮点数的实现之前，先来看几个 Python 浮点数计算有意思的例子。</value></post_desc></item>
<item><title><value>为什么会有 Python 3 的存在？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84890/</value></title_url><post_desc><value>Python 2 和 Python 3，一直是一个话题。Brett Cannon是Python的核心开发者，听听他关于Python3的看法。</value></post_desc></item>
<item><title><value>用Python爬取图片网站——基于BS4+多线程的处理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84887/</value></title_url><post_desc><value>我有一个朋友，喜欢在一个图站看图(xie)片(zhen)，光看就算了，他还有收集癖，想把网站的所有图片都下载下来，于是找我帮忙。本业余玩家经过【好久的】研究，终于实现，写成本教程。本人经济学专业，编程纯属玩票，不足之处请指出，勿喷，谢谢。</value></post_desc></item>
<item><title><value>Python的输入输出</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84875/</value></title_url><post_desc><value>我平常使用的编程语言主要是Fortran和Python，用于做数值计算，两种语言各具优势，Fortran更快，Python写起来更方便，更适合阅读，而且可以直接对数据进行可视化处理。</value></post_desc></item>
<item><title><value>深入 Flask 源码理解 Context</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84876/</value></title_url><post_desc><value>Flask 中的上下文对象 知乎问题 编程中什么是「Context(上下文)」 已经能够简单地说明什么是 Context，它是一个程序需要的外部对象，类似于一个全局变量。而这个变量的值会根据提供的值而改变。</value></post_desc></item>
<item><title><value>简单 12 步理解 Python 装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85056/</value></title_url><post_desc><value>好吧，我标题党了。作为 Python 教师，我发现理解装饰器是学生们从接触后就一直纠结的问题。那是因为装饰器确实难以理解！想弄明白装饰器，需要理解一些函数式编程概念，并且要对Python中函数定义和函数调用语法中的特性有所了解。</value></post_desc></item>
<item><title><value>当我学完Python我学了些什么</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85060/</value></title_url><post_desc><value>本文是本人学完Python后的一遍回顾，加深理解顺便留作手册以备查阅。学习Python的这几天来，觉得Python还是比较简单，容易上手的，就基本语法而言，但是有些高级特性掌握起来还是有些难度，需要时间去消化。</value></post_desc></item>
<item><title><value>由 sort 中 key 的用法浅谈 python</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85025/</value></title_url><post_desc><value>平时只是零碎的学习，也没有去读别人的代码，导致 Python 掌握不够深入。结果之前面试中回答没到点上。所以知耻而后勇，经过一段时间对 Python 的重新学习，才慢慢发现 Python 的一些强大与美妙之处。</value></post_desc></item>
<item><title><value>Python多线程详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/85050/</value></title_url><post_desc><value>Python多线程在IO密集型任务中还是很有用处的，而对于计算密集型任务，应该使用Python多进程。</value></post_desc></item>
<item><title><value>Python集合使用详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84870/</value></title_url><post_desc><value>我会在这篇文章介绍Python几种类型的集合。  在开始前，先定义集合是什么。一个集合就像篮子，你可以放进和取出东西，可以是同一类的东西，也可以是不同类的。基本上，它是个让你收集东西的存储结构。</value></post_desc></item>
<item><title><value>Python相对导入导致SystemError的解决方案（译）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84863/</value></title_url><post_desc><value>这个问题是如何解决在相对导入的时候，如果出现’System Error’的时候的解决方案。</value></post_desc></item>
<item><title><value>Python 中 Unicode 的正确用法</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84840/</value></title_url><post_desc><value>这一期就从UnicodeEncodeError 和 UnicodeDecodeError两个错误入手，分析 Python 中 Unicode 的正确用法。这篇短文并不能保证你可以永远杜绝上面两个错误，但是希望在下次遇到这个错误的时候知道错在哪里、应该从哪里入手。</value></post_desc></item>
<item><title><value>Python 中的字节与字节数组</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84839/</value></title_url><post_desc><value>介绍了 Python 中的字符串类型，字符串类型是对人类友好的符号，但计算机只认识一种符号，那就是二进制（binary）数，或者说是数字</value></post_desc></item>
<item><title><value>Flask中一次请求到响应的流程</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/85047/</value></title_url><post_desc><value>首先根据WSGI发送的environ变量获取请求上下文，主要是根据函数ctx = self.request_context(environ)，然后将该请求上下文推入全局变量_request_ctx_stack中（ctx.push()).</value></post_desc></item>
<item><title><value>【机器学习算法实现】logistic回归__基于Python和Numpy函数库</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/85041/</value></title_url><post_desc><value>【机器学习算法实现】系列文章将记录个人阅读机器学习论文、书籍过程中所碰到的算法，每篇文章描述一个具体的算法、算法的编程实现、算法的具体应用实例。争取每个算法都用多种语言编程实现。</value></post_desc></item>
<item><title><value>Python 探针实现原理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84838/</value></title_url><post_desc><value>本文将简单讲述一下 Python 探针的实现原理。 同时为了验证这个原理，我们也会一起来实现一个简单的统计指定函数执行时间的探针程序。 </value></post_desc></item>
<item><title><value>工具推荐：Scanner Routerhunter，路由器漏洞扫描器</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84837/</value></title_url><post_desc><value>我们会介绍一款自动挖掘路由器漏洞的测试工具，它能够自动化在互联网大范围搜索包含漏洞的路由，进行测试、进一步确认这些漏洞问题，其中会涉及D-link 的多款路由器。</value></post_desc></item>
<item><title><value>Python 字符串的格式化</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84841/</value></title_url><post_desc><value>相信很多人在格式化字符串的时候都用”%s” % v的语法，PEP 3101 提出一种更先进的格式化方法 str.format() 并成为 Python 3 的标准用来替换旧的 %s 格式化语法，CPython 从 2.6 开始已经实现了这一方法（其它解释器未考证）。</value></post_desc></item>
<item><title><value>Python 无处不在的 else</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84842/</value></title_url><post_desc><value>我们都知道 Python 中 else 的基本用法是在条件控制语句中的 if…elif…else…，但是 else 还有两个其它的用途，一是用于循环的结尾，另一个是用在错误处理的 try 中。</value></post_desc></item>
<item><title><value>Let’s Encrypt + Nginx + Tornado 开启 HTTPS</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84829/</value></title_url><post_desc><value>Tornado 建站配置流程：Let’s Encrypt + Nginx 开启 HTTPS，结合 GitHub Webhook 实现自动部署。</value></post_desc></item>
<item><title><value>如何使用Flask开发一个增删改查的应用</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84825/</value></title_url><post_desc><value>我们将创建一个简单的数据库驱动的笔记本应用。本教程面向想学习如何使用Flask开发网站或者web应用的初学者。在学习本教程之前，请先安装好Python和SQLite。</value></post_desc></item>
<item><title><value>深入对比数据科学工具箱：Python和R之争</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84821/</value></title_url><post_desc><value>在真实的数据科学世界里，我们会有两个极端，一个是业务，一个是工程。偏向业务的数据科学被称为数据分析（Data Analysis），也就是A型数据科学。偏向工程的数据科学被称为数据构建(Data Building)，也就是B型数据科学</value></post_desc></item>
<item><title><value>剖析勇士如何成为新赛季夺冠热门：基于Spark GraphFrames的金州勇士传球网络分析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84818/</value></title_url><post_desc><value>databricks 最近发布了 GraphFrames，这是一个用 DataFrames 封装图处理过程的Spark插件。 我评估了网络分析并且利用丰富的NBA.com的数据对金州勇士的传球网络进行可视化。</value></post_desc></item>
<item><title><value>使用python抓取婚恋网用户数据并用决策树生成自己择偶观</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84814/</value></title_url><post_desc><value>之前在世纪佳缘上爬取过类似的数据，总体的感觉是上面的用户数据要么基本不填要么一看就很假，周围的一些老司机建议可以在花田网上看下，数据质量确实高很多，唯一的缺点就是上面的数据不给爬，搜索用户的API需要登录，而且只显示三十多个用户的信息。</value></post_desc></item>
<item><title><value>人人都能用Python写出LSTM-RNN的代码！[你的神经网络学习最佳起步]</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84809/</value></title_url><post_desc><value>我的最佳学习法就是通过玩具代码，一边调试一边学习理论。这篇博客通过一个非常简单的python玩具代码来讲解递归神经网络。</value></post_desc></item>
<item><title><value>如何用Python写一个贪吃蛇AI</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84804/</value></title_url><post_desc><value>前这两天在网上看到一张让人涨姿势的图片，展示的是贪吃蛇游戏。如果仅仅是贪吃蛇游戏，那么它就没有什么让人涨姿势的地方了。 关键在于，它把矩形中出现的食物吃了个遍， 然后华丽丽地把整个矩形填满，真心是看得赏心悦目。</value></post_desc></item>
<item><title><value>Python趣味编程：定时给Ta讲笑话</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84796/</value></title_url><post_desc><value>大四的生活就是这么无聊，我琢磨着也学了这么多东西了，为啥不能用自己的知识来给生活找点乐子呢？我想反正每天都要给Ta问候一声早安，为何不同时讲个笑话呢？</value></post_desc></item>
<item><title><value>Django通道简要介绍</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84797/</value></title_url><post_desc><value>通道是 Django 即将支持的令人兴奋的特性，它将使得 Django 不止支持普通请求外部工具和库（即便不是 Python 的），还可能是整个框架。 </value></post_desc></item>
<item><title><value>Python 开发命令行工具</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84769/</value></title_url><post_desc><value>Python 作为一种脚本语言，可以非常方便地用于系统（尤其是*nix系统）命令行工具的开发。Python 自身也集成了一些标准库，专门用于处理命令行相关的问题。</value></post_desc></item>
<item><title><value>Python 字符串</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84770/</value></title_url><post_desc><value>今天和接下来几期的内容将主要关注 Python 中的字符串（str）、字节（bytes）及两者之间的相互转换（encode/decode）。也许不能让你突然间解决所有乱码问题，但希望可以帮助你迅速找到问题所在。</value></post_desc></item>
<item><title><value>函数调用的参数规则与解包</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84771/</value></title_url><post_desc><value>函数调用的参数规则与解包</value></post_desc></item>
<item><title><value>一个人人网python爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84772/</value></title_url><post_desc><value>不知道现在还有多少人在使用人人网，但是在我刚上大学的时候人人网还有开心网还是很火的，然而它们都相继死去了。倒是高中时喜欢玩的QQ空间依旧风生水起。但是毕竟在人人网上留下了很多东西，将来一不小心人人网关掉了，这些东西丢掉岂不是很可惜？</value></post_desc></item>
<item><title><value>用python实现模拟登录人人网</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84773/</value></title_url><post_desc><value>从OSI参考模型（从低到高：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层）来说，我们的互联网属于应用层。从TCP/IP参考模型（从低到高：物理层，数据链路层，网络层，传输层，应用层）来说，也同样如此。</value></post_desc></item>
<item><title><value>关于BeautifulSoup的总结</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84774/</value></title_url><post_desc><value>最近一直在用BeautifulSoup，但是语法很容易忘记。在这里做个学习总结吧。</value></post_desc></item>
<item><title><value>Python 工具包 werkzeug 初探</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84765/</value></title_url><post_desc><value>首先，先向大家介绍一下什么是 werkzeug，需要强调的是 werkzeug 不是一个web服务器，也不是一个web框架，而是一个工具包，官方的介绍说是一个 WSGI 工具包，它可以作为一个 Web 框架的底层库，因为它封装好了很多 Web 框架的东西，例如 Request，Response 等等。</value></post_desc></item>
<item><title><value>使用 voluptuous 校验数据</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84762/</value></title_url><post_desc><value>在 Python 中，我们经常需要对参数进行校验，这是我们有好多种方法，例如写很多 if 啊，或者写正则表达式啊等等，技巧高的人可以写得很巧妙，而技巧一般的人呢，可能会写得很冗长，例如我，经常就不能很好得处理参数校验的代码。</value><value>所以我就不断得寻找，终于最近发现了一个不错的 python 参数校验 lib，叫做 voluptuous。</value></post_desc></item>
<item><title><value>Flask config 在 flaskeleton 上的实践</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84759/</value></title_url><post_desc><value>Flask 很棒的特点之一就是可扩展性强，非常灵活，对于 config 来说也是如此。Flask官方文档中已经提及了非常多的方法，以及一些有用的建议。我在 Flask 项目开发中的 config 实践，则是基于文档中提到的类继承方案，并通过环境变量来切换不同的 config 配置。</value></post_desc></item>
<item><title><value>使用Python解析nginx日志文件</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84724/</value></title_url><post_desc><value>项目的一个需求是解析nginx的日志文件。</value></post_desc></item>
<item><title><value>Python 调用百度API</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84712/</value></title_url><post_desc><value>纸上得来终觉浅，绝知此事要躬行。今天稍微看了一下百度的API，试了一下如何调用那些API，发现其实是很容易的。</value></post_desc></item>
<item><title><value>Python爬虫: 抓取One网页上的每日一话和图</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84714/</value></title_url><post_desc><value>先说下需求：最近打算搜集点源数据，丰富下生活。嗯，最近看到One这个APP蛮好的。每天想你推送一张图和一段话。很喜欢，简单不复杂。而我想要把所有的句子都保存下来，又不想要每个页面都去手动查看。因此，就有了Python。</value></post_desc></item>
<item><title><value>Python爬虫：Xpath语法笔记</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84689/</value></title_url><post_desc><value>Python爬虫：Xpath语法笔记</value></post_desc></item>
<item><title><value>使用HMM实现简单拼音输入法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84747/</value></title_url><post_desc><value>之前写过一篇使用语言模型进行中文分词的博客，本篇在之前写的语言模型的基础上，通过隐马尔科夫模型实现简单的拼音输入法，即输入一组拼音，我们把它转换成中文。</value></post_desc></item>
<item><title><value>Flask信号机制(signals)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84748/</value></title_url><post_desc><value>本文介绍Flask的信号机制，讲述信号的用途，并给出创建信号、订阅信号、发送信号的方法。</value></post_desc></item>
<item><title><value>Python使用Mechanize模块编写爬虫的要点解析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84722/</value></title_url><post_desc><value>这篇文章主要介绍了Python使用Mechanize模块编写爬虫的要点解析,作者还讲解了Mechanize程序占用内存过高问题的相关解决方法,需要的朋友可以参考下</value></post_desc></item>
<item><title><value>python测试开发面试题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84723/</value></title_url><post_desc><value>python测试开发面试题：自动化面试试题1 试卷时间 60分钟，请不要在试卷上作答，用A4纸做答题纸作答。 </value></post_desc></item>
<item><title><value>Python Decorator的来龙</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84690/</value></title_url><post_desc><value>本文主要梳理了Python decorator的实现思路，解释了为什么Python decorator是现在这个样子。</value></post_desc></item>
<item><title><value>聊聊 Python 中的闭包</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84691/</value></title_url><post_desc><value>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</value></post_desc></item>
<item><title><value>Tornado+MongoDB 实现微信公众号自动回复</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84692/</value></title_url><post_desc><value>之前公众号有人关注之后会发送一些指令查询 PyTips，今天抽时间实现了一下微信公众号自动回复的功能。</value></post_desc></item>
<item><title><value>使用 Python 操作 Evernote API</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84685/</value></title_url><post_desc><value>Evernote本身就是很好的笔记应用，其API又赋予了我们更多的自由，值得花点时间尝试。本文将结合代码和理论，介绍如何使用这些API。在阅读完成本文后，你将能够完成类似PackMemo的程序。</value></post_desc></item>
<item><title><value>flask route设计思路</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84675/</value></title_url><post_desc><value>本文主要梳理了flask源码中route的设计思路。首先，从WSGI协议的角度介绍flask route的作用；其次，详细讲解如何借助werkzeug库的Map、Rule实现route；最后，梳理了一次完整的http请求中route的完整流程。</value></post_desc></item>
<item><title><value>flask 上下文的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84676/</value></title_url><post_desc><value>本文主要梳理了flask的current_app, request, session, g的实现原理,源码说明:本文使用flask 0.5 版本 </value></post_desc></item>
<item><title><value>计算机语言设计：列表的理解以及为什么它是有害的</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84313/</value></title_url><post_desc><value>本文将列举不同编程语言的几个小例子，尝试解释什么是列表解析。并且试图宣扬我的观点：“列表解析”不论从概念上还是技术上，完全是函数式编程的一根阑尾——多余而且某种程度上还是有害的。</value></post_desc></item>
<item><title><value>简单扯扯PyCharm4.5中新加的Python Profiler功能</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84307/</value></title_url><post_desc><value>对python开发者来说，相信大家对Jetbrains出的python编辑器PyCharm应该都有了解。对我自己来说，每天项目中都在用。自从半年前从C转到python之后直到现在依旧还在适应，适应这门语言，适应编辑器（不过也老怀恋CSharp和VS了，MS大法也很好！）。</value></post_desc></item>
<item><title><value>使用 Python 配合 Evernote 完成每周工作安排</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84671/</value></title_url><post_desc><value>近期看Evernote API的时候发现印象笔记对Python非常友好，就试了一下各类操作。</value><value>刚好一直觉得用过的那些备忘、代办软件功能太乱还不如拿记事本或者短信记。就用印象笔记写一个，反正摆脱不了印象笔记，就干脆都存在里面。</value></post_desc></item>
<item><title><value>使用 OpenCV 与 Face++ 实现人脸解锁</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84666/</value></title_url><post_desc><value>近几天微软的发布会上讲到了不少认脸解锁的内容，经过探索，其实利用手头的资源我们完全自己也可以完成这样一个过程。</value><value>本文讲解了如何使用Python，基于OpenCV与Face++实现人脸解锁的功能。</value></post_desc></item>
<item><title><value>Python 编码风格指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84618/</value></title_url><post_desc><value>本文超出 PEP8 的范畴以涵盖我认为优秀的 Python 风格。本文虽然坚持己见，却不偏执。不仅仅涉及语法、模块布局等问题，同时深入范式、组织及架构的领域。希望本文能成为精简版 Python 代码《风格的要素》。</value></post_desc></item>
<item><title><value>基于Scikit-Learn的五个文本分类案例研究</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84619/</value></title_url><post_desc><value>Scikit 是一个开源的 Python 机器学习库。主要涵盖了分类、回归分析、聚类等算法，具体包括支持向量机、随机森林、梯度提升（gradient boosting）、K-means 和 DBSCAN 等算法，同时也集成了  Python  的数据科学包 NumPy 和 SciPy。</value></post_desc></item>
<item><title><value>Python 分发工具初探之 setuptools</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84624/</value></title_url><post_desc><value>这篇文章主要介绍了一下 setuptools 是什么，以及它的功能和特点，并且介绍了如何使用它来创建和安装使用自己的包，这篇文章仅仅讲了最基本的功能和用法，一些对于进阶的用法会在下篇文章中进行介绍。</value></post_desc></item>
<item><title><value>使用Django-cachalot来缓存你的query</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84305/</value></title_url><post_desc><value>今天介绍个小工具，Django的插件—— `https://github.com/BertrandBordage/django-cachalot `_ (Django和抹香鲸？）。这个工具的主要应用场景就是自动帮你缓存你执行过的query结果，以此来帮助网站优化访问速度。毕竟同样查询没必要hit两次甚至多次数据库。</value></post_desc></item>
<item><title><value>gevent：轻松异步 I/O</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84301/</value></title_url><post_desc><value>gevent是一个使用完全同步编程模型的可扩展的异步I/O框架。gevent使用十分简单？让我们了解gevent的原理吧。</value></post_desc></item>
<item><title><value>简化 Django</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84293/</value></title_url><post_desc><value>尽管Django的流行和普及， 一些开发者仍然认为她是一个过时的web开发框架， 仅仅适合内容丰富的web程序。 然而现在大多数web程序往往不是富内容的， 这似乎让Django看起来不是最佳选择的web框架。那么让我们花点时间从现在的web开发实践中重新认识下她吧。</value></post_desc></item>
<item><title><value>分布式消息系统尝试(rabbitmq, celery, redis)</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84298/</value></title_url><post_desc><value>虽然自己已经封装了一套server的框架出来，但是毕竟还有太多的轮子需要自己制造，所以就想到了之前一直有了解过celery，来看一下这种基于message queue的任务系统能达到什么性能。</value></post_desc></item>
<item><title><value>爬虫技术:(JavaScript渲染)动态页面抓取超级指南</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84600/</value></title_url><post_desc><value>当我们进行网页爬虫时，我们会利用一定的规则从返回的HTML数据中提取出有效的信息。但是如果网页中含有JavaScript代码，我们必须经过渲染处理才能获得原始数据。此时，如果我们仍采用常规方法从中抓取数据，那么我们将一无所获。</value></post_desc></item>
<item><title><value>Python程序的执行原理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84599/</value></title_url><post_desc><value>Python先把代码（.py文件）编译成字节码，交给字节码虚拟机，然后虚拟机一条一条执行字节码指令，从而完成程序的执行。</value></post_desc></item>
<item><title><value>Python Flask vs Ruby Sinatra vs Go Martini vs Node Express</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84601/</value></title_url><post_desc><value>之所以选择Flask(Python), Sinatra(Ruby), Matini(Golang)和Express(Node)，主要是经验所限以及个人比较喜欢这类微型框架，下面我们就对各个框架在同等条件下的性能表现一探究竟。</value></post_desc></item>
<item><title><value>Python 分发工具初探之 setuptools 进阶</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84623/</value></title_url><post_desc><value>在上篇文章中我们知道了 setuptools 是什么，以及它基本的功能和用法。在这篇文章中，我们会介绍如何讲setuptools应用于稍大的项目中，通过 setuptools 控制包中的文件。</value></post_desc></item>
<item><title><value>OSX下的Python多版本管理器pyenv的安装设置</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84621/</value></title_url><post_desc><value>以OSX目前最新版本OSXEICapitan10.11.4为例。</value></post_desc></item>
<item><title><value>Python爬虫：一些常用的爬虫技巧总结</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84622/</value></title_url><post_desc><value>用python也差不多一年多了，python应用最多的场景还是web快速开发、爬虫、自动化运维：写过简单网站、写过自动发帖脚本、写过收发邮件脚本、写过简单验证码识别脚本。</value></post_desc></item>
<item><title><value>Python验证码识别：利用pytesser识别简单图形验证码</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84625/</value></title_url><post_desc><value>识别图形验证码可以说是做爬虫的必修课，涉及到计算机图形学，机器学习，机器视觉，人工智能等等高深领域.</value></post_desc></item>
<item><title><value>Python3.X入门和进阶书籍推荐</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84620/</value></title_url><post_desc><value>市面上Python3的书籍现在也很多了，但是Python2的也很多。笔者是喜欢Python3的，添加了很多实用的功能，也更规范化了，而且，现在很大一部分的库都有3.X的版本了，而不是像很多年前那样很多没有迁移。Python2，总是要慢慢淘汰的。</value></post_desc></item>
<item><title><value>一位算法师工程师的Spark机器学习笔记：构建一个简单的推荐系统</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84445/</value></title_url><post_desc><value>用户有海量选择：随着场景内item越来越多，用户越来越难以选择到合适的产品个性化场景。</value></post_desc></item>
<item><title><value>Python数据分析学习路径图（120天Get新技能）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84438/</value></title_url><post_desc><value>Python是一种面向对象、直译式计算机程序设计语言，由Guido van Rossum于1989年底发明。具有简单、易学、免费开源、可移植性、可扩展性等特点。</value></post_desc></item>
<item><title><value>如何让 Python 像 Julia 一样快地运行</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84432/</value></title_url><post_desc><value>从本文展示的几个小型基准测试可以得出：通过优化 Python 代码以及借助各种可用于让代码更快运行的 Python 工具，能够使 Python 的性能与 Julia 的性能不相上下。</value></post_desc></item>
<item><title><value>python中functools宝库下的partial</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84292/</value></title_url><post_desc><value>说说Python中的一个宝库functools中的一个函数——partial。partial ，单词的意思是“局部的，部分的”。单看这个词可能有些模糊，但是加上前面的functools，会不会有些明白？那个穿白衣服的同学，你来回答。你说不知道？</value></post_desc></item>
<item><title><value>建立一个更高级别的查询 API：正确使用Django ORM 的方式</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84288/</value></title_url><post_desc><value>在这篇文章里，我将以反模式的角度来直接讨论Django的低级ORM查询方法的使用。作为一种替代方式，我们需要在包含业务逻辑的模型层建立与特定领域相关的查询API，这些在Django中做起来不是非常容易，但通过深入地了解ORM的内容原理，我将告诉你一些简捷的方式来达到这个目的。</value></post_desc></item>
<item><title><value>在 Ubuntu 上使用 Nginx 部署 Flask 应用</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84286/</value></title_url><post_desc><value>Flask是一个轻量级的Python Web框架，Nginx是一个非常稳定的Web服务器，它们在廉价硬件平台上工作良好。在这篇文章中我将指导你完成使用Nginx服务器托管Flask应用的安装、配置过程。我所使用的操作系统是Ubuntu 13.04。</value></post_desc></item>
<item><title><value>使用 Flask 和 rauth 进行 Github Oauth 登陆</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84283/</value></title_url><post_desc><value>我在StackOverflow上请教了如何解决Flask-OAuth的问题 ，从rauth的作者那里得到回答，他建议试一下他写的库。本文就是对他及开源社区的回报。我写了这个真实的例子，告诉你如何使用Flask、rauth、Github和会话来对你的站点的用户进行认证。</value></post_desc></item>
<item><title><value>Python 列表推导</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84578/</value></title_url><post_desc><value>Python 提供列表推导（List Comprehension）的语法。最初学 Python 的时候，我只是把这种语法当做一种语法糖，可以用来快速构建特定的列表，后来学习 Haskell 的时候才知道这种形式叫做 List Comprehension。</value></post_desc></item>
<item><title><value>Python 中的函数式编程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84577/</value></title_url><post_desc><value>函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。</value></post_desc></item>
<item><title><value>四款工具顺利实现Python与JavaScript间的代码转换</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84566/</value></title_url><post_desc><value>热衷于Python？对JavaScript则不甚感冒？没问题，今天介绍的四款工具能够顺利对二者代码加以转换，从而保证Python在Web应用程序当中大显神威。</value></post_desc></item>
<item><title><value>Flask项目集成富文本编辑器CKeditor</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84565/</value></title_url><post_desc><value>本文介绍如何在Flask项目中集成富文本编辑器CKeditor，并实现图片上传、文件上传、视频上传等功能。 CKeditor是目前最优秀的可见即可得网页编辑器之一，它采用JavaScript编写。具备功能强大、配置容易、跨浏览器…</value></post_desc></item>
<item><title><value>如何用神经网络来恢复破损的密码？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84377/</value></title_url><post_desc><value>在这份教程中，我们将会学习到如何使用神经网络来恢复破损的密码。如果你对 DiscreteHopfield 网络算法不是很了解的话，你可以通过阅读这篇教程来加强了解。</value></post_desc></item>
<item><title><value>十分钟搞定pandas</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84416/</value></title_url><post_desc><value>这是关于pandas的简短介绍, 主要面向新用户. 可以参阅Cookbook了解更复杂的使用方法.</value></post_desc></item>
<item><title><value>使用Python监控Mac一天的运行(上)</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84390/</value></title_url><post_desc><value>统计Mac上面一天的运行情况,然后在每天的下午六点把统计的情况汇总通过Email发送给我.统计当前电脑的运行情况,CPU,内存,硬盘,网络使用状况,并且必须要有监控图。</value></post_desc></item>
<item><title><value>如何成为Python高手</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84383/</value></title_url><post_desc><value>并非所有的代码生来平等。有些代码可以被另外的任何一个好的程序员读懂和修改。但有些却只能被读，而且只能被代码的原始作者修改 —— 而且这也只是在他或她写出了这代码的几小时内可以。为什么会这样？因为没有经过代码测试(上面说的)和缺乏正确的编程规范。</value></post_desc></item>
<item><title><value>Python 的命名空间</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84380/</value></title_url><post_desc><value>Python 的命名空间。懒得扫全文的童鞋，可以直接跳到最后看总结。</value></post_desc></item>
<item><title><value>基于 matplotlib 的 2D/3D 抽象网格和能量曲线绘制程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87709/</value></title_url><post_desc><value>近在写文章需要绘制一些一维的能量曲线(energy profile)和抽象的二维和三维的网格来表示晶体用来描述自己的算法，于是自己在之前的脚本的基础上进行了整改写成了只提供接口的Python库,基本思想就是封装了matplotlib中相关接口，方便快速搭建和定制自己的能量曲线和网格结构, 代码托管在GitHub上并上传至PyPI。对于研究晶体材料的同学如果想通过python来绘制简单的晶格图像可以参考一下。</value></post_desc></item>
<item><title><value>Python爬虫之BeautifulSoup</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87702/</value></title_url><post_desc><value>Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码…</value></post_desc></item>
<item><title><value>Python: 函数与方法的区别 以及 Bound Method 和 Unbound Method</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87698/</value></title_url><post_desc><value>随着我们越来越频繁使用Python, 我们难免会接触到类, 接触到类属性和方法.但是很多新手包括我, 不知道方法 和 函数 的区别,这次简单来讨论下。</value></post_desc></item>
<item><title><value>webpy源码分析概览图</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84279/</value></title_url><post_desc><value>今天花了点时间把看了web.py的代码分析了一遍，稍稍的总结成一个图片，供有兴趣的人参考。 </value></post_desc></item>
<item><title><value>python性能调优的一次记录</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84276/</value></title_url><post_desc><value>最近在grahite上看到响应时间变得很长，虽说之前没有特意去优化性能，但是感觉也不应该这么差才对。</value></post_desc></item>
<item><title><value>Python wsgiref 模块源码浅析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84273/</value></title_url><post_desc><value>SimpleHTTPServer模块提供了创建一个http服务的例子。Pythonweb领域里却很少这么做，而是使用了另外一个协议–WSGI协议。Python的wisiref模块提供了demo_app，来演示如何使用wsgi协议。</value></post_desc></item>
<item><title><value>善用python的else子句</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84270/</value></title_url><post_desc><value>分支语句中的else子句在其它的条件不满足的时候会被执行到，适当的使用分支语句能够让我们的代码逻辑更加的丰富。</value></post_desc></item>
<item><title><value>使用Python进行无线攻击：第一部分</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84266/</value></title_url><post_desc><value>我们可以通过Python和Scapy实现绕过鉴权的攻击。本文将引出一系列讨论如何利用Python实现普通的无线攻击。</value></post_desc></item>
<item><title><value>程序员最想要的技术，Python 排第四</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84395/</value></title_url><post_desc><value>2016年1月中旬，Stack Overflow发起本年度的开发者调查。调查结果于近日公布，伯乐在线翻译组黄小非完整翻译了调查报告。本文盘点 Python 开发者应该会关心的部分数据。</value></post_desc></item>
<item><title><value>使用python进行web抓取</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84523/</value></title_url><post_desc><value>使用python进行web抓取。</value></post_desc></item>
<item><title><value>如何发布一个Python命令行工具</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84525/</value></title_url><post_desc><value>上次写的一个终端里面斗鱼TV弹幕Python版本和Ruby版本,并且发布到PIP和RubyGems上面.在发布PIP包的时候,居然Google不到一篇可以非常好的讲解这个流程的文章.于是整理这篇文章,并且方便后来自己检索,并且方便他人找资料.</value></post_desc></item>
<item><title><value>知乎精华回答的非专业大数据统计</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84524/</value></title_url><post_desc><value>入坑知乎三年有余，数月前灵光闪现，做个网页爬虫，专爬知乎下的精华回答，作统计分析。以下，即是此项目的分析结果，希望能从另一个角度呈现出不一样的知乎。</value></post_desc></item>
<item><title><value>关于背单词软件,你不知道的惊人真相</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84526/</value></title_url><post_desc><value>你想知道背单词软件有大概多少人注册第一天都没有背完嘛?你想知道背单词软件这么火,这么多人在使用,真的有多少人真的在背诵嘛?别急,Python程序员用数据给你说话.</value></post_desc></item>
<item><title><value>让Alfred支持拼音搜索</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84107/</value></title_url><post_desc><value>Alfred是个好东西，不过检索程序的时候不支持拼音搜索。如果Alfred能支持拼音搜索，这些问题全部都没了！而且，Alfred可以强制使用英文输入，直接使用字母检索，不用切换输入法了。</value></post_desc></item>
<item><title><value>SQLAlchemy 和其他的 ORM 框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84100/</value></title_url><post_desc><value>作为一个美妙的语言，Python 除了 SQLAlchemy 外还有很多ORM库。在这篇文章里，我们将来看看几个流行的可选 ORM 库，以此更好地窥探到Python ORM 境况。</value></post_desc></item>
<item><title><value>Pycrypto与RSA密码技术笔记</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84094/</value></title_url><post_desc><value>Pycrypto提供了比较完善的加密算法。RSA广泛用于加密与解密，还有数字签名通信领域。使用Publick/Private秘钥算法中，加密主要用对方的公钥，解密用自己的私钥。签名用自己的私钥，验签用对方的公钥。</value></post_desc></item>
<item><title><value>Ipython的一些高级用法(一)</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84245/</value></title_url><post_desc><value>以前在我的PPTpython高级编程也提到了一些关于ipython的用法. 今天继续由浅入深的看看ipython, 本文作为读者的你已经知道ipython并且用了一段时间了.</value></post_desc></item>
<item><title><value>Django 实现下载文件功能</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84242/</value></title_url><post_desc><value>有些时候，由于网站本身逻辑，需要通过Django提供下载功能，如页面数据导出功能（下载动态生成的文件）、先检查用户权限再下载文件等。因此，有必要研究一下文件下载功能在Django中的实现。</value></post_desc></item>
<item><title><value>用Descriptor来实现类级属性(Property)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84240/</value></title_url><post_desc><value>本篇文章通过一个Descriptor的使用场景再次给出一个案例，让不了解情况的同学可以更容易理解。</value></post_desc></item>
<item><title><value>理解 WSGI 框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84372/</value></title_url><post_desc><value>随着 web 不断发展，python application/framework 如雨后春笋般涌出，如：zope, webware, skunkweb 等等。但是它们的接口存在差异，导致难以跨 web server 运行，所以 python 社区定义了一种如 servlet API 般标准通用的接口——WSGI。</value></post_desc></item>
<item><title><value>python web 部署：nginx + gunicorn + supervisor + flask 部署笔记</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84355/</value></title_url><post_desc><value>pythonweb部署web开发中，各种语言争奇斗艳，web的部署方面，却没有太多的方式。简单而已，大概都是nginx做前端代理，中间webservice调用程序脚本。大概方式：nginx+webservice+scriptnginx.</value></post_desc></item>
<item><title><value>Flask-WTF进阶和WTForms扩展</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84356/</value></title_url><post_desc><value>Flask-WTF和Flask-SQLAlchemy都是很好用的插件，然而当它们结合到一起后，就不是那么美妙了.</value></post_desc></item>
<item><title><value>逐步提升程序质量的演变过程示例</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84357/</value></title_url><post_desc><value>如何编写高质量的程序呢？ 在《Web服务端软件的的服务品质概要》阐述了程序的常见质量属性及实现策略方法，本文将通过一个 Python 实现的图片文件批量重命名工具来演示如何逐步提升程序质量。</value></post_desc></item>
<item><title><value>Python的Sequence切片下标问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87694/</value></title_url><post_desc><value>在python中, 切片是一个经常会使用到的语法, 不管是元组, 列表还是字符串, 一般语法就是: sequence[ilow:ihigh:step] </value></post_desc></item>
<item><title><value>教你搭建一个好看的 Jupyter 环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87691/</value></title_url><post_desc><value>本文讲述如何搭建一个好看的jupyter环境。安装 jupyter 只需要安装 Anaconda 。</value></post_desc></item>
<item><title><value>你该学习 Python 的 7 个理由</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87688/</value></title_url><post_desc><value>我要向各位坦诚，我对 Python 的喜爱也是从几年以前才开始的。不经历长期的痛苦教训，我们是不会对这门语言及其平台所提供的一切心生感激的。我写下这篇短文的目的，就是要将你从同样的痛苦中拯救出来，让你明白为什么需要去了解 Python。</value></post_desc></item>
<item><title><value>Closure的应用和替代方案比较</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87685/</value></title_url><post_desc><value>本文介绍了python的closure机制的应用场景和一些替代的等效方案。</value></post_desc></item>
<item><title><value>一个Flask应用运行过程剖析</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87683/</value></title_url><post_desc><value>相信很多初学Flask的同学（包括我自己），在阅读官方文档或者Flask的学习资料时，对于它的认识是从以下的一段代码开始的……</value></post_desc></item>
<item><title><value>PyPy.js: 第一步</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84262/</value></title_url><post_desc><value>JavaScript做为一种任何地方都可运行且廉价的通用命名环境，逐渐地被塑造并迫使其成为一个相当完美的通用运行时环境。然而如果“互联网络是平台”，那么一个落伍的Python支持者做什么呢？当然是移植Python到JavaScript!</value></post_desc></item>
<item><title><value>使用Github webhook服务实现提PR自动检查Flake8并在对应位置发评论</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84259/</value></title_url><post_desc><value>最近参考linty_fresh实现了一个webhook服务, 提PR自动检查Flake8, 当有代码风格问题的时候,并在对应位置发评论。这个项目也是我的学习asyncio的练手作品, 吐槽下Type Hints让代码显的好丑哇…</value></post_desc></item>
<item><title><value>使用 Ansible 管理 CoreOS</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84255/</value></title_url><post_desc><value>这篇文章是关于使用 Ansible 管理 CoreOS 的基础技术。如果你熟悉 Ansible 和一些基本的 CoreOS知识有助于更好的理解下文 。</value></post_desc></item>
<item><title><value>使用 Python 的 Tkinter模块 开发 IRC 客户端</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84250/</value></title_url><post_desc><value>Python 的 GUI 模块很多，选择 Tkinter（以下简称Tk） 是因为 Python 自带、而且几个操作系统都支持。客户端的开发有两个步骤：界面开发 以及 与服务器对接。</value></post_desc></item>
<item><title><value>Python + Django 如何支撑了 7 亿月活用户的 Instagram？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87814/</value></title_url><post_desc><value>Instagram 在 Pycon 2017 年带来的演讲摘要。</value></post_desc></item>
<item><title><value>完全理解 Python 迭代对象、迭代器、生成器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87805/</value></title_url><post_desc><value>在了解Python的数据结构时，容器(container)、可迭代对象(iterable)、迭代器(iterator)、生成器(generator)、列表/集合/字典推导式(list,set,dict comprehension)众多概念参杂在一起，难免让初学者一头雾水，我将用一篇文章试图将这些概念以及它们之间的关系捋清楚。</value></post_desc></item>
<item><title><value>Python 函数中，参数是传值，还是传引用？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87801/</value></title_url><post_desc><value>在 C/C++ 中，传值和传引用是函数参数传递的两种方式，在Python中参数是如何传递的？回答这个问题前，不如先来看两段代码。</value></post_desc></item>
<item><title><value>Python 迭代器与生成器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/84527/</value></title_url><post_desc><value>PyTips项目地址：https://git.io/pytips迭代器与生成器迭代器（iterator）与生成器（generator）是Python中比较常用又很容易混淆的两个概念，今天就把它们梳理一遍，并举一些常用的例子。for语句与可迭代对象（iterableobject）：foriin[1,2,3]:print(i)123obj={“a”:123,”b”:456}forkinobj:print(k)ba这些可以用在for语句进行…</value></post_desc></item>
<item><title><value>写给 Python 程序员看的 Rust 介绍</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84522/</value></title_url><post_desc><value>这篇文章是 Flask 作者、资深 Python 开发者 Armin Ronacher 的作品，文章中比较了两者结构和行为的区别，这里擅自翻译以供大家学习 Rust 或者深入 Python，有些口语化的地方根据自己的理解做了一些意译。</value></post_desc></item>
<item><title><value>使用Python学习selenium测试工具</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84477/</value></title_url><post_desc><value>使用Python学习selenium测试工具</value></post_desc></item>
<item><title><value>Python __getattribute__ vs __getattr__ 浅谈</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84095/</value></title_url><post_desc><value>在github上读到一个开源项目sinaweibopy的源码才看的，代码挺有意思，正好当作一个实用的例子，来看看如何自定义实现gettattr让代码更加的动态优雅。</value></post_desc></item>
<item><title><value>关于 logging 的一些琐事</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84092/</value></title_url><post_desc><value>虽说 logging 模块都用了好久了，不过由于文档不够详细，每次都忍不住去搜索别人的文章，于是就干脆记录下来吧。</value></post_desc></item>
<item><title><value>python Django模板的使用方法</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84089/</value></title_url><post_desc><value>模板通常用于产生HTML，但是Django的模板也能产生任何基于文本格式的文档。</value></post_desc></item>
<item><title><value>Django权限机制的实现</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84086/</value></title_url><post_desc><value>权限机制能够约束用户行为，控制页面的显示内容，也能使API更加安全和灵活；用好权限机制，能让系统更加强大和健壮。因此，基于Django的开发，理清Django权限机制是非常必要的。</value></post_desc></item>
<item><title><value>Python 的 Magic Methods 指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84084/</value></title_url><post_desc><value>本指南是数月博客的总结。主题是魔术方法。什么是魔术方法呢？它们是面向对象Python语言中的一切。它们是你可以自定义并添加“魔法”到类中的特殊方法。</value></post_desc></item>
<item><title><value>在 Pylons 中使用 MongoDB 的例子</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84079/</value></title_url><post_desc><value>Pylons 虽是山寨 Rails 而生，但作为一个纯 Python 的 Web 框架，它有一个鲜明的特点：可定制性强。框架每一层都没重新发明轮子，而是尽量整合现有的 Python 库。</value></post_desc></item>
<item><title><value>Scrapy 示例 —— Web 爬虫框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84237/</value></title_url><post_desc><value>在这个教材中,我们假定你已经安装了Scrapy。假如你没有安装,你可以参考这个安装指南。我们将会用开放目录项目(dmoz)作为我们例子去抓取。</value></post_desc></item>
<item><title><value>游戏服务器端架构升级之路</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84234/</value></title_url><post_desc><value>这几天的心情非常好，主要原因是我们把服务器端的架构升级到了 2.0，这样最大的一个好处就是：Server重启完全不会影响外网服务。所以，也是想趁此机会，服务器端整个发展的历程，跟大家分享一下，干货比较多，框架代码也会全部开源：）</value></post_desc></item>
<item><title><value>用Python写一个简单的微博爬虫</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84349/</value></title_url><post_desc><value>我是个微博重度用户，工作学习之余喜欢刷刷timeline看看有什么新鲜事发生，也因此认识了不少高质量的原创大V，有分享技术资料的，有时不时给你一点人生经验的，有高产的段子手，有黄图黄段子小能手…好吧，我承认，爬黄图黄段子才是我的真实目的</value></post_desc></item>
<item><title><value>你应该使用 Django admin 的 9 个理由</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84340/</value></title_url><post_desc><value>Django 的 admin 绝对是软件中的亮点，可以有效的加速你的开发。这里有一些我能想到的很有用的 Django 的 admin 模块的窍门。</value></post_desc></item>
<item><title><value>关于进程监控及自动启动</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84338/</value></title_url><post_desc><value>做服务器端开发的同学应该都对进程监控不会陌生，最近恰好要更换 uwsgi 为 gunicorn，而gunicorn又恰好有这么一章讲进程监控，所以多研究了下。结合之前在腾讯工作的经验，也会讲讲腾讯的服务器监控是怎么做的。同时也会讲下小团队又该怎么敏捷的解决。</value></post_desc></item>
<item><title><value>从问题到探索--从slice说起</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84339/</value></title_url><post_desc><value>如果你是新手，你发现你对于别人说的一切都表示有疑问，那么恭喜你！你拥有大部分编程老手已经遗忘的能力——对细节的敏感。善于发现问题是一个很好的习惯，接触的东西多了，知道的东西多了，难免觉得什么都不是事，因此对一些东西会选择性的忽略。</value></post_desc></item>
<item><title><value>Python 30 行代码实现小型多线程任务队列</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84327/</value></title_url><post_desc><value>最近我在用梯度下降算法绘制神经网络的数据时，遇到了一些算法性能的问题。</value></post_desc></item>
<item><title><value>Flask中的请求上下文和应用上下文</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87680/</value></title_url><post_desc><value>在Flask中处理请求时，应用会生成一个“请求上下文”对象。整个请求的处理过程，都会在这个上下文对象中进行。这保证了请求的处理过程不被干扰。</value></post_desc></item>
<item><title><value>sqlalchemy入门(上)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87671/</value></title_url><post_desc><value>本文总结了常见的sqlalchemy的用法。</value></post_desc></item>
<item><title><value>Python 是慢，但我无所谓</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87673/</value></title_url><post_desc><value>优化你最贵的资源。那就是你，而不是计算机。选择一种语言/框架/架构来帮助你快速开发（比如 Python）。不要仅仅因为某些技术的快而选择它们。</value><value>当你遇到性能问题时，请找到瓶颈所在。你的瓶颈很可能不是 CPU 或者 Python 本身。</value></post_desc></item>
<item><title><value>GitHub上有趣的python资料</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84249/</value></title_url><post_desc><value>和大家分享一下我整理的有趣的GitHub repository。本文主题是Python，主要包括了Django、Flask和Raspberry Pi等。</value></post_desc></item>
<item><title><value>用 Python 写一个 NoSQL 数据库</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87797/</value></title_url><post_desc><value>NoSQL 这个词在近些年正变得随处可见. 但是到底 “NoSQL” 指的是什么? 它是如何并且为什么这么有用? 在本文, 我们将会通过纯 Python (我比较喜欢叫它, “轻结构化的伪代码”) 写一个 NoSQL 数据库来回答这些问题.</value></post_desc></item>
<item><title><value>单元测试学习</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87794/</value></title_url><post_desc><value>单元测试是个好东西，但是如果代码中多处有数据库访问（读/写），或者代码中包含一些复杂的对象，真实环境中难以被触发的对象的时候，该如何写单元测试呢？</value></post_desc></item>
<item><title><value>Python 创建单例模式的三种方式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87791/</value></title_url><post_desc><value>本文介绍 Python 创建单例模式的三种方式：使用装饰器、使用基类和使用元类。</value></post_desc></item>
<item><title><value>Python Virtualenv 介绍</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87786/</value></title_url><post_desc><value>动态语言Ruby、Python都有自己的虚拟环境，虚拟环境是程序执行时的独立执行环境，在同一台服务器中可以创建不同的虚拟环境供不同的系统使用，项目之间的运行环境保持独立性而相互不受影响。例如项目A在基于Python2的环境中运行，而项目B可以在基于Python3的环境中运行。Python通virtualenv工具管理虚拟环境。</value></post_desc></item>
<item><title><value>Python 资源大全</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84464/</value></title_url><post_desc><value>Awesome Python ，这又是一个 Awesome XXX 系列的资源整理，由 vinta 发起和维护。内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。</value></post_desc></item>
<item><title><value>Python基础知识：什么是非局部语句？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84465/</value></title_url><post_desc><value>有同学曾在微信中问小编什么是非局部语句（nonlocal statement），本文就是对此的回答，希望没有发的太晚。  非局部语句是Python 3.x中新引入的特性，可以让你给外层但非全局作用域中的变量赋值。</value></post_desc></item>
<item><title><value>AlphaGo背后的搜索算法：蒙特卡罗树搜索</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84459/</value></title_url><post_desc><value>本文的主题，就是AlphaGo能够成功击败专业棋手的功臣之一：蒙特卡罗树搜索（Monte Carlo Tree Search）。</value></post_desc></item>
<item><title><value>用K-means聚类算法实现音调的分类与可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84379/</value></title_url><post_desc><value>Galvanize 数据科学课程包括了一系列在科技产业的数据科学家中流行的机器学习课题，但是学生在 Galvanize 获得的技能并不仅限于那些最流行的科技产业应用。</value></post_desc></item>
<item><title><value>玩转 Python 3.5 的 await/async</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84175/</value></title_url><post_desc><value>PEP-0492 通过使用 async 关键字显式的对生成器和协程做了区分。本文旨在说明这些新的机制在底层是如何工作的。如果你对底层的概念感兴趣，关心这些底层功能如何能构建你自己的 asyncio 模块，那你会发现本文会有有意思。</value></post_desc></item>
<item><title><value>Python 编写的 在线多人多聊天室服务器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84173/</value></title_url><post_desc><value>使用python设计在线多人多聊天室服务器，模块的选择：使用asyncore和asynchat模块，实现多客户端的接入和服务器、客户端之间消息的传递。</value></post_desc></item>
<item><title><value>from ... import ... 执行机制</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84174/</value></title_url><post_desc><value>本文就来讲一讲Python中improt的执行机制。</value></post_desc></item>
<item><title><value>Epoll 模型简介</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84077/</value></title_url><post_desc><value>select的缺点之一就是在网络IO流到来的时候，线程会轮询监控文件数组，并且是线性扫描，还有最大值的限制。相比select，epoll则无需如此。服务器主线程创建了epoll对象，并且注册socket和文件事件即可。当数据抵达的时候，也就是对于事件发生，则会调用此前注册的那个io文件。</value></post_desc></item>
<item><title><value>不知道被谁删了微信好友？用 Python 来帮忙呀！</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84072/</value></title_url><post_desc><value>还在苦恼不知道被谁删了微信好友么？这里有个 gaosen 编写的工具，可帮到你。可以来试试。</value></post_desc></item>
<item><title><value>Python性能分析指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84069/</value></title_url><post_desc><value>虽然你所写的每个Python程序并不总是需要严密的性能分析，但是当这样的问题出现时，如果能知道Python生态系统中的许多种工具，这样总是可以让人安心的。分析一个程序的性能可以归结为回答4个基本的问题：1.它运行的有多块？2.那里是速度的瓶颈？3.它使用了多少内存？4.哪里发生了内存泄漏？</value></post_desc></item>
<item><title><value>Python 并发模型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84067/</value></title_url><post_desc><value>在 Python 中关于线程（Threads），微线程（Microthread）和绿色线程（Greenthread）这几个并发模型之间的具体差异是什么。</value></post_desc></item>
<item><title><value>Salt Stack 初探 之 另外一种用 Python 写的配置管理系统</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84232/</value></title_url><post_desc><value>想象一下你每次一台一台的登陆这些服务器，执行同样的命令在这些100台的服务器中并且编辑同一个配置文件，你可以想象吗？这是多么的苦逼！仅仅更新一下用户的密码策划就要用掉数天的时间，并且你可能出现错误的操作，怎么样通过一个命令一次完成所有服务器的操作？怎么解决？答案就是，Salt Stack！</value></post_desc></item>
<item><title><value>你需要知道的、有用的 Python 功能和特点</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84228/</value></title_url><post_desc><value>在使用Python多年以后，我偶然发现了一些我们过去不知道的功能和特性。一些可以说是非常有用，但却没有充分利用。考虑到这一点，我编辑了一些你应该了解的Python功能特色。</value></post_desc></item>
<item><title><value>Tornado 源码分析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84223/</value></title_url><post_desc><value>Tornado所谓的异步：就是你调用我之后，我发现数据没准备好，那我就不处理，而是跳到程序的其他地方继续执行，等数据准备好之后再切回来继续执行。Tornado的IOLoop就是一个总调度器，汇总了所有的events和callbacks，然后同步执行。这会整体生提升性能，但不会降低单个请求的响应时间。</value></post_desc></item>
<item><title><value>利用Python，四步掌握机器学习</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84326/</value></title_url><post_desc><value>为了理解和应用机器学习技术，你需要学习 Python 或者 R。这两者都是与 C、Java、PHP 相类似的编程语言。但是，因为 Python 与 R 都比较年轻，而且更加“远离”CPU，所以它们显得简单一些。</value></post_desc></item>
<item><title><value>打造自己的Python编码环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84323/</value></title_url><post_desc><value>趁着放假，重新配置了一下自己的Mac的编程环境，毕竟新年新气象嘛，主要是iTerm2、Zsh、Vim优化、Consolas字体、NoisyTyper，这些的相关配置。工欲利其事必先利其器，好的编码环境可以提升我们的打码的幸福感。</value></post_desc></item>
<item><title><value>GWPY：发现引力波的机构使用的Python包</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84318/</value></title_url><post_desc><value>美国科学家11日宣布，他们去年9月首次探测到引力波。这一发现印证了物理学大师爱因斯坦100年前的预言。宣布这一发现的，是激光干涉引力波天文台（LIGO）的负责人。  这个机构诞生于上世纪90年代，进行引力波观测已经有近30年。那么观测到的引力波数据的量应该很大，科学家如何对这些数据进行分析？有没有用到Python编程语言？</value></post_desc></item>
<item><title><value>普通反爬虫机制的应对策略</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87669/</value></title_url><post_desc><value>爬虫与反爬虫，这相爱相杀的一对，简直可以写出一部壮观的斗争史。这篇文章主要讨论使用Scrapy框架时，如何应对普通的反爬机制。</value></post_desc></item>
<item><title><value>Flask + Gunicorn + Nginx 部署</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87666/</value></title_url><post_desc><value>常用的WSGI容器有Gunicorn和uWSGI，但Gunicorn直接用命令启动，不需要编写配置文件，相对uWSGI要容易很多，所以这里我也选择用Gunicorn作为容器。</value></post_desc></item>
<item><title><value>如何开发一个 PyCharm 插件</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87660/</value></title_url><post_desc><value>PyCharm 是很多 Python 开发者优先选择的 IDE，功能强大，跨平台，提供免费社区版，非常良心。如果你想自己给PyCharm添加一些功能怎么办呢？</value></post_desc></item>
<item><title><value>Python中Mock的示例</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87656/</value></title_url><post_desc><value>一些常用的mock示例 先简单定义个类，方便举例： {代码…} 这个类里有两个成员方法，一个有参数，一个无参数。还有一个静态方法 mock成员方法……</value></post_desc></item>
<item><title><value>sqlalchemy 入门(下)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87782/</value></title_url><post_desc><value>接 sqlalchemy 入门(上)，这篇会更详细的讲解和演示如果用 SQLAlchemy 完成 Select, Update, Delete 的操作。</value></post_desc></item>
<item><title><value>LEGB 规则</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87778/</value></title_url><post_desc><value>理解LEGB前，首先需要对Python的作用域、命名空间有一定的了解，话题才能继续展开。</value></post_desc></item>
<item><title><value>Python多线程鸡年不鸡肋</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87772/</value></title_url><post_desc><value>python带有GIL解释器锁的概念，同一时刻只能有一个线程在运行，遇到IO操作才会释放切换。那么，python多线程是否真的很鸡肋呢？要解决这个疑惑，我想必须亲自动手测试。</value></post_desc></item>
<item><title><value>用Python和OpenCV来测量相机到目标的距离</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84378/</value></title_url><post_desc><value>几天前，一个叫 Cameron 的 PyImageSearch 读者发来邮件询问摄像头测距的方法。他花了一些时间研究，但是没有找到解决办法。我很能体会 Cameron 的感受。几年前我做过一个分析棒球离手飞向本垒的运动的小项目。</value></post_desc></item>
<item><title><value>两个命令把 Vim 打造成 Python IDE</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84166/</value></title_url><post_desc><value>运行下面两个命令，即可把 Vim（含插件）配置成 Python IDE。目前支持 MAC 和 Ubuntu。</value></post_desc></item>
<item><title><value>忘关烤箱了？我用 Python 和 OpenCV 来帮忙！</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84127/</value></title_url><post_desc><value>这篇文章应用计算机视觉和图像处理技术，展示了检测烤箱开关状态的过程。在生活中，有时你会粗心大意忘关烤箱之类的厨房电器，这潜在很大的危险。因此作者采用 Python 和 OpenCV，通过家庭摄像头获取的图像来自动识别烤箱是否开着，进而可以触发警报。</value></post_desc></item>
<item><title><value>2015年十佳第三方 Python 库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84126/</value></title_url><post_desc><value>新年到来时，我们常常会坐下来回想一下，过去一年我们都完成了些什么。如果没有开源社区的出色工作，提供了这些稳健的库，我们很多项目是无法完成的。</value></post_desc></item>
<item><title><value>使用 Twisted Python 和 Treq 进行 HTTP 压力测试</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84156/</value></title_url><post_desc><value>从事API相关的工作很有挑战性，在高峰期保持系统的稳定及健壮性就是其中之一，这也是我们在Mailgun做很多压力测试的原因。本文采用python进行“快速粗糙”却非常灵活的压力测试的方法。</value></post_desc></item>
<item><title><value>Python 模板引擎比较</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84063/</value></title_url><post_desc><value>做 Web 开发少不了要与模板引擎打交道。我陆续也接触了 Python 的不少模板引擎如pyTenjin、Tornado.template、PyJade、Mako和Jinja2，感觉可以总结一下。</value></post_desc></item>
<item><title><value>Select 模型简介</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84058/</value></title_url><post_desc><value>多路复用I/O在简明网络I/O模型文章可以知道常用的IO模型。其中同步模型中，使用多路复用I/O可以提高服务器的性能。在多路复用的模型中，比较常用的有select模型和poll模型。这两个都是系统接口，由操作系统提供。</value></post_desc></item>
<item><title><value>7 款 Python 数据图表工具的比较</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84218/</value></title_url><post_desc><value>本文会基于一份真实的数据，使用这些库来对数据进行可视化。通过这些对比，我们期望了解每个库所适用的范围，以及如何更好的利用整个 Python 的数据可视化的生态系统。我们在 Dataquest 建了一个交互课程，教你如何使用 Python 的数据可视化工具。如果你打算深入学习，可以点这里。</value></post_desc></item>
<item><title><value>用python为mysql实现restful接口</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84215/</value></title_url><post_desc><value>最近在做游戏服务分层的时候，一直想把mysql的访问独立成一个单独的服务DBGate。DBGate使用多进程模式，方便控制与mysql之间的链接数，进行mysql访问量阀值保护，并且方便在DBGate上进行访问量统计，慢查询统计、权限控制等等一系列逻辑。</value></post_desc></item>
<item><title><value>简化markdown写作中的贴图流程</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84213/</value></title_url><post_desc><value>markdown写作的时候，图片插入是一件比较麻烦的事情。常见的流程如下：用截图工具截图；将截图保存到某个地方修改截图文件名上传截图到某个图床（如果不用“围脖是个好图床”这样的工具，还得用客户端登陆）拿到图床上的截图的链接；然后用markdown格式插入图片…</value></post_desc></item>
<item><title><value>用datetime和pytz来转换时区</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84209/</value></title_url><post_desc><value>Python标准库里提供了time、datetime和calendar这3个模块来进行时间和日期的处理，其中应用最广的是datetime，而转换时区也是靠它来做的。</value></post_desc></item>
<item><title><value>粗谈Python内置库itertools</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84206/</value></title_url><post_desc><value>官方对itertools的定义是Functionscreatingiteratorsforefficientlooping，定义了一系列的方法，能帮助我们创建能够进行高效遍历迭代的迭代器，里面包含不少有意思并且有用的方法，比如像chain,izip/izip_long…</value></post_desc></item>
<item><title><value>在Windows平台使用IIS部署Flask网站</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87655/</value></title_url><post_desc><value>在 Windows 平台部署基于 Python 的网站是一件非常折腾的事情，Linux/Unix 平台下有很多选择，本文记录了 Flask 部署到 IIS 的主要步骤，希望对你有所帮助。 </value></post_desc></item>
<item><title><value>Python 多进程并行编程实践: mpi4py 的使用</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87650/</value></title_url><post_desc><value>在高性能计算的项目中我们通常都会使用效率更高的编译型的语言例如C、C++、Fortran等，但是由于Python的灵活性和易用性使得它在发展和验证算法方面备受人们的青睐于是在高性能计算领域也经常能看到Python的身影了。本文简单介绍在Python环境下使用MPI接口在集群上进行多进程并行计算的方法。</value></post_desc></item>
<item><title><value>Python 多进程并行编程实践: multiprocessing 模块</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87645/</value></title_url><post_desc><value>本文主要尝试仅仅通过python内置的multiprocessing模块对自己的动力学计算程序来进行优化和效率提升，其中:1.实现了单机利用多核资源来实现并行并进行加速对比, 2.使用manager模块实现了简单的多机的分布式计算本文并不是对Python的multiprocessing模块的接口进行翻译介绍，需要熟悉multiprocessing的童鞋可以参考官方文档.</value></post_desc></item>
<item><title><value>Python笔记之SqlAlchemy使用</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87641/</value></title_url><post_desc><value>SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</value></post_desc></item>
<item><title><value>Python协程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87767/</value></title_url><post_desc><value>本文将先介绍协程的概念，然后分别介绍Python2.x与3.x下协程的用法，最终将协程与多线程做比较并介绍异步爬虫模块。</value></post_desc></item>
<item><title><value>【Multiprocessing系列】Process</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87761/</value></title_url><post_desc><value>利用multiprocessing.Process对象可以创建一个进程，该Process对象与Thread对象的用法相同，也有start(), run(), join()等方法。</value></post_desc></item>
<item><title><value>【Multiprocessing系列】Multiprocessing基础</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87760/</value></title_url><post_desc><value>multiprocessing是Python的标准模块，它既可以用来编写多进程，也可以用来编写多线程。如果是多线程的话，用multiprocessing.dummy即可，用法与multiprocessing基本相同。</value></post_desc></item>
<item><title><value>Python 链式赋值的坑</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87757/</value></title_url><post_desc><value>什么是链式赋值呢？在Python中，链式赋值又有哪些坑？</value></post_desc></item>
<item><title><value>Python工程师面试题集合</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84153/</value></title_url><post_desc><value>Python面试题集合，主要是语法、Web相关的知识点！</value></post_desc></item>
<item><title><value>通过 Python 装饰器实现DRY(不重复代码)原则</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84151/</value></title_url><post_desc><value>Python装饰器是一个消除冗余的强大工具。随着将功能模块化为大小合适的方法，即使是最复杂的工作流，装饰器也能使它变成简洁的功能。</value></post_desc></item>
<item><title><value>飞跃式发展的后现代 Python 世界</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84148/</value></title_url><post_desc><value>如果现代Python有一个标志性特性，那么简单说来便是Python对自身定义的越来越模糊。在过去的几年的许多项目都极大拓展了Python，并重建了“Python”本身的意义。</value></post_desc></item>
<item><title><value>听技术播客：一边学Python编程一边学英语</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84145/</value></title_url><post_desc><value>编程派认为，好的播客节目能加深自己对一门技术及其相关生态系统的认识，同时也能了解一些技术圈内大牛。因此，写这篇文章的目的，就是想为Python编程学习者推荐几个优质的Python播客。</value></post_desc></item>
<item><title><value>Python 编译：code对象 与 pyc文件</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84057/</value></title_url><post_desc><value>运行程序当在shell中敲入pythonxx.py运行Python程序时，就是激活了Python解释器。Python解释器并不会立即运行程序，而是会对Python程序的源代码进行编译，产生字节码，然后将字节码交给虚拟机一条条顺序执行。</value></post_desc></item>
<item><title><value>Python mixin模式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84052/</value></title_url><post_desc><value>Mixin模式是一种在python里经常使用的模式，适当合理的应用能够达到复用代码，合理组织代码结构的目的。</value></post_desc></item>
<item><title><value>使用 Docker 作为 Python 开发环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84043/</value></title_url><post_desc><value>本文中，我将尝试展示用Docker开发python应用（主要是Web应用）的可行方法。虽然我本人专注于Python的Flask微框架，但本文目的是演示如何通过Docker更好地开发和共享应用程序，（由任何语言和框架开发的应用程序）。Docker通过封装依赖项，大大减少了开发环境和正式产品的差距。</value></post_desc></item>
<item><title><value>异步任务神器 Celery 简明笔记</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84041/</value></title_url><post_desc><value>异步任务异步任务是web开发中一个很常见的方法。对于一些耗时耗资源的操作，往往从主应用中隔离，通过异步的方式执行。简而言之，做一个注册的功能，在用户使用邮箱注册成功之后，需要给该邮箱发送一封激活邮件。</value></post_desc></item>
<item><title><value>Python 优化第一步: 性能分析实践</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87621/</value></title_url><post_desc><value>本文主要介绍Python内置的性能分析器的优雅使用方法，并以作者的一个化学动力学的程序为例子进行性能分析实践, 介绍了常用的性能分析可视化工具的使用，最后对Python程序进行初步的性能优化尝试。</value></post_desc></item>
<item><title><value>在终端中优雅地编写 Python</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87617/</value></title_url><post_desc><value>本文简要介绍了作者配置Vim和Tmux方便自己在终端中更优雅的编写Python。本文是有关配置的文章，并不对Vim的核心技巧进行说明，有需要的童鞋可以参考文档和相关书籍。</value></post_desc></item>
<item><title><value>提高你的Python: 解释 yield 和 Generators（生成器）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87613/</value></title_url><post_desc><value>有事实表明，在我花了大功夫后，有些人仍然不能理解生成器和yield关键字。我想让这个问题有所改善。在这篇文章中，我将解释yield关键字到底是什么，为什么它是有用的，以及如何来使用它。</value></post_desc></item>
<item><title><value>python单进程能否利用多核cpu的测试结论</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84205/</value></title_url><post_desc><value>以前也是奉为真理，直到今天在对自己的python server做性能测试的时候，发现一个python进程的cpu居然达到了120%。当用c++编程的时候，如果使用多线程，那么确实进程cpu超过100%非常正常，但是对python来说，似乎这样就和网上的文章冲突了。所以还是决定自己亲身试验一下。</value></post_desc></item>
<item><title><value>bpython：功能强大的Python shell</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84196/</value></title_url><post_desc><value>Python是一个非常实用、流行的解释型编程语言，其优势之一就是可以借助其交互的shell进行探索式地编程。但是Python自带的shell也有一些局限性， 好在强大的Python社区对默认shell进行了扩展。今天我就为大家介绍其中较为优秀的一款 — bpython。</value></post_desc></item>
<item><title><value>OSINT + Python = 自定义黑客</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84197/</value></title_url><post_desc><value>Internet是巨大的，它收容了所有不可思议的信息，这也是为什么OSINT技术对搜集，分析和呈现这些信息是至关重要的。在这个课程中，我觉得与会者对学习怎样开发出简单的工具（脚本）是很感兴趣的，这使得他们可以通过使用Python，通过每个有特定目标的一系列实践锻炼，去执行OSINT工作。</value></post_desc></item>
<item><title><value>2015年出现的十大流行Python库</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84194/</value></title_url><post_desc><value>Python编程语言的一大优势，就在于其丰富的第三方库。经过过去一年的时间，Python的世界中又涌现出了哪些优秀的第三方库呢？在本文中，我将给大家介绍2015年新出现的十大Python开发库。这里比较的范围，指的是在2015新开发或创建的第三方库。</value></post_desc></item>
<item><title><value>加速你的 Python 代码</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84036/</value></title_url><post_desc><value>python社区分为了三个流派，分别是python 2.x组织，3.x组织和PyPy组织。这个分类基本上可以归根于类库的兼容性和速度。这篇文章将聚焦于一些通用代码的优化技巧以及编译成C后性能的显著提升，当然我也会给出三大主要python流派运行时间。</value></post_desc></item>
<item><title><value>使用Python语言编写简单的HTML5语法解析器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84026/</value></title_url><post_desc><value>通过使用Python语言编写一个简单的HTML5语法解析器作为例子,探讨了在设计手写的递归下降语法解析器程序时需要注意的一些事项。</value></post_desc></item>
<item><title><value>初探 Python 3 的异步 IO 编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84025/</value></title_url><post_desc><value>从 Python 3.4 开始，标准库里又新增了 asyncio 这个模块。从原理上来说，它和 Tornado 其实差不多，都是注册 IO 事件，然后在 IO loop 中等待事件发生，然后调用相应的处理函数。不同之处在于 Python 3 增加了一些新的特性，而 Tornado 需要兼容 Python 2，所以写起来会比较麻烦。</value></post_desc></item>
<item><title><value>仿真入门：几行 Python 代码实现复杂社会动力学</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87570/</value></title_url><post_desc><value>本文是 2016 年数位人文会议（Digital Humanities conference，此会议也是该领域的顶会）的一篇教程，利用 Python 代码来建立简单的 Agent-based Model。</value></post_desc></item>
<item><title><value>Werkzeug库——routing模块</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87753/</value></title_url><post_desc><value>Werkzeug库的routing模块的主要功能在于URL解析。对于WSGI应用来讲，不同的URL对应不同的视图函数，routing模块则会对请求信息的URL进行解析并匹配，触发URL对应的视图函数，以此生成一个响应信息。</value></post_desc></item>
<item><title><value>Werkzeug库——wrappers模块</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87750/</value></title_url><post_desc><value>Werkzeug库中的wrappers模块主要对request和response进行封装。request包含了客户端发往服务器的所有请求信息，response包含了web应用返回给客户端的所有信息。wrappers模块对请求和响应的封装简化了客户端、服务器和web应用通信的流程。</value></post_desc></item>
<item><title><value>深入理解 GIL：如何写出高性能及线程安全的 Python 代码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87743/</value></title_url><post_desc><value>解读 CPython 源码，了解什么是 GIL，GIL 在 Python 中对多线程程序的影响，如何写出线程安全的 Python 代码。本文作者会在今年的 PyCon 上针对本文做演讲。</value></post_desc></item>
<item><title><value>Werkzeug库——local模块</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87738/</value></title_url><post_desc><value>在local模块中，Werkzeug实现了类似Python标准库中thread.local的功能。thread.local是线程局部变量，也就是每个线程的私有变量，具有线程隔离性，可以通过线程安全的方式获取或者改变线程中的变量。</value></post_desc></item>
<item><title><value>用Python浅析股票数据</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87733/</value></title_url><post_desc><value>本文将使用Python来可视化股票数据，比如绘制K线图，并且探究各项指标的含义和关系，最后使用移动平均线方法初探投资策略。</value></post_desc></item>
<item><title><value>基于用户的协同过滤算法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84143/</value></title_url><post_desc><value>如果我自己都不知道自己要找什么肿么办？最典型的例子就是，如果我打开豆瓣找电影，或者我去买说，我实际上不知道我想要买什么或者看什么，这时候推荐系统就可以派上用场了。</value></post_desc></item>
<item><title><value>Python 无间断部署</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84140/</value></title_url><post_desc><value>当你开始着手部署应用时，最简单的方式莫过于使用管理员身份重启my_app或者所有服务，使产品升级至当前版本。开始的时候一切都很好，但是最终你会发现一旦应用启动以后，在重启期间去尝试连接会得到众多HTTP 503 错误。</value></post_desc></item>
<item><title><value>Quora为何使用Python</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84133/</value></title_url><post_desc><value>不经意间在Quora看到这样一个问题：《Why did Quora choose Python for its development?》2名Quora的创始人给出了答案，我觉得很有参考价值，所以摘录在此。</value></post_desc></item>
<item><title><value>探索Python数据分析（一）：NLTK库和文本处理</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84130/</value></title_url><post_desc><value>用户输入的搜索关键词往往是模糊的，甚至包含大量的错词，我们无法直接使用这样的数据进行诸如分类、聚类等下一步分析工作，第一步是对它们进行词干提取。</value></post_desc></item>
<item><title><value>Redis实现简单消息队列</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84039/</value></title_url><post_desc><value>任务异步化打开浏览器，输入地址，按下回车，打开了页面。于是一个HTTP请求（request）就由客户端发送到服务器，服务器处理请求，返回响应（response）内容。我们每天都在浏览网页，发送大大小小的请求给服务器。有时候，服务器接到了请求，会发现他也需要给另外的服务器…</value></post_desc></item>
<item><title><value>爬虫模拟登录</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87283/</value></title_url><post_desc><value>爬虫模拟登录。scrapy+requests结合，使用requests模拟登录，使用scrapy进行爬取。</value></post_desc></item>
<item><title><value>2017 后端面试经历分享</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/87508/</value></title_url><post_desc><value>博主本人 2015 年毕业于某 985 大学通信工程系，因为大学期间一直自己创业所以错过了大四秋招春招，毕业后又在北京继续创业一年，但在创业公司一直无法沉淀技术累积，于16年年底萌生进大公司学习的想法，于是从16年年底开始通过社招找工作。虽然大学就开始做研发，但无奈简历只看毕业工作经验，所以本人简历只有一年工作经验。在此总结一篇文章给各位参考；</value></post_desc></item>
<item><title><value>Python 程序员需要知道的 30 个技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87605/</value></title_url><post_desc><value>如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。</value></post_desc></item>
<item><title><value>Python基本语法_集合set/frozenset_内建方法详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87597/</value></title_url><post_desc><value>集合是一种组合型的数据类型，分为可变的set和不可变的frozenset。</value></post_desc></item>
<item><title><value>SQLAlchemy入门（一）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87594/</value></title_url><post_desc><value>SQLAlchemy是Python的ORM框架，它的理念是：数据库的量级和性能重要于对象集合，而对象集合的抽象又重要于表和行。</value></post_desc></item>
<item><title><value>用Python多线程实现生产者消费者模式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87592/</value></title_url><post_desc><value>什么是生产者消费者模式 在软件开发的过程中，经常碰到这样的场景：某些模块负责生产数据，这些数据由其他模块来负责处理（此处的模块可能是：函数、线程、进程等）。</value></post_desc></item>
<item><title><value>使用 Python 生成二维条形码 QR Codes</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84192/</value></title_url><post_desc><value>我尝试了python-qrcode以及pyqrnative。我最后使用了一些以前写过的一个Photo Viewer程序的代码，然后稍微地修改了一下，就成了QRCode的查看器了。</value></post_desc></item>
<item><title><value>在 Python 中使用 Neo4j</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84190/</value></title_url><post_desc><value>Neo4j是面向对象基于Java的 ，被设计为一个建立在Java之上、可以直接嵌入应用的数据存储。本文重点介绍Python，这门语言的哲学与Java大大不同，同时展示py2neo库如何被用来建立一个简单的应用程序。</value></post_desc></item>
<item><title><value>Tornado 源码分析</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84188/</value></title_url><post_desc><value>简述源码分析基于Tornado2.0版本。这篇文章主要介绍 Tornado 基本执行流程，对 HTTP Request 的解析和处理，和 No-blocking I/O 在 Tornado 的具体应用。</value></post_desc></item>
<item><title><value>SQLAlchemy 使用经验</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84018/</value></title_url><post_desc><value>最近在用 Python 做一个网站。除了 Tornado ，主要还用到了 SQLAlchemy。这篇就是介绍我在使用 SQLAlchemy 的过程中，学到的一些知识。</value></post_desc></item>
<item><title><value>Tornado 使用经验</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84015/</value></title_url><post_desc><value>最近在做一个网站的后端开发。因为初期只有我一个人做，所以技术选择上很自由。在 web 服务器上我选择了 Tornado。虽然曾经也读过它的源码，并做过一些小的 demo，但毕竟这是第一次在工作中使用，难免又发现了一些值得分享的东西。</value><value>首先想说的是它的安全性，这方面确实能让我感受到它的良苦用心。这主要可以分为两点：</value></post_desc></item>
<item><title><value>用Python开发自动化测试脚本</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84012/</value></title_url><post_desc><value>Python的世界有一个开源框架Splinter，可以非常棒的模拟浏览器的行为（从某种意义上也可以说是人的访问点击行为）。Splinter提供了丰富的API，可以获取页面的信息，以判断当前的行为所产生的结果。</value></post_desc></item>
<item><title><value>用Python和py2app写独立的Mac OS X 应用</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84008/</value></title_url><post_desc><value>本教程中，我们将会使用 Python2 或 Python3 的Tkinter接口，结合py2app创建一个独立的 OSX 应用。</value></post_desc></item>
<item><title><value>使用 VASPy 快速处理 VASP 文件以及数据可视化</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87722/</value></title_url><post_desc><value>VASPy是一个纯Python编写的处理VASP文件数据以及进行数据快速可视化的库，基于OOP的思想提供了操作VASP文件的友好的接口，可以帮助使用者快速编写处理VASP相关文件的脚本，以提升效率。VASPy的项目仍处于起步阶段，希望大家可以都贡献出自己的力量使其壮大起来。</value></post_desc></item>
<item><title><value>星球大战与Python之间的那些事</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/84120/</value></title_url><post_desc><value>阔别十年时光，全球瞩目的第七部星球大战电影《原力觉醒》将于2016年1月9日在国内上映。它将重新燃起那段神秘的太空岁月与具有原力的宇宙时光。但是，星球大战和Python编程语言又有什么关系呢？</value></post_desc></item>
<item><title><value>用Python Pandas处理亿级数据</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84118/</value></title_url><post_desc><value>在数据分析领域，最热门的莫过于Python和R语言，此前有一篇文章《别老扯什么Hadoop了，你的数据根本不够大》指出：只有在超过5TB数据量的规模下，Hadoop才是一个合理的技术选择。这次拿到近亿条日志数据，千万级数据已经是关系型数据库的查询分析瓶颈，之前使用过Hadoop对大量文本进行分类，这次决定采用Python来处理数据。</value></post_desc></item>
<item><title><value>如何理解Nginx、uWSGI和Flask之间的关系？</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87588/</value></title_url><post_desc><value>之前对 Nginx，WSGI（或者 uWSGI，uwsgi），Flask(或者 Django），这几者的关系一存存在疑惑。通过查阅了些资料，总算把它们的关系理清了。</value></post_desc></item>
<item><title><value>Python标准库系列之Memcache模块</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87586/</value></title_url><post_desc><value>Memcache模块是一个Python操作memcached的一个API接口。本文基于tornado框架介绍Memcache模块的使用方法。</value></post_desc></item>
<item><title><value>Python算法实战系列之栈</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87581/</value></title_url><post_desc><value>栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。</value></post_desc></item>
<item><title><value>Python算法实战系列之队列</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87577/</value></title_url><post_desc><value>队列（queue），是先进先出（FIFO, First-In-First-Out）的线性表，在具体应用中通常用链表或者数组来实现，队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。</value></post_desc></item>
<item><title><value>一个Python小白5个小时爬虫经历</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87566/</value></title_url><post_desc><value>临时想了一下看看python到底是什么东东，不看基础语法，不看语言功能，直接上代码，哪里不会搜哪里。代码完成总共用时大概4个小时，其中搭建环境加安装……</value></post_desc></item>
<item><title><value>Flask使用小结</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84003/</value></title_url><post_desc><value>Flask框架是由Python语言编写的轻量级Web应用框架。本文是Flask的使用总结。</value></post_desc></item>
<item><title><value>Python实现同时兼容老版和新版Socket协议的一个简单WebSocket服务器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83997/</value></title_url><post_desc><value>最近在做的一个项目中需要使用到HTML5中引入的WebSocket技术，本来以为应该很容易就能搞定，谁知道在真正上手开发了以后才发现有很多麻烦的地方，虽然我们是一个以前端开发和设计见长的团队，而且作为一个二手程序猿又长期不被待见，但是为了让有同样需求的朋友少走些弯路，我还是决定把实现方法贴在这个地方。</value></post_desc></item>
<item><title><value>随机迷宫生成算法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83992/</value></title_url><post_desc><value>最近研究了下迷宫的生成算法，然后做了个简单的在线迷宫游戏。游戏地址和对应的开源项目地址可以通过上面的链接找到。开源项目中没有包含服务端的代码，因为服务端的代码实在太简单了。下面将简单的介绍下随机迷宫的生成算法。一旦理解后你会发现这个算法到底有多简单。</value></post_desc></item>
<item><title><value>让你的python程序同时兼容python2和python3</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83987/</value></title_url><post_desc><value>python邮件列表里有人发表言论说“python3在10内都无法普及”。在我看来这样的观点有些过于悲观，python3和python2虽然不兼容，但他们之间差别并没很多人想像的那么大。你只需要对自己的代码稍微做些修改就可以很好的同时支持python2和python3的。下面我将简要的介绍一下如何让自己的python代码如何同时支持python2和python3。</value></post_desc></item>
<item><title><value>Python编写的最短路径算法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83965/</value></title_url><post_desc><value>本文给大家分享的是python 无向图最短路径算法：请各位大大指教，继续改进。(修改了中文字符串，使py2exe中文没烦恼）,需要的朋友可以参考下</value></post_desc></item>
<item><title><value>Flask开发团队Pocoo的内部编码风格指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/84117/</value></title_url><post_desc><value>如何编写规范的Python代码？Python开发文档又该怎样写？Python官方提供的编码风格指南——PEP 8中，明确回答了上述两个问题。PEP 8内容虽然广泛， 但是大部分开发团队并没有止步于PEP 8中的要求。像Flask框架的开发团队Pocoo，就是在此基础上，编写了自己内部的编码规范，对PEP 8中的规定作了细微的调整，并进行了扩展延伸。我们一起来看看Pocoo团队会给出怎样的答案呢。</value></post_desc></item>
<item><title><value>以正确的方式开源 Python 项目</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/84113/</value></title_url><post_desc><value>每一个项目都是不同的，但其中将现有代码开源的流程对所有的Python项目都是类似的。本文将概述在开源Python项目我发现的有必要的步骤。</value></post_desc></item>
<item><title><value>七步精通Python机器学习</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/84108/</value></title_url><post_desc><value>本文旨在通过七个步骤，使用全部免费的线上资料，帮助新人获取最基本的 Python 机器学习知识，直至成为博学的机器学习实践者。这篇概述的主要目的是带领读者接触众多免费的学习资源。这些资源有很多，但哪些是最好的？哪些相互补充？怎样的学习顺序才最好？</value></post_desc></item>
<item><title><value>利用Python中的mock库对Python代码进行模拟测试</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83922/</value></title_url><post_desc><value>通常，服务对我们的应用来说是至关重要的，它们之间的交互是我们设计好的，但这会带来我们不希望的副作用——就是那些在我们自己测试的时候不希望的功能。Python的unittest库中有一个子包叫unittest.mock——或者你把它声明成一个依赖，简化为mock——这个模块提供了非常强大并且有用的方法，通过它们可以模拟或者屏敝掉这些副作用。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（实战二：恶搞俄罗斯方块3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83878/</value></title_url><post_desc><value>本文主要讲恶搞俄罗斯方块的数据和方法的设计。</value></post_desc></item>
<item><title><value>形象地解释 Python 中的列表解析</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/83884/</value></title_url><post_desc><value>有时候，如果一种编程设计模式想要“捍卫”自己独特的语法形态不被改变，就会把自己变成普遍的流行趋势。Python 的列表推导就是这样一个典型的语法糖的例子。</value></post_desc></item>
<item><title><value>Python 获取网易云音乐热门评论</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87562/</value></title_url><post_desc><value>经常一首歌曲下面会有一些被点赞众多的神评论。加上前些日子网易云音乐将精选用户评论搬上了地铁，网易云音乐的评论又火了一把。</value></post_desc></item>
<item><title><value>2017年的golang、python、php、c++、c、java、Nodejs性能对比</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/87559/</value></title_url><post_desc><value>本人在PHP/C++/Go/Py时，突发奇想，想把最近主流的编程语言性能作个简单的比较， 至于怎么比，还是不得不用神奇的斐波那契算法。可能是比较常用或好玩吧。</value></post_desc></item>
<item><title><value>Python实现Windows定时关机</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/87556/</value></title_url><post_desc><value>每当在别的地方找不到思路，总能在Python找到解决的办法。自动关机，在平时下载大文件，以及跑程序的时候能用到的……</value></post_desc></item>
<item><title><value>Python 开发者 2017 应该关注的 7 个类库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87552/</value></title_url><post_desc><value>在这篇博文中，我向大家揭示 7 个 Python 类库，其中不包括像 Django，Flask 等已广为熟知的库，这些类库在 2017 年可能值得 Python 开发者参考。</value></post_desc></item>
<item><title><value>你好，TensorFlow</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/87513/</value></title_url><post_desc><value>谷歌开源的深度学习库TensorFlow在这个领域绝对是一个巨大的宝藏，可是不知道如何下手？ 本文带你零基础创建和训练第一个 TensorFlow 图（Graph）。</value></post_desc></item>
<item><title><value>Python 的异步 IO：Asyncio 简介（一）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/87541/</value></title_url><post_desc><value>Python 的 asyncio 类似于 C++ 的 Boost.Asio。 所谓「异步 IO」，就是你发起一个 IO 操作，却不用等它结束，你可以继续做其他事情，当它结束时，你会得到通知。 </value></post_desc></item>
<item><title><value>Python中如何写控制台进度条的整理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83976/</value></title_url><post_desc><value>这篇文章主要介绍了Python显示进度条的方法,以实例的形式进行了详细的分析,是一个非常实用的技巧,需要的朋友可以参考下</value></post_desc></item>
<item><title><value>Python中的闭包总结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83969/</value></title_url><post_desc><value>在计算机科学中，闭包是词法闭包的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。这篇文章主要介绍了Python中的闭包总结,本文讲解了闭包的概念、为什么使用闭包、使用闭包实例等内容,需要的朋友可以参考下。</value></post_desc></item>
<item><title><value>初步理解Python进程的信号通讯</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83958/</value></title_url><post_desc><value>信号（signal）是 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。这篇文章主要介绍了初步理解Python进程的信号通讯,作者列举了Linux系统下的信号通讯示例,需要的朋友可以参考下。</value></post_desc></item>
<item><title><value>Python数据结构——链表的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83953/</value></title_url><post_desc><value>链表由一系列不必在内存中相连的结构构成，这些对象按线性顺序排序。每个结构含有表元素和指向后继元素的指针。是一种常用的数据结构，本文讲述了如何在python中实现链表结构。</value></post_desc></item>
<item><title><value>使用Python脚本在Linux下实现部分Bash Shell的教程</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83924/</value></title_url><post_desc><value>对于Linux用户来说，命令行的名声相当的高。不像其他操作系统，命令行是一个可怕的命题，但是对于Linux社区中那些经验丰富的大牛，命令行却是最值得推荐鼓励使用的。这篇文章主要介绍了使用Python脚本在Linux下实现部分Bash Shell的教程。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（实战二：恶搞俄罗斯方块2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83873/</value></title_url><post_desc><value>Pygame实战二——恶搞俄罗斯方块的代码构架。</value></post_desc></item>
<item><title><value>Python基础-列表及列表解析小结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83866/</value></title_url><post_desc><value>列表是Python中使用最频繁的数据类型。列表是一组有序项目的集合，可变的数据类型【可进行增删改查】；列表中可以包含任何数据类型，也可包含另一个列表【可任意组合嵌套】。</value></post_desc></item>
<item><title><value>使用 Python 生成基于马尔可夫链的伪随机文本</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83908/</value></title_url><post_desc><value>这篇文章主要介绍了在Python上基于Markov链生成伪随机文本的教程,是一个基于马尔可夫算法的小实现,充分体现了Python在科学计算中的用途,需要的朋友可以参考下。</value></post_desc></item>
<item><title><value>70 行 Python 代码编写一个递归下降解析器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83885/</value></title_url><post_desc><value>如果你使用针对算术表达式的hacks 的话，写一个计算机很简单。但是hacks的产生的后果也几乎总是一样的：解决方案不够优雅，不可扩展，并且很难直观的理解。我喜欢挑战，并且打算发一个有益的帖子，所以我决定用通用递归下降解析器来写它。这篇文章我将一步一步详细的解释一下。</value></post_desc></item>
<item><title><value>Python验证码识别处理实例</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83945/</value></title_url><post_desc><value>验证码图像识别技术主要是操作图片内的像素点,通过对图片的像素点进行一系列的操作,最后输出验证码图像内的每个字符的文本矩阵。本文讲述了一个python中验证码识别处理的实例。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（实战二：恶搞俄罗斯方块4）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83881/</value></title_url><post_desc><value>恶搞俄罗斯方块的制造之旅也可以结束了，通过上三次的说明，基本就整遍了整个代码，虽说都说了一些类名和方法名而没有涉及到具体的实现，不过实现就是排列几句代码，大家一定没问题吧：）</value></post_desc></item>
<item><title><value>Python 基于协同过滤的推荐</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83938/</value></title_url><post_desc><value>在 用户 —— 物品（user – item）的数据关系下很容易收集到一些偏好信息（preference），比如评分。利用这些分散的偏好信息，基于其背后可能存在的关联性，来为用户推荐物品的方法，便是协同过滤，或称协作型过滤（collaborative filtering）。这篇文章主要介绍了如何用Python实现协同过滤。</value></post_desc></item>
<item><title><value>如何使用 50 行 Python 代码制作一个计算器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83889/</value></title_url><post_desc><value>在这篇文章中，我将向大家演示怎样向一个通用计算器一样解析并计算一个四则运算表达式。当我们结束的时候，我们将得到一个可以处理诸如 1+2*-(-3+2)/5.6+3样式的表达式的计算器了。当然，你也可以将它拓展的更为强大。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（实战二：恶搞俄罗斯方块1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83862/</value></title_url><post_desc><value>Pygame实战二实现恶搞俄罗斯方块——俄罗斯方块，却有不是普通的俄罗斯方块。</value></post_desc></item>
<item><title><value>Python基础-元组小结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83863/</value></title_url><post_desc><value>元组是以圆括号“()”包围的数据集合，是一个不可变序列，可以看做不可变的列表，与列表不同：元组中数据一旦确立就不能改变（所以没有类似列表的增删改操作，只有基本序列操作）。元组支持任意类型，任意嵌套以及常见的序列操作。</value></post_desc></item>
<item><title><value>Hadoop中的Python框架的使用指南</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83855/</value></title_url><post_desc><value>这篇文章主要介绍了Hadoop中的Python框架的使用指南,Hadoop一般使用复杂的Java操作,但通过该框架使得Python脚本操作Hadoop成为了可能,需要的朋友可以参考下。</value></post_desc></item>
<item><title><value>Python 中的贪婪排名算法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83933/</value></title_url><post_desc><value>贪婪排名算法的工作原理就是先选择当前测试集的某一项的最优解，然后寻找下一项的最优解，依次进行…如果有两个以上的算法得出相同的执行结果，那么将以执行”时间“来比较两种算法优劣。这篇文章主要介绍了在Python中实现贪婪排名算法的教程，也是对学习算法的一个很好的演示，需要的朋友可以参考下。</value></post_desc></item>
<item><title><value>移植到 Python 3</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83848/</value></title_url><post_desc><value>经历移植jinja2到python3的痛苦之后，我把项目暂时放一放，因为我怕打破python3的兼容。我的做法是只用一个python2的代码库，然后在安装的时候用2to3工具翻译成python3。</value></post_desc></item>
<item><title><value>Python实践：模块自动重载</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83844/</value></title_url><post_desc><value>开发Web程序时，通常会采用本地服务器进行调试，但如果代码有变动，就需要重启服务器。开发过程中修改代码是经常的事，不断地重启服务器既麻烦又耗时。因此为了避免这种笨拙的行为，在流行的Web框架中，都提供了模块自动重载的功能：不用重启服务器，自动重新加载有变动的模块。本文的测试代码中采用while循环（独立进程）实现了自动重载。</value></post_desc></item>
<item><title><value>Python实践：提取文章摘要</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83839/</value></title_url><post_desc><value>在博客系统的文章列表中，为了更有效地呈现文章内容，从而让读者更有针对性地选择阅读，通常会同时提供文章的标题和摘要。一篇文章的内容可以是纯文本格式的，但在网络盛行的当今，更多是HTML格式的。无论是哪种格式，摘要 一般都是文章 开头部分 的内容，可以按照指定的字数来提取。</value></post_desc></item>
<item><title><value>深入理解异步Web服务器 Tornado</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83826/</value></title_url><post_desc><value>这篇文章的目的在于对Tornado这个异步服务器软件的底层进行一番探索。我采用自底向上的方式进行介绍，从轮训开始，向上一直到应用层，指出我认为有趣的部分。所以，如果你有打算要阅读Tornado这个web框架的源码，又或者是你对一个异步web服务器是如何工作的感兴趣，我可以在这成为你的指导。</value></post_desc></item>
<item><title><value>用Python写一个简单的Web框架</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83817/</value></title_url><post_desc><value>在Python中，WSGI（Web Server Gateway Interface）定义了Web服务器与Web应用（或Web框架）之间的标准接口。在WSGI的规范下，各种各样的Web服务器和Web框架都可以很好的交互。由于WSGI的存在，用Python写一个简单的Web框架也变得非常容易，本文尝试写一个类似web.py的Web框架，并重点实现了 URL调度。</value></post_desc></item>
<item><title><value>使用Python的Supervisor来管理进程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83799/</value></title_url><post_desc><value>Supervisor可以启动、停止、重启*nix系统中的程序。也可以重启崩溃的程序。本文介绍了如何利用python的supervisor来管理进程。</value></post_desc></item>
<item><title><value>用Python实现K-近邻算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83794/</value></title_url><post_desc><value>K-近邻算法就是采用测量不同特征值之间的距离方法来进行分类的机器学习算法。本文介绍了如何用python实现K-近邻算法。</value></post_desc></item>
<item><title><value>如何创建和使用Python CGI脚本</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83788/</value></title_url><post_desc><value>你是否想使用Python语言创建一个网页，或者处理用户从web表单输入的数据？这些任务可以通过Python CGI(公用网关接口)脚本以及一个Apache web服务器实现。当用户请求一个指定URL或者和网页交互(比如点击””提交”按钮)的时候，CGI脚本就会被web服务器启用。CGI脚本调用执行完毕后，它的输出结果就会被web服务器用来创建显示给用户的网页。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（19）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83630/</value></title_url><post_desc><value>让我们现在开始写一个3D的程序，巩固一下这几次学习的东西。因为我们还没有好好深入如何画3D物体，暂时就先用最简单的投影（上次讨论过的第二种）方法来画吧。</value></post_desc></item>
<item><title><value>用 Opencv 和 Python 对汪星人做模糊检测</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83702/</value></title_url><post_desc><value>本文展示如何用 OpenCV、Python 和拉普拉斯算子来计算图片中的模糊量。到文章结束，读者就能应用拉普拉斯方差算法来检测图片中的模糊量。</value></post_desc></item>
<item><title><value>Python招聘需求与技能体系</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/83638/</value></title_url><post_desc><value>目前国内的招聘Python，基本都是偏向web后台开发，偶有高大上的数据挖掘和机器学习。这是之前(2012年)找工作整理的内容，梳理几年来的笔记，顺带理一理。希望可以以此建立自己的技能体系。</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—地精排序及改进</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83728/</value></title_url><post_desc><value>地精排序又称侏儒排序，类似于插入排序，但是将一个数放入其正确位置的交换同冒泡排序（一系列交换）。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（实战一：涂鸦画板2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83786/</value></title_url><post_desc><value>本次我们就接着上一篇博文完成画板的颜色和按钮等功能。</value></post_desc></item>
<item><title><value>用 Python 做单词拼写检查</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83804/</value></title_url><post_desc><value>这几天在翻旧代码时发现以前写的注释部分有很多单词拼写错误，这些单词错得不算离谱，应该可以用工具自动纠错绝大部分。用 Python 写个拼写检查脚本很容易，如果能很好利用 aspell/ispell 这些现成的小工具就更简单了。 </value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—插入排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83726/</value></title_url><post_desc><value>插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（实战一：涂鸦画板1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83782/</value></title_url><post_desc><value>本文就来实现一个画板功能。画笔的话，基本的铅笔画笔加一个刷子画笔；提供几个候选色就好了！ OK，开始吧！</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—堆排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83722/</value></title_url><post_desc><value>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（Sprite篇）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83775/</value></title_url><post_desc><value>本文就来介绍Pygame中不是必须但又很重要的Sprite模块，游戏中的角色实现，大多都要靠它。</value></post_desc></item>
<item><title><value>Python通用邮件发送(smtplib)</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83719/</value></title_url><post_desc><value>使用python的smtplib和email模块实现发送邮件、附件等，无须登录任何邮箱。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏从入门到精通（18）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83623/</value></title_url><post_desc><value>3D是非常酷的技术，同时也就意味着更多的工作。上一篇文章简单介绍3D之后，这次要讲更多2D到3D的新概念。</value></post_desc></item>
<item><title><value>Python 标准库 urllib2 的使用细节</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83696/</value></title_url><post_desc><value>Python 标准库中有很多实用的工具类，但是在具体使用时，标准库文档上对使用细节描述的并不清楚，比如 urllib2 这个 HTTP 客户端库。这里总结了一些 urllib2 的使用细节，并另外提供了一个利用其抓取网站生成RSS的小例子,需要的朋友可以参考下。</value></post_desc></item>
<item><title><value>Python实现控制台中的进度条</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83692/</value></title_url><post_desc><value>相信很多人在写一些简单的python脚本的时候都希望能够在程序运行的过程中实现进度条的功能以便查看程序运行的速度或者进度。</value><value>
我之前一直想实现这样一个东西，也查看了许多博客但是都找不到一个完美的解决方案（当然，使用progressBar这个库是个选择，但很多时候我们需要一些定制功能的时候就需要考虑自己实现，其实也挺简单的)，本文介绍了如何在python控制台中实现进度条。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（11）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83581/</value></title_url><post_desc><value>1983年苹果公司给自家的电脑安上了鼠标，用户就开始离不开这个小东西了。而现代游戏，离开了鼠标，99%的都没法玩！我们自然得好好研究如何使用鼠标来操控我们的游戏。</value></post_desc></item>
<item><title><value>Python操作xml文件（xml.etree.ElementTree）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83593/</value></title_url><post_desc><value>我们来使用python的xml.etree库操作xml文件。</value></post_desc></item>
<item><title><value>利用 Python 练习数据挖掘</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83563/</value></title_url><post_desc><value>覆盖使用Python进行数据挖掘查找和描述数据结构模式的实践工具。数据挖掘是一个隐式提取以前未知的潜在有用的数据信息提取方式。它使用广泛，并且是众多应用的技术基础。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（py2exe篇）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83773/</value></title_url><post_desc><value>本文就来学习使用py2exe将pygame脚本转换为exe可执行文件。</value></post_desc></item>
<item><title><value>Python的计数方式发展史</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83731/</value></title_url><post_desc><value>Python 解决问题的方式经常会随着时间的推移而发生改变。随着Python的演变，Python列表的计数方式也得到了发展。对列表中各项目进行计数有各种各样的方法，接下来我们将通过观察每一种方法的代码风格，来分析这些技术的不同之处。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（22）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83737/</value></title_url><post_desc><value>本次就是通过播放器历程实现播放长时间的背景音乐。</value></post_desc></item>
<item><title><value>fabric实现远程操作和部署</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83716/</value></title_url><post_desc><value>fabric是一款很强大的工具，可以将自动化部署或者多机操作的命令固化到一个脚本里。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏从入门到精通（17）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83620/</value></title_url><post_desc><value>本次我们就通过pygame来实现3d画面。</value></post_desc></item>
<item><title><value>一些简单的Python测试题</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83641/</value></title_url><post_desc><value>本文是一些来源网络的测试题目。从测试结果中我们就能够发现自己出现的问题。</value></post_desc></item>
<item><title><value>Python编程中使用Pillow来处理图像的基础教程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83685/</value></title_url><post_desc><value>这篇文章主要介绍了Python编程中使用Pillow来处理图像的基础教程,Pillow和PIL都是Python下十分强大的图片处理利器,大家可以参考下。</value></post_desc></item>
<item><title><value>使用python扫描本地音乐并下载歌词</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83680/</value></title_url><post_desc><value>百度提供了一个音乐搜索的api，本文介绍了如何用python调用该api，获取音乐歌词链接并写入本地文件。</value></post_desc></item>
<item><title><value>Python模板-Mako</value></title><lei><value>书籍</value></lei><title_url><value>http://python.jobbole.com/83635/</value></title_url><post_desc><value>python模板mako跟以前介绍过的jinja2一样具有相同的功能。文章测试代码来学习使用mako模板。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（10）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83578/</value></title_url><post_desc><value>前几次我们讲述了游戏中视觉上的种种，现在开始就要学习一下游戏中的用户输入——键盘输入。同时我们也要探讨一下如何让用户的输入更为顺畅，换个词就是，如果让游戏的手感更好一些。</value></post_desc></item>
<item><title><value>Python中staticmethod和classmethod的差异</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83584/</value></title_url><post_desc><value>staticmethod和classmethod均被作为装饰器，用作定义一个函数为”staticmethod”还是”classmethod”。那么什么是staticmethod/classmethod,并且这两者之间的差异.</value></post_desc></item>
<item><title><value>Python官方文档：Descriptor 指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83562/</value></title_url><post_desc><value>定义Descriptor并概述其协议，以及展示如何调用Descriptor。深入学习自定义Descriptor和几个内置的Python Descriptor，包括函数、property、静态方法和类方法。通过纯Python代码等价实现和应用示例来揭示其运行原理。</value></post_desc></item>
<item><title><value>深入了解 Python 字符串对象的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83732/</value></title_url><post_desc><value>本文介绍了 python 内部是如何管理字符串对象，以及字符串查找操作是如何实现的。</value></post_desc></item>
<item><title><value>Python文件管理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83764/</value></title_url><post_desc><value>文件管理是很多应用程序的基本功能和重要组成部分。Python可以使文件管理极其简单，特别是和其它语言相对比。</value><value>
本文以Peyton 和McCullough讲解了文件管理基础。</value></post_desc></item>
<item><title><value>python 面向对象（进阶篇）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83747/</value></title_url><post_desc><value>面向对象是一种编程方式，此编程方式的实现是基于对类和对象的使用。类是一个模板，模板中包装了多个“函数”供使用（可以将多函数中公用的变量封装到对象中）；对象是根据模板创建的实例，实例用于调用被包装在类中的函数；面向对象三大特性：封装、继承和多态。本篇将详细介绍Python 类的成员、成员修饰符、类的特殊成员。</value></post_desc></item>
<item><title><value>PYTHON 源码阅读 - 类型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83441/</value></title_url><post_desc><value>本期源码阅读主要涉及Python对象的类型机制。</value></post_desc></item>
<item><title><value>Python 快速教程：尾声</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83433/</value></title_url><post_desc><value>编程是一个很有创新性，很需要突破自我的工作。在一个方面待久了，自己都会觉得发馊。而未知的计算机领域中，还有很多有趣的技术值得更深入的学习。另一方面，Python用舒服了，导致我一想到问题，基本都是Python的思路。这样，Python就成了我的舒服区域。</value></post_desc></item>
<item><title><value>Python 快速教程（Django07）：马不停蹄</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83432/</value></title_url><post_desc><value>持续性服务器可以有很多选择，比如apache, Nginx, lighttpd等。本文将使用最常见的apache服务器。服务器和Django之间通过Python的web服务接口WSGI连接，采用的就是apache下的mod_wsgi模块。</value></post_desc></item>
<item><title><value>Python源码阅读-内存管理机制(一)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83533/</value></title_url><post_desc><value>本期python源码阅读是内存管理第一部分python的内存分层和分配策略。</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—梳子排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83530/</value></title_url><post_desc><value>梳子排序可以想象成 先拿一把大梳子（只有三个齿两个缝的）从第一个梳到最后一个，把两个缝隙里面反序的数交换。再换把小点的梳子，重复。最终，中间那个齿消失（梳理相邻两个数），完成最后一遍梳理。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83513/</value></title_url><post_desc><value>好的画面是一款游戏吸引人最直接最诱人的因素，虽说滥画面高游戏度的作品也有，但优秀的画面无疑是一张过硬的通行证，可以让你争取到更多的机会。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏从入门到精通（16）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83618/</value></title_url><post_desc><value>经过AI、状态机的学习和蚂蚁类的设计，我们本次就来实现蚂蚁搬树叶的游戏动画。</value></post_desc></item>
<item><title><value>快速Python性能优化要点</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83628/</value></title_url><post_desc><value>快速优化python性能，可以通过减少函数调用、使用xrange()代替range()……</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（15）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83616/</value></title_url><post_desc><value>继续前几篇中的AI和状态机，本文主要通过建立状态机来管理蚂蚁类的状态。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏从入门到精通（14）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83614/</value></title_url><post_desc><value>为了更好的理解AI，我们必须明白什么是状态机。有限状态机（英语：finite-state machine, FSM），又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</value></post_desc></item>
<item><title><value>12306的变态验证码算得了什么？我有Python神器！</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83564/</value></title_url><post_desc><value>大家跟我一起念，Python 大Fa好，跟着本宝宝用 Python 抢火车票</value></post_desc></item>
<item><title><value>Python模板-Jinja2</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83560/</value></title_url><post_desc><value>jinja2作为flask默认模板，功能强大！</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（9）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83557/</value></title_url><post_desc><value>今天我们就来谈一谈游戏中应用的向量知识。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（8）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83555/</value></title_url><post_desc><value>伟大的哲学家们告诉我们，“运动是绝对的，静止时相对的”，同样的在游戏中，只有活动起来，游戏才会拥有生命，否则和看连环画有什么差别呢？</value></post_desc></item>
<item><title><value>[摘要]Python 最佳实践指南</value></title><lei><value>书籍</value></lei><title_url><value>http://python.jobbole.com/83552/</value></title_url><post_desc><value>python最佳实践的部分摘要！</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（7）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83525/</value></title_url><post_desc><value>上一个章节使用了pygame.draw中的一些函数，这个模块的作用是在屏幕上绘制各种图形。本文就详细讲解一下pygame.draw。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（21）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83733/</value></title_url><post_desc><value>紧接着上一次，我们继续来看如何在Pygame中使用声音。本次我们来使用声音，播放音效，实现一个重力模拟金属球碰撞的例程。</value></post_desc></item>
<item><title><value>Python解析xml大文件(sax)</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83713/</value></title_url><post_desc><value>使用sax来处理xml文件时并不会像dom一样以类节点的围度进行读取。它的处理思想是通过一个handler，对开始标签、内容、结束标签各有一个处理函数。</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—选择排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83711/</value></title_url><post_desc><value>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—Bogo排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83709/</value></title_url><post_desc><value>在计算机科学中，Bogo排序（bogo-sort）是个既不实用又原始的排序算法，其原理等同将一堆卡片抛起，落在桌上后检查卡片是否已整齐排列好，若非就再抛一次。其名字源自Quantum bogodynamics，又称bozo sort、blort sort或猴子排序。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（20）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83632/</value></title_url><post_desc><value>声音是游戏中必要的元素之一，音效可以给予用户良好的反馈体验。宛若电影，最初的电影史无声的，而自从1927年第一部公认的有声电影放映之后，人们的娱乐项目一下子丰富了好多；游戏中也是啊，好的配音绝对可以给我们的作品增色不少。这几次就是给我们的pygame作品中增加美妙的声音的。</value></post_desc></item>
<item><title><value>Python 快速教程（Django06）：假作真时</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83427/</value></title_url><post_desc><value>一个Web应用的用户验证是它的基本组成部分。我们在使用一个应用时，总是从“登录”开始，到“登出”结束。另一方面，用户验证又和网站安全、数据库安全息息相关。我们这次了解用户验证部分。通过用户验证，我们可以根据用户的身份，提供不同的服务。</value></post_desc></item>
<item><title><value>Python 快速教程（Django05）：黑面管家</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83426/</value></title_url><post_desc><value>Django提供一个管理数据库的app，即django.contrib.admin。这是Django最方便的功能之一。通过该app，我们可以直接经由web页面，来管理我们的数据库。这一工具，主要是为网站管理人员使用。</value></post_desc></item>
<item><title><value>Python 快速教程（Django04）：各取所需</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83028/</value></title_url><post_desc><value>我们直接将数据库插入数据，并且允许客户向服务器传递数据。表格是客户向服务器传数据的经典方式。本文中我们先学习传统的表格提交，然后了解Django的表格对象。</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—冒泡排序及改进</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83510/</value></title_url><post_desc><value>本文是python实现冒泡排序及改进算法的实现。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83507/</value></title_url><post_desc><value>上一次我们试着写了一个最简单的Pygame程序并且解释了一个大概的框架，这一次内容是游戏中的至关重要的一项——事件。</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—鸡尾酒排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83504/</value></title_url><post_desc><value>用python来实现经典的算法，本文主要讲交换排序中的鸡尾酒排序。</value></post_desc></item>
<item><title><value>一个 11 行 Python 代码实现的神经网络</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82758/</value></title_url><post_desc><value>本文通过实现一个神经网络的基本框架，讲解了 backpropagation 算法的内部工作原理。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83489/</value></title_url><post_desc><value>Pygame是一个利用SDL库的写就的游戏库。先来学习如何写出Pygame的Hello World程序吧！</value></post_desc></item>
<item><title><value>理解python中的装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83625/</value></title_url><post_desc><value>本文就是谈一谈python中装饰器，并且装饰器只是装饰器模式的python实现。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏从入门到精通（12-13）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83612/</value></title_url><post_desc><value>本文就来学习游戏的另外一个支撑物——智能（AI），智能意味着对抗，“与人斗其乐无穷”，就是因为人足够聪明，要想“玩游戏其乐无穷”，我们都得赋予游戏足够的AI。</value></post_desc></item>
<item><title><value>Python中yield的解释</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83610/</value></title_url><post_desc><value>python中的yield关键字的作用是什么呢？</value></post_desc></item>
<item><title><value>Python 源码阅读——垃圾回收机制</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83548/</value></title_url><post_desc><value>本期源码阅读是关于python的垃圾回收机制。</value></post_desc></item>
<item><title><value>Python源码阅读-闭包的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83545/</value></title_url><post_desc><value>本期源码阅读是关于python的闭包。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（6）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83523/</value></title_url><post_desc><value>掌握了小小的像素，我们可以使用更加复杂一点的东西了，对，就是图像，无数的像素的集合！</value></post_desc></item>
<item><title><value>用K-均值聚类来探索顾客细分</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83498/</value></title_url><post_desc><value>在这篇文章中，我要谈的东西是相对简单，但却是对任何业务都很重要的：客户细分。客户细分的核心是能够识别不同类型的客户，然后知道如何找到更多这样的人，这样你就可以…你猜对了，获得更多的客户！</value></post_desc></item>
<item><title><value>数据结构&amp;算法实践—奇偶排序</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83540/</value></title_url><post_desc><value>奇偶排序，或奇偶换位排序，或砖排序，是一种相对简单的排序算法，最初发明用于有本地互连的并行计算。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（5）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83520/</value></title_url><post_desc><value>电脑游戏总是倾向于图像化的，尽量的要看得到听得到，游戏开发者会花无数的力气在图像上，提升图像效果是游戏开发永恒的话题。本文就来说一下像素和色彩的问题。</value></post_desc></item>
<item><title><value>Python源码阅读-内存管理机制(二)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83535/</value></title_url><post_desc><value>本期源码阅读接上一篇继续讲python的内存分配策略。</value></post_desc></item>
<item><title><value>Python 快速教程（Django03）： 所谓伊人</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83025/</value></title_url><post_desc><value>Django中自带的模板系统，可以将视图格式分离出来，作为模板使用。这样，不但视图可以容易修改，程序也会显得美观大方。</value></post_desc></item>
<item><title><value>我理解的 Python 最佳实践</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82939/</value></title_url><post_desc><value>对我来说，以前每次面试是我审视自己, 检验自己的一种方式. 每次准备面试, 以及被面试官问住的时候才会发现,其实我python我学的还不够好; 工作中也是, 可以从其他的同事那里获得成长. 但是我今天说的是, 我也在自己总结和思考最佳实践这件事.</value></post_desc></item>
<item><title><value>Python 快速教程（Django02）：庄园疑云</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82786/</value></title_url><post_desc><value>本文主要介绍Django连接数据库、创建模型等。</value></post_desc></item>
<item><title><value>Python后端相关技术/工具栈</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83486/</value></title_url><post_desc><value>本文主要总结了python的技术栈和工具栈。</value></post_desc></item>
<item><title><value>Python 源码阅读——dict</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83480/</value></title_url><post_desc><value>本期源码阅读是关于python基本数据结构的dict。</value></post_desc></item>
<item><title><value>Python中如何使用*args和**kwargs</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83476/</value></title_url><post_desc><value>在Python中如何使用可变长参数列表。</value></post_desc></item>
<item><title><value>Python 源码阅读——tuple</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83471/</value></title_url><post_desc><value>本期源码阅读主题是python中tuple。</value></post_desc></item>
<item><title><value>Python源码阅读——list</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83469/</value></title_url><post_desc><value>本期源码阅读是关于Python中list是如何实现的。</value></post_desc></item>
<item><title><value>Python 源码阅读 —— int</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83464/</value></title_url><post_desc><value>本期源码阅读就来看一看python的int是如何实现的。</value></post_desc></item>
<item><title><value>PYTHON 源码阅读 - STRING</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83461/</value></title_url><post_desc><value>本期源码阅读就来看一看python的String是如何实现的。</value></post_desc></item>
<item><title><value>如何用 Python 爬取需要登录的网站？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83588/</value></title_url><post_desc><value>最近我必须执行一项从一个需要登录的网站上爬取一些网页的操作。它没有我想象中那么简单，因此我决定写一个辅助教程。</value><value>在本教程将 bitbucket 账户中爬取一个项目列表。</value></post_desc></item>
<item><title><value>最好的Python机器学习库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/83605/</value></title_url><post_desc><value>毫无疑问，神经网络和机器学习在过去几年一直是高科技领域最热门的话题之一。这一点很容易看出，因为它们解决了很多真正有趣的用例，如语音识别、图像识别、甚至是乐曲谱写。因此，在这篇文章，我决定编制一份囊括一些很好的Python机器学习库的清单，并将其张贴在下面。</value></post_desc></item>
<item><title><value>用Python和Pygame写游戏-从入门到精通（4）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/83518/</value></title_url><post_desc><value>本文就来讲述pygame中字体模块和一些错误的处理。</value></post_desc></item>
<item><title><value>Python 快速教程（Django01）：初试天涯</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82783/</value></title_url><post_desc><value>Django是Python下的一款网络服务器框架。Python下有许多款不同的框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。虽然Django之于Python，达不到Rail之于Ruby的一统江湖的地位，但Django无疑也是Python在网络应用方面的一位主将。</value></post_desc></item>
<item><title><value>详解在 Python 中解析并修改XML内容的方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82775/</value></title_url><post_desc><value>详解在 Python 中解析并修改 XML 内容的方法</value></post_desc></item>
<item><title><value>Python 快速教程（网络02）：Python服务器进化</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82765/</value></title_url><post_desc><value>本文是python快速教程（网络02），主要介绍python的GCI server、Socket Server等。</value></post_desc></item>
<item><title><value>Python 中 eval 带来的潜在风险</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82770/</value></title_url><post_desc><value>eval是Python用于执行python表达式的一个内置函数，使用eval，可以很方便的将字符串动态执行。</value></post_desc></item>
<item><title><value>Python 快速教程（网络01）：原始Python服务器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82763/</value></title_url><post_desc><value>本文是python快速教程网络1，主要介绍原始Python服务器 。</value></post_desc></item>
<item><title><value>Python解析xml[xml.dom]</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83453/</value></title_url><post_desc><value>有一个表，里面数据量比较大，每天一更新，其字段可以通过xml配置文件进行配置，即，可能每次建表的字段不一样。上游跑时会根据配置从源文件中提取，到入库这一步需要根据配置进行建表。</value></post_desc></item>
<item><title><value>Python读取修改ini配置文件[ConfigParser]</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/83454/</value></title_url><post_desc><value>在项目中，可能用到数据库，但不能硬编码。在python中采用类似java的properties文件来读取ini文件。</value></post_desc></item>
<item><title><value>Python通用数据格式转换工具</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83447/</value></title_url><post_desc><value>在进行hadoop测试时，需要造大量数据，例如某个表存在56列，但实际程序逻辑只适用到某几列，我们造的数据 也只需要某几列构造几列数据，转化为对应数据表格式</value></post_desc></item>
<item><title><value>Python实现ftp常用操作[ftplib]</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83446/</value></title_url><post_desc><value>利用ftplib实现python的ftp功能。</value></post_desc></item>
<item><title><value>PYTHON 源码阅读 - 对象</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/83443/</value></title_url><post_desc><value>本期源码阅读就来看一看python的对象是如何实现的。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库14）：数据库 (sqlite3)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82760/</value></title_url><post_desc><value>本文是python标准库篇第14课，主要介绍python自带的轻量级数据库SQLite数据库和sqlite3接口。</value></post_desc></item>
<item><title><value>Python开发指南：最佳实践精选</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82752/</value></title_url><post_desc><value>一篇 针对Python开发的“最佳实践精选”指南。</value></post_desc></item>
<item><title><value>Python奇技淫巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82750/</value></title_url><post_desc><value>本文介绍了16 种python能够用到的奇技淫巧。</value></post_desc></item>
<item><title><value>Python 安全编码指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82746/</value></title_url><post_desc><value>本文深入Python的核心库进行分析，并且探讨了在两年的安全代码审查过程中，一些被认为是最关键的问题，最后也提出了一些解决方案和缓解的方法。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库13）：循环器 (itertools)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82740/</value></title_url><post_desc><value>本文是python标准库篇第13课，深入介绍了python的循环器。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库12）：数学与随机数 (math包，random包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82736/</value></title_url><post_desc><value>本文是python标准库篇第12课，主要介绍python中数学与随机数的相关内容。</value></post_desc></item>
<item><title><value>用 Python 做了一个豆瓣用户读书短评下载工具</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82374/</value></title_url><post_desc><value>朋友问我能不能做一个下载他在豆瓣读书上的短评的工具，于是就做了这个“豆瓣用户读书短评下载工具”。</value></post_desc></item>
<item><title><value>Python的运行时方法补丁技术</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82357/</value></title_url><post_desc><value>相信很多朋友在编程的时候都会想修改一下已经写好的程序行为代码，而最常见的方式就是通过子类来重写父类的一些不满足需求的方法。比如说下面这个例子。</value></post_desc></item>
<item><title><value>Python 入门到精通(4)：基本语法（2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82340/</value></title_url><post_desc><value>在上一篇博客Python基本语法，python入门到精通[二]已经为大家简单介绍了一下python的基本语法，上一篇博客的基本语法只是一个预览版的，目的是让大家对python的基本语法有个大概的了解。在大家差不多有个了解以后，我们再深入讲讲Python的语法可能就会容易一些。</value></post_desc></item>
<item><title><value>Python 入门到精通(3)：VS 2015 搭建开发环境</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82337/</value></title_url><post_desc><value>在第一篇博文后很多朋友提到希望使用VS 2013/ VS2015 python做demo，这里略带一句，其实就”学习python”而言，比较建议使用pycharm，pycharm可以设置VS或者eclipse等多种IDE的编码，可以让绝大部分其他语言使用IDE的习惯者更容易上手。这一点兼容确实做的很好。不过既然这么多园友要求使用vs开发python的话，就介绍一下visual studio 2015开发python的环境。</value></post_desc></item>
<item><title><value>Python 入门到精通(2)：基本语法（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82334/</value></title_url><post_desc><value>在上一篇我们已经在自己的windows电脑上搭建好了python的开发环境，这篇就开始学习一下Python的基本语法。</value></post_desc></item>
<item><title><value>Python 入门到精通(1)：Windows 搭建 Python 开发环境</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82331/</value></title_url><post_desc><value>从大学开始玩python到现在参加工作，已经有5年了，现在的公司是一家.net的公司用到python的比较少，最近公司有新项目需要用到python,领导希望我来跟其他同事training，就有了这篇博客，打算将python的training弄成一个简易的python系列，供大家入门使用。Python语言自从20世纪90年代初诞生至今，它逐渐被广泛应用于处理系统管理任务和Web编程。</value></post_desc></item>
<item><title><value>Python 装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82344/</value></title_url><post_desc><value>装饰模式有很多经典的使用场景，例如插入日志、性能测试、事务处理等等，有了装饰器，就可以提取大量函数中与本身功能无关的类似代码，从而达到代码重用的目的。下面就一步步看看Python中的装饰器。</value></post_desc></item>
<item><title><value>Python 中的类（下）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82312/</value></title_url><post_desc><value>文中介绍了类的构造和初始化方法：”__new__”和”__init__”，并且介绍了一种定制类的方法。通过”魔术方法”，可以对自定义类进行定制、扩展，使得自定义类变得强大、易用。</value></post_desc></item>
<item><title><value>Python 中的类（中）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82308/</value></title_url><post_desc><value>本文介绍了Python中的继承，当使用多继承的时候，可以使用super关键字去访问父类中被子类覆盖的方法；对于方法的调用，需要参照MRO。另外介绍了Python类的__slots__属性，通过这个属性可以限制类实例的可用属性。</value></post_desc></item>
<item><title><value>Python 中的类（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82297/</value></title_url><post_desc><value>本文介绍了Python中class的一些基本点：1.实例数据属性和类数据属性的区别，以及属性隐藏 2.实例方法，类方法和静态方法直接的区别 3.Python中通过”_”和”__”实现的访问控制。</value></post_desc></item>
<item><title><value>八大排序算法的 Python 实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82270/</value></title_url><post_desc><value>本文用Python实现了插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序、基数排序。</value></post_desc></item>
<item><title><value>Python 迭代器和生成器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82320/</value></title_url><post_desc><value>在Python中，很多对象都是可以通过for语句来直接遍历的，例如list、string、dict等等，这些对象都可以被称为可迭代对象。至于说哪些对象是可以被迭代访问的，就要了解一下迭代器相关的知识了。</value></post_desc></item>
<item><title><value>Python 函数相关</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82300/</value></title_url><post_desc><value>Python中的函数也是一种对象，而且函数还是一等公民。函数能作为参数，也能作为返回值，这使得Python中的函数变得很灵活。</value></post_desc></item>
<item><title><value>Python 中的闭包</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82296/</value></title_url><post_desc><value>闭包（closure）是函数式编程的重要的语法结构，Python也支持这一特性，下面就开始介绍Python中的闭包。</value></post_desc></item>
<item><title><value>图解 Python 深拷贝和浅拷贝</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82294/</value></title_url><post_desc><value>Python中，对象的赋值，拷贝（深/浅拷贝）之间是有差异的，如果使用的时候不注意，就可能产生意外的结果。</value></post_desc></item>
<item><title><value>Python 格式化字符串</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82292/</value></title_url><post_desc><value>本文整理了一些格式化字符，以及一些辅助指令，结合格式化操作符（%），就可以生成特定格式的字符串了。也可以使用字符串模板来进行字符串格式化。</value></post_desc></item>
<item><title><value>Python 上下文管理器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82289/</value></title_url><post_desc><value>本文介绍了Python中的上下文管理器，以及如何结合with语句来使用上下文管理器，并且总结了一下with 语句的执行流程。在很多情况下，with语句可以简化代码，并增加代码的健壮性。</value></post_desc></item>
<item><title><value>Python 对象（下）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82285/</value></title_url><post_desc><value>本篇介绍了Python对象的比较，包括对象的身份，类型以及值的比较。对于自定义类型的对象，如果需要进行比较操作，可以通过自定义比较操作相关的”魔术方法”。另外，文中简单介绍了Python对象的可变性，对比了可变（mutable）对象和不可变（immutable）对象之间的不同。</value></post_desc></item>
<item><title><value>Python 对象（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82280/</value></title_url><post_desc><value>本文介绍了Python对象中的一些基本点，通过这些点，应该可以对Python对象有基本的了解。当需要进行对象分析的时候，不妨试试文中使用的对象图，通过这个关系图，可以更加直观的看到对象之间的关系。</value></post_desc></item>
<item><title><value>由用户输入系列对称的点的解决方案</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82248/</value></title_url><post_desc><value>需求:由用户输入一系列对称的点，对称轴未知。需求分析 :对称的点包括对称点和对称轴上的点。可以先要求用户（图形化）输入成对的对称点，程序计算出对称轴后，再由用户输入轴上的点，并将点修正到轴上。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇07）：函数对象</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82597/</value></title_url><post_desc><value>本文是python进阶第7课，主要讲述python的map、reduce、filter、lambda函数的使用方法。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇06）：循环对象</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82592/</value></title_url><post_desc><value>本文是python进阶第6课，主要讲述python的生成器、迭代器和列表推导等。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇05）：循环设计</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82590/</value></title_url><post_desc><value>本文是python进阶第5课，主要讲述python中range、enumerate和zip函数的用法。</value></post_desc></item>
<item><title><value>python 线程之 Condition</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82742/</value></title_url><post_desc><value>Python提供的Condition对象提供了对复杂线程同步问题的支持。Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。线程首先acquire一个条件变量，然后判断一些条件。如果条件不满足则wait；</value></post_desc></item>
<item><title><value>Python 快速教程（标准库11）：多线程与同步 (threading包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82733/</value></title_url><post_desc><value>本文是python标准库篇第11课，深入介绍了python多进程的相关包。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库10）：多进程初步 (multiprocessing包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82725/</value></title_url><post_desc><value>本文是python标准库篇第10课，简单介绍了python多进程的相关内容。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇04）：函数的参数对应</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82588/</value></title_url><post_desc><value>本文是python进阶第4课，主要讲述python函数的参数对应的问题。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇03）：模块</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82585/</value></title_url><post_desc><value>本文是python进阶第3课，主要讲述python模块相关内容。</value></post_desc></item>
<item><title><value>行为驱动开发在 Python 开发测试中的应用</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82580/</value></title_url><post_desc><value>说到行为驱动开发（BDD），无可避免的要提到敏捷里面的测试驱动开发（TDD），TDD 的主要思想是“代码即文档”，其倡导的流程是根据设计编写测试-&gt; 实现设计的功能 -&gt; 用测试代码验证 -&gt; 重构实现代码 -&gt; 改善设计 -&gt; 再次回到根据改善的设计编写测试。</value></post_desc></item>
<item><title><value>小 200 行 Python 代码做了一个换脸程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82546/</value></title_url><post_desc><value>我将在本文介绍如何写一个简短（不到200行）的 Python 脚本，自动把一幅图片的脸替换为另一幅图片的脸。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇02）：文本文件的输入输出</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82555/</value></title_url><post_desc><value>本文是python进阶第2课，主要讲述python文本文件的操作。</value></post_desc></item>
<item><title><value>Flask 框架中 SQLAlchemy 使用时的乱码问题</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82726/</value></title_url><post_desc><value>这篇文章主要介绍了 Flask 框架中 SQLAlchemy 使用时的乱码问题，SQLAlchemy 与 Python 结合对数据库的操作非常方便。</value></post_desc></item>
<item><title><value>举例讲解 Python 中的死锁、可重入锁和互斥锁</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82723/</value></title_url><post_desc><value>本文通过举例讲解了 Python 中的死锁、可重入锁和互斥锁、尽管线程编程方面 Python的 GIL 问题是老生常谈的…需要的朋友可以参考下</value></post_desc></item>
<item><title><value>Python 快速教程（标准库09）：当前进程信息 (os包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82720/</value></title_url><post_desc><value>本文是python标准库篇第9课，主要介绍python查看系统当前进程信息的相关函数。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库08）：多线程与同步 (threading包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82718/</value></title_url><post_desc><value>本文是python标准库篇第8课，主要介绍python的多线程与同步机制。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库07）：信号 (signal包，部分os包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82713/</value></title_url><post_desc><value>本文是python标准库篇第7课，主要介绍python的信号 (signal包，部分os包)。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库06）：子进程 (subprocess包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82711/</value></title_url><post_desc><value>本文是python标准库篇第6课，主要介绍python的子进程 (subprocess包)。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇01）： 词典</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82554/</value></title_url><post_desc><value>本文是python进阶第1课，讲述python的基本数据结构词典dict的用法。</value></post_desc></item>
<item><title><value>深入 Python 列表的内部实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82549/</value></title_url><post_desc><value>本文将介绍列表在 CPython中的实现，因为毕竟Cpython 又是 Python 最为常用的实现。</value><value>Python 中的列表非常强大，看看它的内部实现机制是怎么样的，一定非常有趣。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇10）：反过头来看看</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82552/</value></title_url><post_desc><value>本文是python基础第10课，从第1课Hello World到面向对象，我们该如何理解“Everything is Object”这句话呢？</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇09）： 面向对象的进一步拓展</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82550/</value></title_url><post_desc><value>本文是python基础第9课，进一步向大家讲述python面向对象的内容。</value></post_desc></item>
<item><title><value>探索 Python（4）: 探索 Python 类型的层次结构 —— 使用列表</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82510/</value></title_url><post_desc><value>本系列的第二篇文章 探索 Python（2）: 探索 Python 类型的层次结构 —— 了解对象和容器，介绍了 Python 类型的层次结构，其中包括容器对象。这篇文章演示了 tuple，这是一个不可变的序列。</value></post_desc></item>
<item><title><value>探索 Python（3）: 探索 Python 类型的层次结构 —— 使用字符串</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82505/</value></title_url><post_desc><value>在本系列的第一篇文章 探索 Python（1）: Python 的内置数值类型 中，我介绍了 Python 简单的内置数值数据类型。如果您曾经使用过其他编程语言，那么对这些数据类型可能不会陌生。</value></post_desc></item>
<item><title><value>如何用Python开发一个简单的Webkit浏览器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82715/</value></title_url><post_desc><value>在这篇教程中，我们会用 Python 的 PyQt 框架编写一个简单的 web 浏览器。关于 PyQt ，你可能已经有所耳闻了，它是 Qt 框架下的一系列 Python 组件，而 Qt（发音类似“cute”）是用来开发 GUI 的 C++ 框架。</value></post_desc></item>
<item><title><value>Python 入门到精通(5)：Python运算符</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82706/</value></title_url><post_desc><value>在Python中常见的运算符有：+、-、*、/、**/、!=、//、%、&amp;、|、^、~、&gt;&gt;、&lt;&lt;、=、==、not、and、or。在接下来的博文中再一一介绍这些运算符的具体事例。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库05）：存储对象 (pickle包，cPickle包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82701/</value></title_url><post_desc><value>本文是python标准库篇第5课，主要介绍python的存储对象 (pickle包，cPickle包)。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库04）：文件管理 (部分os包，shutil包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82699/</value></title_url><post_desc><value>本文是python标准库篇第4课，主要介绍python的os包和shutil包。</value></post_desc></item>
<item><title><value>热门 Python 应用 The Fuck 是如何工作的</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82528/</value></title_url><post_desc><value>不久之前我写了一款实用的应用 — The Fuck，用来修复在命令行中上一条错误的命令。这款应用下载了几千次，在 GitHub 上有很多 star，并有几十个优秀的贡献者。本文介绍应用中有趣的内部实现。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇08）： 面向对象的基本概念</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82531/</value></title_url><post_desc><value>本文是python基础第8课，主要讲述python的面向对象的基本概念。</value></post_desc></item>
<item><title><value>探索 Python（6）: 用 Python 编程 —— 兴趣</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82517/</value></title_url><post_desc><value>本系列前面 “探索 Python（5）: 用 Python 编程 —— 控制流” 一文讨论了 if 语句和 while 循环，讨论了复合语句以及适当缩进 Python 语句来指示相关 Python 代码块。该文的结尾介绍了 Python for 循环。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇07）： 函数</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82529/</value></title_url><post_desc><value>本文是python基础第7课，主要讲述python的函数。</value></post_desc></item>
<item><title><value>探索 Python（5）: 用 Python 编程 —— 控制流</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82513/</value></title_url><post_desc><value>本系列的前 4 篇文章介绍了 Python 程序中常用的基本数据类型，包括：内置的数值数据类型、Tuple 容器类型、String 容器类型和List 容器类型</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇05）： 缩进和选择</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82523/</value></title_url><post_desc><value>本文是python基础第5课，主要讲述python的缩进与if语句。</value></post_desc></item>
<item><title><value>探索 Python（2）: 探索 Python 类型的层次结构 —— 了解对象和容器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82502/</value></title_url><post_desc><value>在 Python 语言中，所有事物都是程序可以访问的对象, 其中包括保存整数的简单类型，以及您编写的实际代码和这些代码在 Python 解释器中的表示。对于熟悉其他编程语言的人来说，此行为可能导致某些混乱。</value></post_desc></item>
<item><title><value>探索 Python（1）: Python 的内置数值类型</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82498/</value></title_url><post_desc><value>Python 是一种敏捷的、动态类型化的、极富表现力的开源编程语言，可以被自由地安装到多种平台上。Python 代码是被解释的。如果您对编辑、构建和执行循环较为熟悉，则 Python 代码对您来说更简单。</value></post_desc></item>
<item><title><value>浅谈 Python 的 with 语句</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82494/</value></title_url><post_desc><value>本文对 with 语句进行介绍，包括 with 语句的基本语法和工作原理，自定义支持 with 语句的类，以及使用 contextlib 工具加入对 with 语句的支持，使读者更好的了解和使用 with 语句。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇04）：运算</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82492/</value></title_url><post_desc><value>本文是python基础第4课，主要讲述python运算符的相关内容。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇03）：序列</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82490/</value></title_url><post_desc><value>本文是python基础第2课，主要讲述python中的字符串、列表和元组。</value></post_desc></item>
<item><title><value>各种 Python 实现的简单介绍与比较</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82703/</value></title_url><post_desc><value>当谈到Python时，一般指的是CPython。但Python实际上是一门语言规范，只是定义了Python这门语言应该具备哪些语言要素，应当能完成什么样的任务。这种语言规范可以用不同的方式实现，可以用C实现，也可以用C++、Java、C#、JavaScript，甚至使用Python自己实现。这篇文章就是简要介绍并比较不同的Python实现</value></post_desc></item>
<item><title><value>Python 快速教程（标准库03）：路径与文件 (os.path包, glob包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82692/</value></title_url><post_desc><value>本文是python标准库篇第3课，主要介绍python的os.path包、glob包。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库02）：时间与日期 (time, datetime包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82690/</value></title_url><post_desc><value>本文是python标准库篇第2课，主要介绍python的datetime、time包。</value></post_desc></item>
<item><title><value>用 Python 脚本实现对 Linux 服务器的监控</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82536/</value></title_url><post_desc><value>本文介绍一下使用 Python 脚本实现对 Linux 服务器 CPU 内存 网络的监控脚本的编写。</value></post_desc></item>
<item><title><value>Python程序员鲜为人知但你应该知道的16个问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82534/</value></title_url><post_desc><value>这篇文章主要介绍了Python程序员代码编写时应该避免的16个“坑”，也可以说成Python程序员代码编写时应该避免的16个问题，需要的朋友可以参考。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇06）： 循环</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82525/</value></title_url><post_desc><value>本文是python基础第6课，主要讲述python的循环语句。</value></post_desc></item>
<item><title><value>Python自省（反射）指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82110/</value></title_url><post_desc><value>有时候我们会碰到这样的需求，需要执行对象的某个方法，或是需要对对象的某个字段赋值，而方法名或是字段名在编码代码时并不能确定，需要通过参数传递字符串的形式输入</value></post_desc></item>
<item><title><value>Python字符编码详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82107/</value></title_url><post_desc><value>本文简单介绍了各种常用的字符编码的特点，并介绍了在python2.x中如何与编码问题作战 </value></post_desc></item>
<item><title><value>Python线程指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82105/</value></title_url><post_desc><value>本文介绍了Python对于线程的支持，包括“学会”多线程编程需要掌握的基础以及Python两个线程标准库的完整介绍及使用示例</value></post_desc></item>
<item><title><value>用 Python 从零开始写一个简单的解释器（4）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82455/</value></title_url><post_desc><value>在本系列的前三篇文章中，我们已经为IMP语言建立了词法分析器、解析器 和 抽象语法树AST。我们甚至写了自己的解析器组合库。在这最后一篇文章中，我们将会实现解释器的最后一个组件：求值器。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇02）：基础数据类型</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82471/</value></title_url><post_desc><value>本文是python基础第2课，介绍了python的基本数据类型和赋值。</value></post_desc></item>
<item><title><value>Python 快速教程（基础篇01）：Hello World</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82467/</value></title_url><post_desc><value>本文是python基础第1课，先从一个小程序写起！</value></post_desc></item>
<item><title><value>爱上 SQLAlchemy 的 10 个理由</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82453/</value></title_url><post_desc><value>最近，我见到了很多针对 ORM 的抨击，但是我觉得有些批评是莫须有的。我本人就是 SQLAlchemy 的忠实拥趸。在我的项目里很多地方都用到了 SQLAlchemy，我也为 SQLAlchemy 项目贡献了一些代码。</value></post_desc></item>
<item><title><value>用 Python 从零开始写一个简单的解释器（3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82445/</value></title_url><post_desc><value>到目前为止，我们已经为解释器写了一个词法分析器和 一个解析器组合子库。在这里，我们会创建抽象语法树（AST）的数据结构，使用组合子库写一个解析器，组合子库可以实现将词法分析器返回的标记列表转换为一个抽象语法树（AST）。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库01）：正则表达式 (re包)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82688/</value></title_url><post_desc><value>本文是python标准库篇第1课，主要介绍python的re包。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库）：学习准备</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82686/</value></title_url><post_desc><value>本文是python标准库学习准备课程。</value></post_desc></item>
<item><title><value>白话tornado源码(1)：一个脚本引发的血案</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82095/</value></title_url><post_desc><value>本系列博文计划：1、剖析基于Python的Web框架Tornado的源码；2、为Python开发一个完善的MVC框架。首先将带着大家一起来剖析基于python编写的Web框架 tornado ，本着易读易懂的目标来写这一系列，寄希让小白也能zeng明白其中的道理，与其说剖析还不如说是白话，因为本系列都会用通俗的语言去描述Web框架中的各个知识点。</value></post_desc></item>
<item><title><value>Django任意代码执行漏洞分析</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82089/</value></title_url><post_desc><value>最近在进行网站代码审查的过程中，发现某些产品由于session使用不当，导致可能被攻击者利用，执行任意代码。这些产品在登录的JS代码中，泄露了SECRET_KEY,将该值作为密码加密的盐，这样就暴露了加密salt不太好吧，更重要的是对django的安全造成了极大的威胁。</value></post_desc></item>
<item><title><value>关于python中的setup.py</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82077/</value></title_url><post_desc><value>其实对于setup.py和setup.cfg的关注是从OpenStack的源码包中开始的，OpenStack每个组件的发布时都是一个tar.gz包，同样，我们直接从github上clone代码后也会发现两个文件的存在。当阅读Nova或Ceilometer（其他组件可能也会涉及）的代码时，发现setup.cfg中内容对于代码的理解有很大的影响。那么，到底setup.py和setup.cfg是干什么的？</value></post_desc></item>
<item><title><value>深入分析 Python 的垃圾回收机制</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82061/</value></title_url><post_desc><value>Python的GC模块主要运用了“引用计数”（reference counting）来跟踪和回收垃圾。在引用计数的基础上，还可以通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用的问题。通过“分代回收”（generation collection）以空间换取时间来进一步提高垃圾回收的效率。</value></post_desc></item>
<item><title><value>解密 Python 的描述符（descriptor）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81899/</value></title_url><post_desc><value>Python中包含了许多内建的语言特性，它们使得代码简洁且易于理解。这些特性包括列表/集合/字典推导式，属性（property）、以及装饰器（decorator）。对于大部分特性来说，这些“中级”的语言特性有着完善的文档，并且易于学习。</value></post_desc></item>
<item><title><value>Python 内存管理方式和垃圾回收算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82446/</value></title_url><post_desc><value>在列表，元组，实例，类，字典和函数中存在循环引用问题。有 __del__ 方法的实例会以健全的方式被处理。给新类型添加GC支持是很容易的。支持GC的Python与常规的Python是二进制兼容的。</value></post_desc></item>
<item><title><value>用 Python 从零开始写一个简单的解释器（2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82423/</value></title_url><post_desc><value>在《用 Python 从零开始写一个简单的解释器（1）》中，我们介绍了 IMP 语言以及我们为它打造的解释器的通用结构。也深入介绍了词法分析器。</value></post_desc></item>
<item><title><value>复杂度为 O(1) 的「最不常用」缓存算法的 Python 实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82424/</value></title_url><post_desc><value>LFU 缓存回收机制对于 HTTP 缓存网络代理是非常有用的，我们可以从缓存中移除那些最不常使用的条目。本文旨在设计一个其所有操作的时间复杂度都只有 O(1)的 LFU 缓存算法，这些操作包括了插入、访问和删除（回收）。</value></post_desc></item>
<item><title><value>Python 快速教程（标准库）：走马观花</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82680/</value></title_url><post_desc><value>本文是python快速教程中关于标准库的简单介绍。</value></post_desc></item>
<item><title><value>Python 快速教程（补充篇06）：Python之道</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82678/</value></title_url><post_desc><value>本文是python补充篇第6课，向我们介绍了python的彩蛋——import this.</value></post_desc></item>
<item><title><value>Python多进程编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82045/</value></title_url><post_desc><value>python中的多线程其实并不是真正的多线程，如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。Python提供了非常好用的多进程包multiprocessing，只需要定义一个函数，Python会完成其他所有事情。借助这个包，可以轻松完成从单进程到并发执行的转换。multiprocessing支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。</value></post_desc></item>
<item><title><value>作为一个python开发者需要知道的关于服务器的知识</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82009/</value></title_url><post_desc><value>服务器的相关知识曾经让我非常困惑。我相信还有很多的Python开发者和我有着类似的遭遇。所以，请让我和你分享我知道的一切关于服务器的知识，来解开这些困惑。</value></post_desc></item>
<item><title><value>为什么Python中没有Switch/Case语句?</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82008/</value></title_url><post_desc><value> 不同于我用过的其它编程语言，Python 没有 switch / case 语句。为了实现它，我们可以使用字典映射：</value></post_desc></item>
<item><title><value>Python 面向对象（初级篇）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82023/</value></title_url><post_desc><value>面向对象是一种编程方式，此编程方式的实现是基于对类和对象的使用。</value><value>
类是一个模板，模板中包装了多个“函数”供使用。</value><value>
对象，根据模板创建的实例（即：对象），实例用于调用被包装在类中的函数</value><value>
面向对象三大特性：封装、继承和多态。</value></post_desc></item>
<item><title><value>用 Python 制作 Powerpoint 演示文稿</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82394/</value></title_url><post_desc><value>不管你爱不爱，Powerpoint都被广泛应用于商务场合。文章不会争辩Powerpoint的优点，而是向你展示如何用Python使创建Powerpoint幻灯片自动化，以便去除掉在使用Powerpoint过程中一些单调乏味的工作。</value></post_desc></item>
<item><title><value>Python 初学者的最佳学习资源</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82399/</value></title_url><post_desc><value>Python 社区在分享学习资源和帮助初学者掌握语言方面总是很积极的。但也就是因为资源过多，导致人们很难知道如何找到。本文整理了最好、最通用的 Python 资源。</value></post_desc></item>
<item><title><value>用 kNN 算法预测豆瓣电影用户的性别</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82379/</value></title_url><post_desc><value>本文认为不同性别的人偏好的电影类型会有所不同，因此进行了此实验。利用较为活跃的274位豆瓣用户最近观看的100部电影，对其类型进行统计，以得到的37种电影类型作为属性特征，以用户性别作为标签构建样本集。使用kNN算法构建豆瓣电影用户性别分类器，使用样本中的90%作为训练样本，10%作为测试样本，准确率可以达到81.48%。</value></post_desc></item>
<item><title><value>从豆瓣电影批量获取看过这部电影的用户列表</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82383/</value></title_url><post_desc><value>由于之后要做一个实验，需要用到大量豆瓣用户的电影数据，因此想到了从豆瓣电影的“看过这部电影 的豆瓣成员”页面上来获取较为活跃的豆瓣电影用户。</value></post_desc></item>
<item><title><value>用AIML开发人工智能聊天机器人</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82007/</value></title_url><post_desc><value>借助 Python 的 AIML 包，我们很容易实现人工智能聊天机器人。AIML 指的是 Artificial Intelligence Markup Language （人工智能标记语言），它不过是简单的可 XML （扩展标记语言）形式。</value></post_desc></item>
<item><title><value>分析 Python 脚本</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82004/</value></title_url><post_desc><value>我有一个负责一个长期运行任务的 Python 脚本。这个脚本同其他三个系统通信 – 它从系统 #1 和 #2 读取数据，合并它们然后再把它们推送到系统 #3。这是下面的描述。问题是迁移运行在我不满意的一个地方。因为我想知道该脚本的大部分工作是在与哪个慢的外部系统进行通信。</value></post_desc></item>
<item><title><value>Python 性能快速优化</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82002/</value></title_url><post_desc><value>Python可能最容易扼杀你的想法，但不是最好的代码实现。尽管强烈反对过早优化，但在 Python 代码中一点点的优化都可能带来巨大的性能提升。</value></post_desc></item>
<item><title><value>使用python爬虫抓站的一些技巧总结：进阶篇</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82000/</value></title_url><post_desc><value>以前写过一篇使用python爬虫抓站的一些技巧总结，总结了诸多爬虫使用的方法；那篇东东现在看来还是挺有用的，但是当时很菜（现在也菜，但是比那时进步了不少），很多东西都不是很优，属于”只是能用”这么个层次。这篇进阶篇打算把“能用”提升到“用得省事省心”这个层次。</value></post_desc></item>
<item><title><value>用python爬虫抓站的一些技巧总结</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81997/</value></title_url><post_desc><value>学用python也有3个多月了，用得最多的还是各类爬虫脚本：写过抓代理本机验证的脚本，写过在discuz论坛中自动登录自动发贴的脚本，写过自动收邮件的脚本，写过简单的验证码识别的脚本，本来想写google music的抓取脚本的，结果有了强大的gmbox，也就不用写了。</value></post_desc></item>
<item><title><value>使用python/casperjs编写终极爬虫-客户端App的抓取</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81995/</value></title_url><post_desc><value>随着移动互联网的发展，现在写web和我三年前刚开始写爬虫的时候已经改变了太多。特别是在node以及javascript/ruby社区的努力下，以往“服务器端”做的事情都慢慢搬到了“浏览器”来实现，最极端的例子可能是meteor了 ，写web程序无需划分前端后端的时代已经到来了。。。</value></post_desc></item>
<item><title><value>Python 中的 property 属性</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81967/</value></title_url><post_desc><value>Python中有个很赞的概念，叫做property，它使得面向对象的编程更加简单。在详细解释和深入了解Python中的property之前，让我们首先建立这样一个直觉：为什么我们需要用到property？</value></post_desc></item>
<item><title><value>用 Python 创建 NBA 得分图表</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81968/</value></title_url><post_desc><value>在这篇文章中，我研究了如何提取一个篮球运动员的得分图数据，然后使用 matplotlib 和 seaborn 绘制得分图。</value></post_desc></item>
<item><title><value>Python 之父在 EuroPython 大会上谈论 Python</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/81951/</value></title_url><post_desc><value>2015 年 EuroPython 大会，Guido van Rossum 原本是用准备好的演讲稿和现场问答，但当他登台的时候，他用现场问答代替了之前准备的东西。在接受观众提问之前，他先自问自答地解释了一些问题：包括 Python 3（及3.5），为何没有 Python 2.8，为何有许多 Open bugs，PyPy 和 Python 中他所讨厌的部分。</value></post_desc></item>
<item><title><value>python生成汉字图片字库</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81985/</value></title_url><post_desc><value>最近做文档识别方面的项目，做汉字识别需要建立字库，在网上找了各种OCR，感觉都不好，这方面的技术应该比较成熟了，OCR的软件很多，但没有找到几篇有含金量量的论文，也没有看到哪位大牛公开字库，我用pygame渲染字体来生成字库，也用PIL对整齐的图片进行切割得到字库。</value></post_desc></item>
<item><title><value>用 Python 将文本转为图片</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81983/</value></title_url><post_desc><value>有时候，我们需要将文本转换为图片，比如发长微博，或者不想让人轻易复制我们的文本内容等时候。目前类似的工具已经有了不少，不过我觉得用得都不是很趁手，于是便自己尝试实现了一个。</value></post_desc></item>
<item><title><value>使用马尔可夫模型自动生成文章</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81966/</value></title_url><post_desc><value>马尔可夫链是一个随机过程，在这个过程中，我们假设前一个或前几个状态对预测下一个状态起决定性作用。和抛硬币不同，这些事件之间不是相互独立的。</value></post_desc></item>
<item><title><value>Python性能优化的20条建议</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81956/</value></title_url><post_desc><value>在Python中可以通过很多方法来优化性能，本文总结出笔者在实际编码过程的20条常用规则，与各位分享。</value></post_desc></item>
<item><title><value>基于Django与Celery实现异步队列任务</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81953/</value></title_url><post_desc><value>本译文结合Django+Celery+Redis实现一个定期从Flickr 获取图片并展示的简单案例，方便大家理解实现异步对列任务的过程。</value></post_desc></item>
<item><title><value>IPython 4.0发布：Jupyter和IPython分离后的首个版本</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/81945/</value></title_url><post_desc><value>IPython 4.0日前正式发布，这是IPython分离成IPython和Jupyter后的第一个重要版本。</value></post_desc></item>
<item><title><value>Python Guide 系列 2.1：结构化你的项目</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81922/</value></title_url><post_desc><value>所谓“结构”就是使项目清楚地直接地干净地优雅地达到他的目的。我们要考虑如何最大限度的利用python的特性来写干净、有效的代码。</value></post_desc></item>
<item><title><value>一篇文章让你彻底搞清楚Python中self的含义</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81921/</value></title_url><post_desc><value>刚开始学习Python的类写法的时候觉得很是麻烦，为什么定义时需要而调用时又不需要，为什么不能内部简化从而减少我们敲击键盘的次数？你看完这篇文章后就会明白所有的疑问。</value></post_desc></item>
<item><title><value>理解Python的迭代器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81916/</value></title_url><post_desc><value>关于Python的迭代器和生成器的相关理论，廖雪峰老师的教程中解释了迭代器和生成器，这篇文章只是补充和我个人的总结。</value></post_desc></item>
<item><title><value>深入理解Python中的生成器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81911/</value></title_url><post_desc><value>本文深入的讲解了一些关于Python中生成器的概念：生成器不会把结果保存在一个系列中，而是保存生成器的状态，在每次进行迭代时返回一个值，直到遇到StopIteration异常结束。</value></post_desc></item>
<item><title><value>Python 不是 C</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81904/</value></title_url><post_desc><value>我一直使用 Python，用它处理各种数据科学项目。 Python 以易用闻名。有编码经验者学习数天就能上手（或有效使用它）。</value></post_desc></item>
<item><title><value>说说Python中的几个内建函数和表推导</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81905/</value></title_url><post_desc><value>Guido 非常不喜欢lambda、map、filter以及reduce这几个函数式编程中的函数，他比较喜欢使用表推导。而且出于防止滥用的考虑，lamdba在Python中”享受”到了在其他语言中未曾遇到过的限制。</value></post_desc></item>
<item><title><value>从Theano到Lasagne：基于Python的深度学习的框架和库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81896/</value></title_url><post_desc><value>深度学习是机器学习和人工智能的一种形式，利用堆积在彼此顶部的神经网络的多个隐藏层来尝试形成对数据更深层次的“理解”。 在这篇文章中，我们将讨论几个不同的深度学习框架，库以及工具。</value></post_desc></item>
<item><title><value>Python 开发者节省时间的 10 个方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81888/</value></title_url><post_desc><value>Python 是一个美丽的语言，可以激发用户对它的爱。所以如果你试图加入程序员行列，或者你有点厌倦C++，Perl，Java 和其他语言，我推荐你尝试Python.</value></post_desc></item>
<item><title><value>Python迭代器和生成器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81881/</value></title_url><post_desc><value>在Python中，很多对象都是可以通过for语句来直接遍历的，例如list、string、dict等等，这些对象都可以被称为可迭代对象。至于说哪些对象是可以被迭代访问的，就要了解一下迭代器相关的知识了。</value></post_desc></item>
<item><title><value>大数据全栈式开发语言 – Python</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81878/</value></title_url><post_desc><value>我发现Python可以称为大数据全栈式开发语言。因为Python在云基础设施，DevOps，大数据处理等领域都是炙手可热的语言。</value></post_desc></item>
<item><title><value>一套关于Django的笔试题</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81871/</value></title_url><post_desc><value>Python的笔试题网上能搜出N个版本，Django的却不多。这套题我觉得出的挺好的（某公司的笔试的部分题目），可以考察笔试者对于框架的理解和使用熟练度，展开了问，也可以问到很深的地方。</value></post_desc></item>
<item><title><value>Python HOWTOs 官方文档：Socket 编程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81860/</value></title_url><post_desc><value>几乎所有地方都用到了sockets，但它们可能是被严重误解的技术之一。本文是关于sockets的概述。它并不是一篇教程——要让sockets运行起来，你仍旧需要做点工作。</value></post_desc></item>
<item><title><value>使用Vagrant搭建跨平台的Python开发环境</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81861/</value></title_url><post_desc><value>最近升级了Win10之后感觉系统萌萌哒，不过也可惜了自己之前花费很大力气搭建的开发环境。由于最近跨平台的需求比较大，就考虑搭建一套跨平台的开发环境。</value></post_desc></item>
<item><title><value>Python模块学习：time 日期时间处理</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81550/</value></title_url><post_desc><value>在应用程序的开发过程中，难免要跟日期、时间处理打交道。如：记录一个复杂算法的执行时间；网络通信中数据包的延迟等等。Python中提供了time, datetime calendar等模块来处理时间日期，今天对time模块中最常用的几个函数作一个介绍。</value></post_desc></item>
<item><title><value>Python模块学习：random 随机数生成</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81560/</value></title_url><post_desc><value>Python中的random模块用于生成随机数。下面介绍一下random模块中最常用的几个函数。</value></post_desc></item>
<item><title><value>Python模块学习：threading 多线程控制和处理</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81546/</value></title_url><post_desc><value>上一篇 介绍了thread模块，今天来学习Python中另一个操作线程的模块：threading。threading通过对thread模块进行二次封装，提供了更方便的API来操作线程。今天内容比较多，闲话少说，现在就开始切入正题！</value></post_desc></item>
<item><title><value>Python模块学习：thread 多线程处理</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81544/</value></title_url><post_desc><value>这段时间一直在用 Python 写一个游戏的服务器程序。在编写过程中，不可避免的要用多线程来处理与客户端的交互。 Python 标准库提供了 thread 和 threading 两个模块来对多线程进行支持。</value></post_desc></item>
<item><title><value>Python模块学习：httplib HTTP协议客户端实现</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81542/</value></title_url><post_desc><value>httplib 是 python中http 协议的客户端实现，可以使用该模块来与 HTTP 服务器进行交互。httplib的内容不是很多，也比较简单。</value></post_desc></item>
<item><title><value>python模块学习：smtplib 邮件发送</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81540/</value></title_url><post_desc><value>在基于互联网的应用中，程序经常需要自动地发送电子邮件。如：一个网站的注册系统会在用户注册时发送一封邮件来确认注册；当用户忘记登陆密码的时候，通过邮件来取回密码。smtplib模块是python中smtp(简单邮件传输协议)的客户端实现。我们可以使用smtplib模块，轻松的发送电子邮件。</value></post_desc></item>
<item><title><value>一起写一个 Web 服务器（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81524/</value></title_url><post_desc><value>我相信，要成为优秀的开发者，你必须对你每天都用的底层的软件系统有进一步的理解，包括编程语言、编译器和解释器、数据库和操作系统、WEB服务器和WEB框架。为了更好更深入的理解这些系统，你可以从零开始一块砖地，一面墙地，重建它们。</value></post_desc></item>
<item><title><value>Python模块学习：logging 日志记录</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81521/</value></title_url><post_desc><value>许多应用程序中都会有日志模块，用于记录系统在运行过程中的一些关键信息，以便于对系统的运行状况进行跟踪。在.NET平台中，有非常著名的第三方开源日志组件log4net，c++中，有人们熟悉的log4cpp，而在python中，我们不需要第三方的日志组件，因为它已经为我们提供了简单易用、且功能强大的日志模块：logging。</value></post_desc></item>
<item><title><value>Python模块学习：zipfile zip文件操作</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81519/</value></title_url><post_desc><value>最近在写一个网络客户端下载程序，用于下载服务器上的数据。有些数据（如文本，office文档）如果直接传输的话，将会增加通信的数据量，使下载时间变长。服务器在传输这些数据之前先对其进行压缩，客户端接收到数据之后进行解压，这样可以减小网通传输数据的通信量，缩短下载的时间，从而增加客户体验。</value></post_desc></item>
<item><title><value>Python模块学习：subprocess 创建子进程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81517/</value></title_url><post_desc><value>最近，我们老大要我写一个守护者程序，对服务器进程进行守护。如果服务器不幸挂掉了，守护者能即时的重启应用程序。上网Google了一下，发现Python有很几个模块都可以创建进程。最终我选择使用subprocess模块。</value></post_desc></item>
<item><title><value>Python技巧和陷阱</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81486/</value></title_url><post_desc><value>Ryan 在 Red Hat的Openstack Heat项目组工作，已经用Python写了许多大大小小的应用，包括web、编排计划、后端应用等大小应用。Python是一种被广泛使用的强大语言，让我们深入这种语言，并且学习一些控制语句的技巧，标准库的窍门和一些常见的陷阱。</value></post_desc></item>
<item><title><value>Python模块学习：tempfile 临时文件(夹)操作</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81515/</value></title_url><post_desc><value>应用程序经常要保存一些临时的信息，这些信息不是特别重要，没有必要写在配置文件里，但又不能没有，这时候就可以把这些信息写到临时文件里。</value></post_desc></item>
<item><title><value>Python模块学习：zlib 数据压缩</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81513/</value></title_url><post_desc><value>Python标准模块中，有多个模块用于数据的压缩与解压缩，如zipfile，gzip, bz2等等。上次介绍了zipfile模块，今天就来讲讲zlib模块。</value></post_desc></item>
<item><title><value>Python文件关闭机制详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81477/</value></title_url><post_desc><value>Python程序员最初学到的东西里有一点就是可以通过迭代法很容易地遍历一个打开文件的全文</value></post_desc></item>
<item><title><value>Python模块学习 ：pickle, cPickle 对象序列化/反序列化</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81509/</value></title_url><post_desc><value>上次学习过marshal模块用于序列化和反序列化，但marshal的功能比较薄弱，只支持部分内置数据类型的序列化/反序列化，对于用户自定义的类型就无能为力，同时marshal不支持自引用(递归引用)的对象的序列化。所以直接使用marshal来序列化/反序列化可能不是很方便。还好，python标准库提供了功能更加强大且更加安全的pickle和cPickle模块。</value></post_desc></item>
<item><title><value>Python模块学习：marshal 对象的序列化</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81506/</value></title_url><post_desc><value>有时候，要把内存中的一个对象持久化保存到磁盘上，或者序列化成二进制流通过网络发送到远程主机上。Python中有很多模块提供了序列化与反序列化的功能，如：marshal, pickle, cPickle等等。今天就讲讲marshal模块。</value></post_desc></item>
<item><title><value>Python模块学习：copy 对象拷贝</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81504/</value></title_url><post_desc><value>copy模块用于对象的拷贝操作。该模块非常简单，只提供了两个主要的方法： copy.copy 与 copy.deepcopy ，分别表示浅复制与深复制。什么是浅复制，什么是深复制，网上有一卡车一卡车的资料，这里不作详细介绍。复制操作只对复合对象有效。</value></post_desc></item>
<item><title><value>在Python 3中实现类型检查器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81423/</value></title_url><post_desc><value>为了开发类型检查器，我们需要一个简单的函数对其进行实验。欧几里得算法就是一个完美的例子：</value></post_desc></item>
<item><title><value>python模块学习：Cookie</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81492/</value></title_url><post_desc><value> 最近在用GAE开发自己的博客程序。虽然GAE的API没有显式的提供操作Cookie的方法，但他现有的架构，使我们有足够的自由来操作Cookie。</value></post_desc></item>
<item><title><value>MicroPython：针对微控制器的Python</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81484/</value></title_url><post_desc><value>剑桥大学数学科学中心的Damien P. George在研究各种深奥数学、物理问题之余，还搞了一个MicroPython项目，将Python移植到ARM Cortex M微处理器上，并开发了电路板。2013年曾经在KickStarter上成功筹得近10万英镑。2014年成功完成项目，发货。</value></post_desc></item>
<item><title><value>每个 Python 程序员都要知道的日志实践</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81666/</value></title_url><post_desc><value>在现实生活中，记录日志非常重要。银行转账时会有转账记录；飞机飞行过程中，会有黑盒子（飞行数据记录器）记录飞行过程中的一切。如果有出现什么问题，人们可以通过日志数据来搞清楚到底发生了什么。</value><value>对于系统开发、调试以及运行，记录日志都是同样的重要。</value></post_desc></item>
<item><title><value>Python解释器简介（5）：深入主循环</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81660/</value></title_url><post_desc><value>本文将会带领大家了解 CPython 3.3 中的 Python 解释器。我们首先一起来看 Python 解释器的一个简短的高层概述，然后对解释器实现过程中的一些有意思的代码块进行深入的探讨。我已经把这里探讨的函数名和文件名囊括进来了，你可以在源码中找到它们自行阅读深究。</value></post_desc></item>
<item><title><value>Python中的函数详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81646/</value></title_url><post_desc><value>Python中的函数，无论是命名函数，还是匿名函数，都是语句和表达式的集合。在Python中，函数是第一个类对象，这意味着函数的用法并没有限制。Python函数的使用方式就像Python中其他值一样，例如字符串和数字等。</value></post_desc></item>
<item><title><value>与 Python 无缝集成：基本特殊方法 1</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81657/</value></title_url><post_desc><value>有许多特殊方法允许类与Python紧密结合，标准库参考将其称之为基本，基础或本质可能是更好的术语。这些特殊方法构成了创建与其他Python特性无缝集成的类的基础。</value></post_desc></item>
<item><title><value>用树莓派 + Python + OpenCV 实现家庭监控和移动目标探测（下）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81645/</value></title_url><post_desc><value>哇，上周那篇关于做一个基本运动检测系统的文章真是赞。写这篇文章很有乐趣，而且从像您一样的读者那里获得反馈，使我的努力变得很值得。对于那些刚看到这篇文章的朋友，上周那篇文章是关于使用计算机视觉来建立一个运动检测系统，其动机是因为我的朋友James，他罪恶的双手伸进了我的冰箱，偷走了我最后一罐令人垂涎的啤酒。</value></post_desc></item>
<item><title><value>使用Python的Socket模块构建一个UDP扫描工具</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81641/</value></title_url><post_desc><value>当涉及到对一些目标网络的侦察时，出发点无疑是首先发现宿主主机。这个任务还可能包含嗅探和解析网络中数据包的能力。</value></post_desc></item>
<item><title><value>通过pymongo测试MongoDB的高可用性</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81638/</value></title_url><post_desc><value>mongodb数据库用于生产环境中，除了考虑它的scalability以外，对于重要数据，肯定要考虑的就是HA。mongodb通过replica set这种PRIMARY/SECONDARY备份技术来实现高可用性，本文通过三个节点的mongodb环境，使用pymongo对其HA进行简单的测试</value></post_desc></item>
<item><title><value>Peter Norvig：用 Python 解决数独问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81621/</value></title_url><post_desc><value>在这篇文章中，我要处理求解任意数独这个问题。用了两个想法（idea）：约束传播和搜索后，它其实是很简单的（主旨大约只有一页代码，加上润色后也不过两页）。首先我们要在记号上达成一致。一个数独谜题是由 81 个方块组成的网格。</value></post_desc></item>
<item><title><value>做一个字节码追踪器，从内部理解 Python 的执行过程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81617/</value></title_url><post_desc><value>最近我在研究 Python 的执行模型。我对 Python 内部的东西挺好奇的，比如：类似 YIELDVALUE 和 YIELDFROM 此类操作码的实现；列表表达式、生成器表达式以及一些有趣的Python 特性是怎么编译的；异常触发之时，字节码层面发生了什么。</value></post_desc></item>
<item><title><value>3个开源的 Python Shell</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81612/</value></title_url><post_desc><value>Python是一个高级、通用、结构化且强大的开源编程语言，广泛用于各种编程工作。它拥有一个全动态类型系统和自动内存管理，与Scheme，Ruby，Perl和Tcl的十分相似，避免编译型语言的许多复杂地方和难以理解。</value></post_desc></item>
<item><title><value>用 Python 和 OpenCV 检测和跟踪运动对象</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81593/</value></title_url><post_desc><value>本篇文章写得妙趣横生，以讲故事的形式讲述了用树莓派结合Python和OpenCV 做一个监控系统，来验证是不是 James“偷喝”了作者最喜欢的啤酒。</value></post_desc></item>
<item><title><value>如何在Python中使用static、class、abstract方法（权威指南）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81595/</value></title_url><post_desc><value>方法就是一个函数，它作为一个类属性而存在，你可以用如下方式来声明、访问一个函数：Python在告诉你，属性_get_size是类Pizza的一个未绑定方法。这是什么意思呢？很快我们就会知道答案：</value></post_desc></item>
<item><title><value>构建健壮 Python 包的 5 个简单规则</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81579/</value></title_url><post_desc><value>创建一个软件包（package）似乎已经足够简单了，也就是在文件目录下搜集一些模块，再加上一个__init__.py文件，对吧？我们很容易看出来，随着时间的推移，通过对软件包的越来越多的修改，一个设计很差的软件包可能会出现循环依赖问题，或是可能变得不可移植和不可靠。</value></post_desc></item>
<item><title><value>一起写一个 Web 服务器（2）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81523/</value></title_url><post_desc><value>还记得吗？在本系列第一部分我问过你：“怎样在你的刚完成的WEB服务器下运行 Django 应用、Flask 应用和 Pyramid 应用？在不单独修改服务器来适应这些不同的WEB框架的情况下。”往下看，来找出答案。</value></post_desc></item>
<item><title><value>潜在的Python陷阱</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81564/</value></title_url><post_desc><value>Python是一种非常富有表现力的语言。它为我们提供了一个庞大的标准库和许多内置模块，帮助我们快速完成工作。然而，许多人可能会迷失在它提供的功能中，不能充分利用标准库，过度重视单行脚本，以及误解Python基本结构等。</value></post_desc></item>
<item><title><value>Python解释器PyPy 2.6.0发布，比CPython快7倍</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/81565/</value></title_url><post_desc><value>PyPy 2.6.0发布了，包括一些Python兼容性的改进、支持统计分析工具vmprof——旨在适应分析JIT’ed代码。另外，在谈到PyPy 2.6.0性能方面，不仅是改变了外观尺寸，还进行了内部重构和生产清理，从而获得了更好的JIT性能和提高了I/O性能。PyPy开发者声称，他们的benchmark套件比CPython快了7倍。</value></post_desc></item>
<item><title><value>Python模块学习： re 正则表达式</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81558/</value></title_url><post_desc><value>今天学习了Python中有关正则表达式的知识。关于正则表达式的语法，不作过多解释，网上有许多学习的资料。这里主要介绍Python中常用的正则表达式处理函数。</value></post_desc></item>
<item><title><value>Python模块学习：hashlib hash加密</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81556/</value></title_url><post_desc><value>不积跬步，无以至千里；不积小流，何以成江海．每天学习一个Python模块，一个月可以了解30个模块，一年可以… …今天看了一个Python中的hashlib及hmac模块，这两个模块用来hash加密。</value></post_desc></item>
<item><title><value>Python模块学习：struct 数据格式转换</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81554/</value></title_url><post_desc><value>Python是一门非常简洁的语言，对于数据类型的表示，不像其他语言预定义了许多类型（如：在C#中，光整型就定义了8种），它只定义了六种基本类型：字符串，整数，浮点数，元组，列表，字典。通过这六种数据类型，我们可以完成大部分工作。</value></post_desc></item>
<item><title><value>Python模块学习：glob 文件路径查找</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81552/</value></title_url><post_desc><value>glob模块是最简单的模块之一，内容非常少。用它可以查找符合特定规则的文件路径名。跟使用windows下的文件搜索差不多。查找文件只用到三个匹配符：”*”, “?”, “[]”。”*”匹配0个或多个字符；”?”匹配单个字符；”[]”匹配指定范围内的字符，如：[0-9]匹配数字。</value></post_desc></item>
<item><title><value>让 Python 更快地进行验证</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81833/</value></title_url><post_desc><value>在网页中输入密码后需要验证。有时验证所需的时间会比较长。本文介绍 Python 中的验证过程（不仅仅是散列法），还有如何在不降低安全性的条件下提高 Python 的验证速度。</value></post_desc></item>
<item><title><value>Python 自然语言处理（NLP）工具库汇总</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81834/</value></title_url><post_desc><value>NLTK 在使用 Python 处理自然语言的工具中处于领先的地位。它提供了 WordNet 这种方便处理词汇资源的接口，以及分类、分词、词干提取、标注、语法分析、语义推理等类库。</value></post_desc></item>
<item><title><value>在Django中实现一个高性能未读消息计数器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81836/</value></title_url><post_desc><value>计数器(Counter)是一个非常常用的功能组件，这篇blog以未读消息数为例，介绍了在 Django中实现一个高性能计数器的基本要点。</value></post_desc></item>
<item><title><value>一起写一个Web服务器（3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81820/</value></title_url><post_desc><value>在本系列第二部分，你已经创造了一个可以处理基本的 HTTP GET 请求的 WSGI 服务器。我还问了你一个问题，“怎么让服务器在同一时间处理多个请求？”在本文中你将找到答案。那么，系好安全带加大马力。你马上就乘上快车啦。</value></post_desc></item>
<item><title><value>Python的GIL是什么鬼，多线程性能究竟如何</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81822/</value></title_url><post_desc><value>博主在刚接触Python的时候时常听到GIL这个词，并且发现这个词经常和Python无法高效的实现多线程划上等号。本着不光要知其然，还要知其所以然的研究态度，博主搜集了各方面的资料，花了一周内几个小时的闲暇时间深入理解了下GIL，并归纳成此文，也希望读者能通过次本文更好且客观的理解GIL。</value></post_desc></item>
<item><title><value>“海盗”用Flask，“海军”用Django</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81803/</value></title_url><post_desc><value>如果你正在验证一个新想法或者做一个产品，就必须选择一个 web 框架来实现它。对 Python 开发者来说，Flask 和 Django 是两个最流行的 web 框架选项。</value></post_desc></item>
<item><title><value>10 行 Python 代码写的模糊查询</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81775/</value></title_url><post_desc><value>模糊匹配可以算是现代编辑器(在选择要打开的文件时)的一个必备特性了，它所做的就是根据用户输入的部分内容，猜测用户想要的文件名，并提供一个推荐列表供用户选择。</value></post_desc></item>
<item><title><value>自己动手写贝叶斯分类器给图书分类</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81764/</value></title_url><post_desc><value>首先，这是一个机器学习初学者兼非数学科班出身的非典型工程师的自学记录。所以本文不会特别理论，也不会太深入地讲解公式，但是会非常有目的性，针对一个特别现实的问题，从头开始分享解决方案，包括某些优化方案。</value></post_desc></item>
<item><title><value>一行 Python 实现并行化 -- 日常多线程操作的新思路</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81757/</value></title_url><post_desc><value>Python 在程序并行化方面多少有些声名狼藉。撇开技术上的问题，例如线程的实现和 GIL1，我觉得错误的教学指导才是主要问题。常见的经典 Python 多线程、多进程教程多显得偏“重”。而且往往隔靴搔痒，没有深入探讨日常工作中最有用的内容。</value></post_desc></item>
<item><title><value>值得关注的 10 个 Python 英文博客</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/81730/</value></title_url><post_desc><value>记得我当初开始学习 Python 的时候，我常渴望阅读 Python 的新博文，但相关文章并不多。所以这也是我写本文的一个原因。为向其他朋友传播扩散，本文推荐 10 个值得关注的 Python 英文博客。欢迎在评论区推荐值得关注的 Python 中文博客。</value></post_desc></item>
<item><title><value>基于 Python 和 Scikit-Learn 的机器学习介绍</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81721/</value></title_url><post_desc><value>你好，%用户名%！我叫Alex，我在机器学习和网络图分析（主要是理论）有所涉猎。我同时在为一家俄罗斯移动运营商开发大数据产品。这是我第一次在网上写文章，不喜勿喷。</value></post_desc></item>
<item><title><value>数据专家必知必会的 7 款 Python 工具</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81746/</value></title_url><post_desc><value>如果你有志于做一个数据专家，你就应该保持一颗好奇心，总是不断探索，学习，问各种问题。在线入门教程和视频教程能帮你走出第一步，但是最好的方式就是通过熟悉各种已经在生产环境中使用的工具而为成为一个真正的数据专家做好充分准备。</value></post_desc></item>
<item><title><value>Python命名空间和作用域窥探</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81367/</value></title_url><post_desc><value>Namespace（只）是 从名字到对象的一个映射(a mapping from name to objects) 。大部分namespace都是按Python中的字典来实现的。有一些常见的namespace：built-in中的集合（ abs() 函数等）、一个模块中的全局变量等。</value></post_desc></item>
<item><title><value>以 Python 为实例，介绍贝叶斯理论</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81720/</value></title_url><post_desc><value>利用Python代码实例，介绍贝叶斯理论。</value></post_desc></item>
<item><title><value>Flask 框架作者希望看到的 Python</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/76569/</value></title_url><post_desc><value>我不是Python 3的粉，也不喜欢这门语言的发展方向，这都不是什么秘密了。这也导致了最近几个月，铺天盖地邮件询问我，我到底想要Python怎样。所以我觉得我应该公开分享一下我的想法，给将来的程序语言设计者提供一些灵感。：）</value></post_desc></item>
<item><title><value>Python 中的进程、线程、协程、同步、异步、回调</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81692/</value></title_url><post_desc><value>进程和线程究竟是什么东西？传统网络服务模型是如何工作的？协程和线程的关系和区别有哪些？IO过程在什么时间发生？</value></post_desc></item>
<item><title><value>Python 并行任务技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81690/</value></title_url><post_desc><value>Python的并发处理能力臭名昭著。先撇开线程以及GIL方面的问题不说，我觉得多线程问题的根源不在技术上而在于理念。大部分关于Pyhon线程和多进程的资料虽然都很不错，但却过于细节。</value></post_desc></item>
<item><title><value>12步轻松搞定python装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81683/</value></title_url><post_desc><value>作为一名教python的老师，我发现学生们基本上一开始很难搞定python的装饰器，也许因为装饰器确实很难懂。搞定装饰器需要你了解一些函数式编程的概念，当然还有理解在python中定义和调用函数相关语法的一些特点。</value></post_desc></item>
<item><title><value>Python中使用内层函数的好处</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81679/</value></title_url><post_desc><value>让我们看一下写内层函数的三个常见原因。记住：在Python中，函数是“一等公民”，这意味着它们和其他对象平起平坐（例如：整型，字符串，列表，模块等）。你可以动态地创建和销毁它们，把它们传递给其他函数，把它们作为值返回，等等。</value></post_desc></item>
<item><title><value>怎样写一个拼写检查器（Python 版）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81675/</value></title_url><post_desc><value>上个星期, 我的两个朋友 Dean 和 Bill 分别告诉我说他们对 Google 的快速高质量的拼写检查工具感到惊奇. 比如说在搜索的时候键入 [speling], 在不到 0.1 秒的时间内, Google 会返回: 你要找的是不是 [spelling].</value></post_desc></item>
<item><title><value>在Python中使用线性回归预测数据</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81215/</value></title_url><post_desc><value>本文中，我们将进行大量的编程——但在这之前，我们先介绍一下我们今天要解决的实例问题。</value></post_desc></item>
<item><title><value>在Python中处理分数</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81213/</value></title_url><post_desc><value>你可能不需要经常处理分数，但当你需要时，Python的Fraction类会给你很大的帮助。在该指南中，我将提供一些有趣的实例，用于展示如何处理分数，突出显示一些很酷的功能。</value></post_desc></item>
<item><title><value>Python中的str与unicode处理方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81244/</value></title_url><post_desc><value>python2.x中处理中文，是一件头疼的事情。网上写这方面的文章，测次不齐，而且都会有点错误，所以在这里打算自己总结一篇文章。</value></post_desc></item>
<item><title><value>Python基础技术问题总结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81233/</value></title_url><post_desc><value>此篇文章总结python一些常见的技术问题,每一个都是简短的解释,篇幅不大，不断更新中…</value></post_desc></item>
<item><title><value>Pandas透视表（pivot_table）详解</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81212/</value></title_url><post_desc><value>也许大多数人都有在Excel中使用数据透视表的经历，其实Pandas也提供了一个类似的功能，名为pivot_table。虽然pivot_table非常有用，但是我发现为了格式化输出我所需要的内容，经常需要记住它的使用语法。</value></post_desc></item>
<item><title><value>Python中的类和对象（二）：描述符</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81211/</value></title_url><post_desc><value>描述符（Descriptors）是Python语言中一个深奥但却重要的一部分。它们广泛应用于Python语言的内核，熟练掌握描述符将会为Python程序员的工具箱添加一个额外的技巧。为了给接下来对描述符的讨论做一些铺垫，我将描述一些程序员可能会在日常编程活动中遇到的场景，然后我将解释描述符是什么，以及它们如何为这些场景提供优雅的解决方案。</value></post_desc></item>
<item><title><value>Python代码微优化之加快查找</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81210/</value></title_url><post_desc><value>我将示范微优化（micro optimization）如何提升python代码5%的执行速度。5%！同时也会触怒任何维护你代码的人。但实际上，这篇文章只是解释一下你偶尔会在标准库或者其他人的代码中碰到的代码。我们先看一个标准库的例子，collections.OrderedDict类</value></post_desc></item>
<item><title><value>Python中导入模块或包语句</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81187/</value></title_url><post_desc><value>这篇文章讨论了Python的from  import *和from  import *，它们怎么执行以及为什么使用这种语法（也许）是一个坏主意。</value></post_desc></item>
<item><title><value>用 Python 绘制音乐图谱</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81186/</value></title_url><post_desc><value>在本文中，我们将探讨一种简洁的方式，以此来可视化你的MP3音乐收藏。此方法最终的结果将是一个映射你所有歌曲的正六边形网格地图，其中相似的音轨将处于相邻的位置。不同区域的颜色对应不同的音乐流派（例如：古典、嘻哈、重摇滚）。</value></post_desc></item>
<item><title><value>用Python和MoviePy将数据动态可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81185/</value></title_url><post_desc><value>Python有些出色的数据可视化库，但很少能渲染GIF或视频动画。</value><value>本文介绍如何运用MoviePy作为其他库的通用动画插件。</value></post_desc></item>
<item><title><value>Python函数参数默认值的陷阱和原理深究</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81203/</value></title_url><post_desc><value>本文将介绍使用mutable对象作为Python函数参数默认值潜在的危害，以及其实现原理和设计目的。我们就用实际的举例来演示我们今天所要讨论的主要内容。</value></post_desc></item>
<item><title><value>零基础学习PDB命令行调试Python代码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81184/</value></title_url><post_desc><value>你有多少次陷入不得不更改别人代码的境地？如果你是一个开发团队的一员，那么你遇到上述境地的次数比你想要的还要多。然而，Python中有一个整洁的调试特性（像其他大多数语言一样），在这种情况下使用非常方便。本文是一篇快速教程，希望它能让你的编码生活更加容易。</value></post_desc></item>
<item><title><value>14个轻量级Python Web框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81134/</value></title_url><post_desc><value>我最近发表了一篇名为 ‘7 Minimal Node.js Web Frameworks for 2014 and Beyond‘ 的博文——目前它是我博客访问量最高的文章：超过10000人浏览，分享和评论了这些我总结到一起的web框架。</value></post_desc></item>
<item><title><value>使用Python和OpenCV在视频中实时监测条形码</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81130/</value></title_url><post_desc><value>今天的博客是上篇博客的继续，上篇博客是使用Python和OpenCV检测图像中的条形码。今天我们将重构代码去检测视频中的条形码。举个例子，下图是我实验的一个截图，我手持Modern Warfare 3，我们的程序能够顺利检测到其背面的条形码。</value></post_desc></item>
<item><title><value>在Linux中使用matplotlib进行科学画图</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81182/</value></title_url><post_desc><value>如果你想要在Linxu中获得一个高效、自动化、高质量的科学画图的解决方案，应该考虑尝试下matplotlib库。Matplotlib是基于python的开源科学测绘包，基于python软件基金会许可证发布。</value></post_desc></item>
<item><title><value>在Linux上使用Python和Flask创建你的第一个应用</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81178/</value></title_url><post_desc><value>无论你在linux上娱乐还是工作，这对你而言都是一个使用python来编程的很好的机会。回到大学我希望他们教我的是Python而不是Java，这学起来很有趣且在实际的应用如yum包管理器中很有用。</value></post_desc></item>
<item><title><value>Python语言下的机器学习库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81135/</value></title_url><post_desc><value>Python是最好的编程语言之一，在科学计算中用途广泛：计算机视觉、人工智能、数学、天文等。它同样适用于机器学习也是意料之中的事。</value></post_desc></item>
<item><title><value>利用Python和OpenCV将URL直接转换成OpenCV格式</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81131/</value></title_url><post_desc><value>今天的博客是直接来源于我自己的个人工具函数库。过去几个月，有些PyImageSearch读者电邮问我：“如何获取URL指向的图片并将其转换成OpenCV格式（不用将其写入磁盘再读回）”。这篇文章我将展示一下怎么实现这个功能。</value></post_desc></item>
<item><title><value>详解Python中的下划线</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81129/</value></title_url><post_desc><value>本文将讨论Python中下划线（_）字符的使用方法。我们将会看到，正如Python中的很多事情，下划线的不同用法大多数（并非所有）只是常用惯例而已。</value></post_desc></item>
<item><title><value>Python数据分析入门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81133/</value></title_url><post_desc><value>最近，Analysis with Programming加入了Planet Python。作为该网站的首批特约博客，我这里来分享一下如何通过Python来开始数据分析。具体内容如下：</value></post_desc></item>
<item><title><value>Python下用Scrapy和MongoDB构建爬虫系统（1）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81320/</value></title_url><post_desc><value>这篇文章将根据真实的兼职需求编写一个爬虫，用户想要一个Python程序从Stack Overflow抓取数据，获取新的问题（问题标题和URL）。抓取的数据应当存入MongoDB。值得注意的是，Stack Overflow已经提供了可用于读取同样数据的API。但是用户想要一个爬虫，那就给他一个爬虫。</value></post_desc></item>
<item><title><value>也谈如何阅读程序源代码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81326/</value></title_url><post_desc><value>这周完成了一个意料之外的工作，我把python的wtfroms， voluptuous，logging三个包的代码读了，还读得挺high的。</value><value>
之前我一直觉得读源代码是件痛苦的事情，不过不知怎么的不怕了，还挺享受的。所以我总结了一下读代码的心得，分享一下。</value></post_desc></item>
<item><title><value>将Sublime Text 3设置为Python全栈开发环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81312/</value></title_url><post_desc><value>Sublime Text 3 (ST3) 是一个轻量级的跨平台文字编辑器，尤以其轻快的速度，易用性和强大的社区支持而著称。它一经面世便被认为是一个杰出的编辑器，而它真正的强大之处在于你可以使用 Package Control 来增加它的功能以及可以进行各种自定义设置。</value></post_desc></item>
<item><title><value>文本向量空间模型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81311/</value></title_url><post_desc><value>我们需要开始思考如何将文本集合转化为可量化的东西。最简单的方法是考虑词频。我将尽量尝试不使用NLTK和Scikits-Learn包。我们首先使用Python讲解一些基本概念。</value></post_desc></item>
<item><title><value>如何获得NumPy的最佳性能</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81310/</value></title_url><post_desc><value>NumPy是Python中众多科学软件包的基础。它提供了一个特殊的数据类型ndarray，其在向量计算上做了优化。这个对象是科学数值计算中大多数算法的核心。</value></post_desc></item>
<item><title><value>Python模块学习：datetime</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81482/</value></title_url><post_desc><value>Python提供了多个内置模块用于操作日期时间，像calendar，time，datetime。time模块我在之前的文章已经有所介绍，它提供的接口与C标准库time.h基本一致。相比于time模块，datetime模块的接口则更直观、更容易调用。今天就来讲讲datetime模块。</value></post_desc></item>
<item><title><value>用主题模型可视化分析911新闻（Python版）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81279/</value></title_url><post_desc><value>近代美国历史上再没有比911袭击影响更深远的事件了，它的影响在未来还会持续。从事件发生到现在，成千上万主题各异的文章付梓。我们怎样能利用数据科学的工具来探索这些主题，并且追踪它们随着时间的变化呢？</value></post_desc></item>
<item><title><value>利用图片指纹检测高相似度图片</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81277/</value></title_url><post_desc><value>大概五年前吧，我那时还在为一家约会网站做开发工作。他们是早期创业公司，但他们也开始拥有了一些稳定用户量。不像其他约会网站，这家公司向来以洁身自好为主要市场形象。它不是一个供你鬼混的网站——是让你能找到忠实伴侣的地方。</value></post_desc></item>
<item><title><value>使用PyQt来编写第一个Python GUI程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81276/</value></title_url><post_desc><value>许多人在学习如何创建一个 GUI 应用的时候都感到十分的困难。其中最重要的原因是，他们不知道应该从何下手。大多数的教程都只有文字，但事实上仅仅依靠文字很难学会 GUI 编程，因为 GUI 应用大多数都是基于视觉上的。</value></post_desc></item>
<item><title><value>机器学习算法原理之人工神经元和单层神经网络</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81278/</value></title_url><post_desc><value>本文将简单介绍机器学习的历史和基本概念。我们会看看第一个用算法描述的神经网络和适用于自适应线性神经元的梯度下降算法，这些知识不仅介绍了机器学习原理，还是后续文章中现代多层神经网络的基础。</value></post_desc></item>
<item><title><value>Python模块学习：filecmp 文件比较</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81480/</value></title_url><post_desc><value> filecmp模块用于比较文件及文件夹的内容，它是一个轻量级的工具，使用非常简单。python标准库还提供了difflib模块用于比较文件的内容。关于difflib模块，且听下回分解。</value></post_desc></item>
<item><title><value>Python模块学习：urllib</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81478/</value></title_url><post_desc><value>urllib模块提供的上层接口，使我们可以像读取本地文件一样读取www和ftp上的数据。每当使用这个模块的时候，老是会想起公司产品的客户端，同事用C++下载Web上的图片，那种“痛苦”的表情。</value></post_desc></item>
<item><title><value>Python模块学习：atexit</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81473/</value></title_url><post_desc><value>atexit模块很简单，只定义了一个register函数用于注册程序退出时的回调函数，我们可以在这个回调函数中做一些资源清理的操作。</value></post_desc></item>
<item><title><value>python模块学习：anydbm, shelve</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81471/</value></title_url><post_desc><value> anydbm允许我们将一个磁盘上的文件与一个“dict-like”对象关联起来，操作这个“dict-like”对象，就像操作dict对象一样，最后可以将“dict-like”的数据持久化到文件。对这个”dict-like”对象进行操作的时候，key和value的类型必须是字符串。</value></post_desc></item>
<item><title><value>基于Python的测试驱动开发实战</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81305/</value></title_url><post_desc><value>近年来测试驱动开发(TDD)受到越来越多的关注。这是一个持续改进的过程，能从一开始就形成规范，帮助提高代码质量。这是切实可行的而非天马行空的。</value></post_desc></item>
<item><title><value>基于Python的行为驱动开发实战</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81303/</value></title_url><post_desc><value>行为驱动开发(Behavior-Driven Development,BDD)是一种卓越的开发模式。能帮助开发者养成日清日结的好习惯，从而避免甚至杜绝“最后一分钟”的情况出现，因此对提高代码质量是大有裨益的。</value></post_desc></item>
<item><title><value>在 Python 中测试竞争条件</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81275/</value></title_url><post_desc><value>当你有多个进程或线程访问相同的数据时，竞争条件是一个威胁。本文探讨了在发现竞争条件后如何测试它们。你在一个名为“Incrmnt”的火热新创公司工作，该公司只做一件事情，并且做得比较好。你展示一个全局计数器和一个加号，用户可以点击加号，此时计数器加一。这太简单了，而且容易使人上瘾。毫无疑问这就是接下来的大事情。</value></post_desc></item>
<item><title><value>如何入门 Python 爬虫？</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81296/</value></title_url><post_desc><value>“入门”是良好的动机，但是可能作用缓慢。如果你手里或者脑子里有一个项目，那么实践起来你会被目标驱动，而不会像学习模块一样慢慢学习。</value><value>另外如果说知识体系里的每一个知识点是图里的点，依赖关系是边的话，那么这个图一定不是一个有向无环图。因为学习A的经验可以帮助你学习B。</value></post_desc></item>
<item><title><value>Python模块学习：fileinput</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81469/</value></title_url><post_desc><value>用python写一个分析工具非常简单，你会说，用glob获取所有的日志文件，然后对每个日志文件都open(logfile)，再一行一行的读取；或者用os.walk，也很简单。其实，标准库提供了另一个辅助模块，我们可以非常方便的完成这个工作，那就是fileinput。</value></post_desc></item>
<item><title><value>Python算法：图</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81467/</value></title_url><post_desc><value>本节主要介绍图算法中的各种最短路径算法，从不同的角度揭示它们的内核以及它们的异同</value></post_desc></item>
<item><title><value>Python算法：动态规划</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81465/</value></title_url><post_desc><value>本节主要结合一些经典的动规问题介绍动态规划的备忘录法和迭代法这两种实现方式，并对这两种方式进行对比</value></post_desc></item>
<item><title><value>Python算法：贪心策略</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81463/</value></title_url><post_desc><value>本节主要通过几个例子来介绍贪心策略，主要包括背包问题、哈夫曼编码和最小生成树</value></post_desc></item>
<item><title><value>Python算法：分治法</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81461/</value></title_url><post_desc><value>本节主要介绍分治法策略，提到了树形问题的平衡性以及基于分治策略的排序算法</value></post_desc></item>
<item><title><value>Python循环语句中的索引变量作用域</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81274/</value></title_url><post_desc><value>我们从一个测试开始。下面这个函数的功能是什么？如果你觉得它的功能是“计算lst中所有元素的和与积”，不要沮丧。通常很难发现这里的错误。如果在大堆真实的代码中发现了这个错误就非常厉害了。</value></post_desc></item>
<item><title><value>Django项目该如何布局？我推荐这样做</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81229/</value></title_url><post_desc><value>“Django应用、配置文件以及其他各种相关目录的最佳布局是什么样的？” 总是有朋友问我们这个问题，因此我想花一点时间，写一下我们究竟是如何看待这个问题的，这样我们就可以很容易让其他人参照这个文档。</value><value>虽然 Django 1.4 发布时，它包含了一个改进后的项目布局（这还用了很长一段时间），但本文有一些优化项目布局的更好建议。</value></post_desc></item>
<item><title><value>教你用Python创建瀑布图</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81259/</value></title_url><post_desc><value>对于绘制某些类型的数据来说，瀑布图是一种十分有用的工具。不足为奇的是，我们可以使用Pandas和matplotlib创建一个可重复的瀑布图。在往下进行之前，我想先告诉大家我指代的是哪种类型的图表。我将建立一个维基百科文章中描述的2D瀑布图。</value></post_desc></item>
<item><title><value>Python并发与并行的新手指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81260/</value></title_url><post_desc><value> 在批评Python的讨论中，常常说起Python多线程是多么的难用。还有人对 global interpreter lock(也被亲切的称为“GIL”)指指点点，说它阻碍了Python的多线程程序同时运行。因此，如果你是从其他语言（比如C++或Java）转过来的话，Python线程模块并不会像你想象的那样去运行。</value></post_desc></item>
<item><title><value>Python算法：遍历</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81457/</value></title_url><post_desc><value>本节主要介绍图的遍历算法BFS和DFS，以及寻找图的(强)连通分量的算法</value></post_desc></item>
<item><title><value>Python算法：Counting 101</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81450/</value></title_url><post_desc><value>原书主要介绍了一些基础数学，例如排列组合以及递归循环等，但是本节只重点介绍计算算法的运行时间的三种</value></post_desc></item>
<item><title><value>Python算法：推导、递归和规约</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81453/</value></title_url><post_desc><value>本节主要介绍算法设计的三个核心知识：Induction(推导)、Recursion(递归)和Reduction(规约)，这是原书的重点和难点部分</value></post_desc></item>
<item><title><value>Python算法：基础知识</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81445/</value></title_url><post_desc><value>本节主要介绍了三个内容：算法渐近运行时间的表示方法、六条算法性能评估的经验以及Python中树和图的实现方式。</value></post_desc></item>
<item><title><value>提升 Python 程序性能的 6 个技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81035/</value></title_url><post_desc><value>Python是一个很酷的语言，因为你可以在很短的时间内利用很少的代码做很多事情。不仅如此，它还能轻松地支持多任务，比如多进程等。Python批评者有时会说Python执行缓慢。本文将尝试介绍6个技巧，可加速你的Python应用程序。</value></post_desc></item>
<item><title><value>使用IronPython集成Python和.NET</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80982/</value></title_url><post_desc><value>从两个优秀的世界各取所需，更高效的复用代码。想想就醉了，.NET和python融合了。“懒惰”的程序员们，还等什么？</value></post_desc></item>
<item><title><value>再次介绍Into包：整洁地数据迁移</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81136/</value></title_url><post_desc><value>我们花费大量的时间将数据从普通的交换格式（比如CSV），迁移到像数组、数据库或者二进制存储等高效的计算格式。更糟糕的是，许多人没有将数据迁移到高效的格式，因为他们不知道怎么（或者不能）为他们的工具管理特定的迁移方法。</value></post_desc></item>
<item><title><value>Python 与 Javascript 之比较</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/81257/</value></title_url><post_desc><value>最近由于工作的需要开始开发一些Python的东西，由于之前一直在使用Javascript，所以会不自觉的使用一些Javascript的概念，语法什么的，经常掉到坑里。我觉得对于从Javascript转到Python，有必要总结一下它们之间的差异。</value></post_desc></item>
<item><title><value>使用Python进行并发编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81255/</value></title_url><post_desc><value>让计算机程序并发的运行是一个经常被讨论的话题，今天我想讨论一下Python下的各种并发方式。</value></post_desc></item>
<item><title><value>让Python代码更快运行的 5 种方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81252/</value></title_url><post_desc><value>不论什么语言，我们都需要注意性能优化问题，提高执行效率。选择了脚本语言就要忍受其速度，这句话在某种程度上说明了Python作为脚本语言的不足之处，那就是执行效率和性能不够亮。</value></post_desc></item>
<item><title><value>Scrapy+Flask+Mongodb+Swift开发全攻略（3）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81427/</value></title_url><post_desc><value>不知不觉已经到了第三篇了。那么我们经过之前的学习，掌握了哪些内容呢？1.学会了如何用python的scrapy框架来趴一些数据。2.学会了把爬虫爬来的数据存入mongodb。3.学会了怎么用Flask写一个简单的接口。</value></post_desc></item>
<item><title><value>Scrapy+Flask+Mongodb+Swift开发全攻略（2）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81424/</value></title_url><post_desc><value>好的，这期开始之前，我们先要干两件事。第一件事是找到spiders文件夹里的dbmeizi_scrapy.py。打开他，上一篇教程里，这个爬虫文件是这么写的。</value></post_desc></item>
<item><title><value>无需操作系统直接运行 Python 代码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81420/</value></title_url><post_desc><value>Josh Triplett以一个“笑点”开始了他在PyCon 2015上的演讲：移植Python使其无需操作系统运行：他和他的英特尔同事让解释器能够在GRUB引导程序、BIOS或EFI系统上运行。</value></post_desc></item>
<item><title><value>需求驱动学习之Python（如何编写Python脚本替换文件中的多行字符？）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81417/</value></title_url><post_desc><value>在大概3个月之前，Python对我来说一直是个迷。然而，就在3个月前我经理给我一个任务——删除（替换）所有项目源码文件中包含特定几行内容的所有注释。</value></post_desc></item>
<item><title><value>我希望初学Python时就能知道的一些用法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81020/</value></title_url><post_desc><value>有时候我反问我自己，怎么不知道在Python 3中用更简单的方式做“这样”的事，当我寻求答案时，随着时间的推移，我当然发现更简洁、有效并且bug更少的代码。总的来说（不仅仅是这篇文章），“那些”事情总共数量是超过我想象的，但这里是第一批不明显的特性，后来我寻求到了更有效的/简单的/可维护的代码。</value></post_desc></item>
<item><title><value>用Flask实现视频数据流传输</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80994/</value></title_url><post_desc><value>Flask 是一个 Python 实现的 Web 开发微框架。这篇文章是一个讲述如何用它实现传送视频数据流的详细教程。</value></post_desc></item>
<item><title><value>这不是魔法：Flask和@app.route（2）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80993/</value></title_url><post_desc><value>“这不是魔法”是作者正在写的一系列文章，用于介绍一些优秀的开源软件包的使用方法。本篇有两部分，介绍Flask中@app.route的使用。在这篇文章中，作者稍微调高了难度，为的URL加入可变参数的能力。</value></post_desc></item>
<item><title><value>11个并不广为人知，但值得了解的Python库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81000/</value></title_url><post_desc><value>近来，越来越多的数据科学家开始使用Python，我不由得想到，尽管他们从pandas、scikit-learn和numpy这些库中得到了不少好处，但是他们也许错过了一些也许较老但同样有帮助的Python库。在这篇博文里，我将给大家推荐一些鲜为人知的库。即便你是Python高手，也应该看一看，其中的一到两个库可能是你从没见过的。</value></post_desc></item>
<item><title><value>关于Python日志系统的几点建议</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81132/</value></title_url><post_desc><value>Python日志系统非常丰富。添加结构化或非结构化日志输出到python代码，写到文件，输出到控制台，发送到系统日志，或者自定义输出格式都很容易。我们正在重新检查mozharness中日志的工作机制，希望提取代码能更容易，并减少掺合模式的使用。</value></post_desc></item>
<item><title><value>Python 网页爬虫 &amp; 文本处理 &amp; 科学计算 &amp; 机器学习 &amp; 数据挖掘兵器谱</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81153/</value></title_url><post_desc><value>曾经因为NLTK的缘故开始学习Python，之后渐渐成为我工作中的第一辅助脚本语言，虽然开发语言是C/C++，但平时的很多文本数据处理任务都交给了Python。</value></post_desc></item>
<item><title><value>在Raspberry Pi 2/B+上安装Python和OpenCV</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81106/</value></title_url><post_desc><value>我的Raspberry Pi 2昨天刚邮到，这家伙看上去很小巧可爱。这小家伙有4核900MHZ的处理器，1G内存。要知道，Raspberry Pi 2 可比我中学电脑实验室里大多数电脑快多了。话说，自从Raspberry Pi 2发布以来，我收到了很多请求，要求我能写一个在它上面安装OpenCV和Python的详细说明。因此如果你想在Raspberry Pi启动运行OpenCV和Python，就往下面看！</value></post_desc></item>
<item><title><value>使用Python开发Chrome插件</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81409/</value></title_url><post_desc><value>谷歌Chrome插件是使用HTML、JavaScript和CSS编写的。如果你之前从来没有写过Chrome插件，我建议你读一下这个。在这篇教程中，我们将教你如何使用Python代替JavaScript。</value></post_desc></item>
<item><title><value>在Flask中验证注册用户的Email</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81410/</value></title_url><post_desc><value>工作流程上来讲，在用户注册一个新账户后会寄送一个确认信。直到用户按指示完成了邮件中的“验证”，否则他们的账户会一直处于“未验证”状态。这是大多数网络应用会采用的工作流程。</value></post_desc></item>
<item><title><value>Y分钟学会Python</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/80995/</value></title_url><post_desc><value>Python由Guido Van Rossum发明于90年代初期，是目前最流行的编程语言之一，因其语法的清晰简洁我爱上了Python，其代码基本上可以 说是可执行的伪代码。</value><value>备注：本文是专门针对Python 2.7的，但应该是适用于Python 2.x的。</value></post_desc></item>
<item><title><value>用Pandas完成Excel中常见的任务（2）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80972/</value></title_url><post_desc><value>在第一篇文章中，我着重介绍了Excel中常见的数学计算工作，以及在pandas如何完成这些工作。在本文中，我们将着重介绍一些常见的选择和筛选任务，并且介绍如何在pandas中完成同样的事情。</value></post_desc></item>
<item><title><value>Python并发之threading模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80966/</value></title_url><post_desc><value>Python有不同的并发结构（模块），如threading、queues和multiprocessing。一般都是有threading模块来完成并发。几年前，multiprocessing模块也添加到Python的标准库中了。本文侧重于介绍threading模块的介绍。</value></post_desc></item>
<item><title><value>数据科学的完整学习路径（Python版）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80981/</value></title_url><post_desc><value>假如你想成为一个数据科学家，或者已经是数据科学家的你想扩展你的技能，那么你已经来对地方了。本文的目的就是给数据分析方面的Python新手提供一个完整的学习路径。</value></post_desc></item>
<item><title><value>Python中setup.py一些不为人知的技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80912/</value></title_url><post_desc><value>在我开始之前，我想先说清楚我将要解释的是些“窍门”。他们不是“最好的做法”，至少在一种情况下是不可取的。</value><value>
说到不可取的做法，我会适时写一个“setup.py陷阱”的博文，这都是我相信你不会在setup.py模块做出的事情。</value></post_desc></item>
<item><title><value>使用Python写一个小小的项目监控</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80897/</value></title_url><post_desc><value>使用python做了一个小监控，监控公司一个项目的日志库：如果扫到有一定数量的error日志就报警，如果只有一两条错误就可以无视了，也就是短时间爆发大量错误日志，就可以断定系统有问题了。报警方式就用发送邮件的方式。</value></post_desc></item>
<item><title><value>通过示例学习Python列表推导</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80823/</value></title_url><post_desc><value>列表生成式（list comprehension）是一种简化代码的优美方法。根据python文档，“列表生成式提供了一种创建列表的简洁方法。”在这篇教程里，我将会使用一些例子来展示如果使用列表推导式。</value></post_desc></item>
<item><title><value>Python中的默认参数</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81105/</value></title_url><post_desc><value>文本介绍了Python中的默认参数，作者从自己的经历中总结了Python默认参数的使用中，易犯的错误。通过本篇文章可以深入掌握Python默认参数的细节。</value></post_desc></item>
<item><title><value>Python中的类和对象（中级）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81108/</value></title_url><post_desc><value>Python中一切都是对象。类提供了创建新类型对象的机制。这篇教程中，我们不谈类和面向对象的基本知识，而专注在更好地理解Python面向对象编程上。假设我们使用新风格的python类，它们继承自object父类。</value></post_desc></item>
<item><title><value>在Python中对MySQL中的数据进行可视化</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81110/</value></title_url><post_desc><value>本教程的所有Python代码可以在网上的IPython notebook中获取。考虑在公司里使用Plotly？可以看一下Plotly的on-premises企业版。注意操作系统：尽管Windows或Mac用户也可以跟随本文操作，但本文假定你使用的是Ubuntu系统（Ubuntu桌面版或Ubuntu服务器版）。</value></post_desc></item>
<item><title><value>Python中备忘功能和装饰器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81107/</value></title_url><post_desc><value>“memoization”（备忘）这个词是由Donald Michie在1968年提出的，它基于拉丁语单词“memorandum”（备忘录），意思是“被记住”。虽然它和单词“memorization”在某种程度上有些相似，但它并不是该单词的错误拼写。</value></post_desc></item>
<item><title><value>网络爬虫剖析，以Pyspider为例</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81109/</value></title_url><post_desc><value>在这篇文章中，我们将分析一个网络爬虫。网络爬虫是一个扫描网络内容并记录其有用信息的工具。它能打开一大堆网页，分析每个页面的内容以便寻找所有感兴趣的数据，并将这些数据存储在一个数据库中，然后对其他网页进行同样的操作。</value></post_desc></item>
<item><title><value>零基础自学用Python 3开发网络爬虫(五): 使用第三方模块快速抓取与解析</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81102/</value></title_url><post_desc><value>在前面的四篇文章中, 我们一直采用 python 3 自带的 urllib  模块来抓取网页, 然后用 re 模块来处理抓取到的数据. 这次我们使用 Requests 库来代替 urllib, 用 BeautifulSoup 来代替 re 模块.</value></post_desc></item>
<item><title><value>Python进阶之“属性（property）”详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80955/</value></title_url><post_desc><value>Python中有一个被称为属性函数(property)的小概念，它可以做一些有用的事情。在这篇文章中，我们将看到如何能做以下几点：将类方法转换为只读属性，重新实现一个属性的setter和getter方法</value></post_desc></item>
<item><title><value>另一个Lambda表达式教程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80954/</value></title_url><post_desc><value>网上有很多python的lambda教程，其中我最近偶然发现并觉得有用的一个是Mike Driscoll在Mouse vs Python博客的对lambda讨论。</value><value>我刚学习Python时，最让我头晕的概念是lambda语句。我相信其他的新手也会对它感到疑惑。Mike的论述非常出色：简洁、透彻、有生动的例子。这帮助我掌握了lambda，也让我写了另一个Lambda表达式教程。。。。 </value></post_desc></item>
<item><title><value>这不是魔法：Flask和@app.route（1）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80956/</value></title_url><post_desc><value>距离我上一次写文章到现在已经颇有一段时间了，我想差不多也该在博客里开始新的系列了。</value><value>
本文是我称为「这不是魔法」系列的第一篇，我准备在里面展示一些热门开源包提供的友好API是如何通过它们各自语言的原始语法构造的。</value></post_desc></item>
<item><title><value>用Python在地图上模拟疫情扩散</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80938/</value></title_url><post_desc><value>受杰森Almost Looks Like Work的启发，我来展示一些病毒传播模型。需要注意的是这个模型并不反映现实情况，因此不要误以为是西非可怕的传染病。相反，它更应该被看做是某种虚构的僵尸爆发现象。那么，让我们进入主题。</value></post_desc></item>
<item><title><value>Python自然语言处理</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80937/</value></title_url><post_desc><value>本月的每月挑战会主题是NLP，我们会在本文帮你开启一种可能：使用pandas和python的自然语言工具包分析你Gmail邮箱中的内容。</value></post_desc></item>
<item><title><value>用Pandas完成Excel中常见的任务</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80870/</value></title_url><post_desc><value>本文的目的，是向您展示如何使用 pandas 来执行一些常见的 Excel 任务。有些例子比较琐碎，但我觉得展示这些简单的东西，与那些你可以在其他地方找到的复杂功能同等重要。</value></post_desc></item>
<item><title><value>用Python挖掘Linux系统</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/80869/</value></title_url><post_desc><value>在这篇文章里，我们将会探索如何使用Python语言作为一个工具来检测Linux系统各种运行信息。让我们一起来学习吧。</value></post_desc></item>
<item><title><value>我希望早点就知道的10个Python用法</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/80865/</value></title_url><post_desc><value>我一辈子都在写代码，但从来没有掌握编码的精髓。大部分情况下使用Visual Basic，因为我用VB最舒服。同时还略微了解一点其他语言（R、C、JavaScript、Applescript、Hypertext和1979年学习的BASIC）。几年前，我决定只用Python，以此来提高我的编码能力。在此过程中重复发明了许多轮子</value></post_desc></item>
<item><title><value>Python和数据科学的起步指南</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/80853/</value></title_url><post_desc><value>Python拥有着极其丰富且稳定的数据科学工具环境。遗憾的是，对不了解的人来说这个环境犹如丛林一般（cue snake joke）。在这篇文章中，我会一步一步指导你怎么进入这个PyData丛林。</value></post_desc></item>
<item><title><value>编写兼容 Python 2.x 和 3.x 代码的方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81091/</value></title_url><post_desc><value>Wesley Chun 是《Core Python》一书的作者，这篇文章介绍了编写兼容 Python 2.x 和 3.x 代码的方法</value></post_desc></item>
<item><title><value>30分钟编写一个Flask应用</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81085/</value></title_url><post_desc><value>今天我来带你搭建你的第一个Flask web应用！和官方教程 一样，你将搭建你自己的微博客系统：Flaskr。和官方Flask教程不同的是——我们通过使用Stormpath来创建并管理用户账户和数据，你的工作效率会更高。开发进程会显著地加快！</value></post_desc></item>
<item><title><value>一次Python内部的探险</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81062/</value></title_url><post_desc><value>我最近花了一些时间在探索CPython，并且我想要在这里分享我的一些冒险经历。Allison Kaptur的excellent guide to getting started with Python internals 有一点啰嗦，我想逐步介绍我自己的探索过程会更加有条理性，这样也许其他好奇的Python使用者可以跟着一起做。</value></post_desc></item>
<item><title><value>Python中循环语句中的else用法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81063/</value></title_url><post_desc><value>本文讨论Python的for…else和while…else语法，这是Python中最不常用、最为误解的语法特性之一。</value><value>Python中的for、while循环都有一个可选的else分支（类似if语句和try语句那样），在循环迭代正常完成之后执行。换句话说，如果我们不是以除正常方式以外的其他任意方式退出循环，那么else分支将被执行。</value></post_desc></item>
<item><title><value>在Python中正确使用Unicode</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80939/</value></title_url><post_desc><value>正确处理文本，特别是正确处理Unicode。是个老生常谈的问题，有时甚至会难倒经验丰富的开发者。并不是因为这个问题很难，而是因为对软件中的文本，开发者没有正确理解一些关键概念及其表示方法。</value></post_desc></item>
<item><title><value>使用gettext模块翻译Python3源码以支持国际化</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80925/</value></title_url><post_desc><value>你写了一个Python 3程序，还想要它适用于其他语言。你能复制全部代码库，然后刻意地检查每个.py文件，替换掉所有找到的文本字符串。但这意味着你有两份你代码的独立副本，每当你要做出个改动或修复个bug，你的工作量会加倍。</value></post_desc></item>
<item><title><value>人们对Python在企业级开发中的10大误解</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/80936/</value></title_url><post_desc><value>eBay/PayPal的Python社区，2011年只有25名工程师，而2014年这个数字已经超过了260。接下来的一系列文章，我会详细介绍促进Python社区发展的举措和技术。对于这篇介绍性文章，我会专注于人们对Python的10个误解，它们中大多数，我都已经在eBay和PayPal的企业级环境中对它的真相予以揭穿。</value></post_desc></item>
<item><title><value>Python的defaultdict模块和namedtuple模块</value></title><lei><value>未分类</value></lei><title_url><value>http://python.jobbole.com/80847/</value></title_url><post_desc><value>Python的collections模块在内置数据类型的基础上，提供了几个额外的数据类型：namedtuple, defaultdict, deque, Counter, OrderedDict等，其中defaultdict和namedtuple是两个很实用的扩展类型。defaultdict继承自dict，namedtuple继承自tuple。</value></post_desc></item>
<item><title><value>Django运行方式及处理流程总结</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80836/</value></title_url><post_desc><value>之前在网上看过一些介绍Django处理请求的流程和Django源码结构的文章，觉得了解一下这些内容对开发Django项目还是很有帮助的。所以，我按照自己的逻辑总结了一下Django项目的运行方式和对Request的基本处理流程。</value></post_desc></item>
<item><title><value>Python的中文编码问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80831/</value></title_url><post_desc><value>字符串是Python中最常用的数据类型，而且很多时候你会用到一些不属于标准ASCII字符集的字符，这时候代码就很可能抛出UnicodeDecodeError等异常。这种异常在Python中很容易遇到。如果你理解了Python的Unicode，并在编码中遵循一定的原则，这种问题比较容易解决。</value></post_desc></item>
<item><title><value>Python指南（1.1）：挑选解释器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81064/</value></title_url><post_desc><value>当选择Python解释器的时候，一个首先要面对的问题是：“我应该选择Python 2还是Python 3？” 答案并不像人们想象的那么明显。</value></post_desc></item>
<item><title><value>Python 的那些隐藏特性</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81081/</value></title_url><post_desc><value>注:这里忽略了生成器，装饰器，交换变量等熟知技巧</value><value>
1. 函数参数unpack</value><value>
老生常谈的了:</value></post_desc></item>
<item><title><value>函数式编程实战教程（Python版）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81075/</value></title_url><post_desc><value>许多函数式文章讲述的是组合，流水线和高阶函数这样的抽象函数式技术。本文不同，它展示了人们每天编写的命令式，非函数式代码示例，以及将这些示例转换为函数式风格。</value></post_desc></item>
<item><title><value>Python和Flask真是太强大了</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81065/</value></title_url><post_desc><value>作者是一个python开发员，同时也写Python书籍赚点小钱。某次网友抱怨他在线的图书付款流程太复杂，因而“大怒”，遂用Flask百余行代码完成整个流程。绝对的实战案例，让你领教Flask的威力。</value></post_desc></item>
<item><title><value>为什么数据科学家们选择了Python语言？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/81039/</value></title_url><post_desc><value>Python是一种解释型、动态语言，具有明确而高效的语法。Python具有良好的REPL，还可以通过dir()和文档字符串从REPL中开发新模块。这是程序员更偏向于Python而不是C、C++或Java的一个原因。</value></post_desc></item>
<item><title><value>用Python和OpenCV创建一个图片搜索引擎的完整指南</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80860/</value></title_url><post_desc><value>大家都知道，通过文本或标签来搜索图片的体验非常糟糕。在本文作者将介绍如何自己创建一个图像搜索引擎。</value></post_desc></item>
<item><title><value>Python中内置的NotImplemented类型</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80913/</value></title_url><post_desc><value>NotImplemented 是Python在内置命名空间中的六个常数之一。其他有 False，True，None，Ellipsis 和 __debug__。和 Ellipsis很像，NotImplemented 能被重新赋值（覆盖）。</value></post_desc></item>
<item><title><value>理解 Python 字节码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80815/</value></title_url><post_desc><value>我最近在参与Python字节码相关的工作，想与大家分享一些这方面的经验。更准确的说，我正在参与2.6到2.7版本的CPython解释器字节码的工作。</value></post_desc></item>
<item><title><value>检测Python程序执行效率及内存和CPU使用的7种方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80754/</value></title_url><post_desc><value>在运行复杂的Python程序时，执行时间会很长，这时也许需要提高程序的执行效率。但该怎么做呢？</value><value>本文介绍了检测Python程序执行效率及内存和CPU使用的7种方法。</value></post_desc></item>
<item><title><value>Python多进程处理：如何将大量数据放入有限内存</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80753/</value></title_url><post_desc><value>这是一篇有关如何将大量的数据放入有限的内存中的简略教程。与客户工作时，有时会发现他们的数据库实际上只是一个csv或Excel文件仓库，你只能将就着用，经常需要在不更新他们的数据仓库的情况下完成工作。</value></post_desc></item>
<item><title><value>Eric Raymond对于几大开发语言的评价</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/79421/</value></title_url><post_desc><value>Eric Raymond是开源运动的领袖人物，对于UNIX开发有很深的造诣，主持开发了fetchmail。他的《大教堂与集市》被奉为开源运动的经典之作。下面对几大开发语言的评价非常中肯，是我近年来看到的比较出色的评论。特别是他评价中抱有的那种“简单就是好”的思想，很值得我们深思。</value></post_desc></item>
<item><title><value>Python 2.7.x 和 3.x 版本的重要区别</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/80006/</value></title_url><post_desc><value>许多Python初学者都会问：我应该学习哪个版本的Python。对于这个问题，我的回答通常是“先选择一个最适合你的Python教程，教程中使用哪个版本的Python，你就用那个版本。等学得差不多了，再来研究不同版本之间的差别”。</value></post_desc></item>
<item><title><value>"Hello world!" 混乱代码比赛第一名作品解析</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/79737/</value></title_url><post_desc><value>几个月前，我在这届的 Code Golf 比赛中获得了第一名，这个比赛的主题是写出最怪异最混乱的「Hello world! 」打印程序。我决定写一篇文章解释它到底是怎么运行的。</value></post_desc></item>
<item><title><value>高性能的Python扩展（3）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/80005/</value></title_url><post_desc><value>本文是这个系列的第三篇，我们关注于使用NumPy API为Python编写高性能的C扩展模块。在本文中，我们将使用OpenMP来并行第二部分中的实现。 </value></post_desc></item>
<item><title><value>机器学习之用Python从零实现贝叶斯分类器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81019/</value></title_url><post_desc><value>本文手把手逐步介绍如何用Python从零实现贝叶斯分类器。步骤详细，还提供实例代码和测试数据。</value></post_desc></item>
<item><title><value>13岁Python开发者写给青少年的多人游戏编程（下）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80696/</value></title_url><post_desc><value>在教程的第一部分，你完成了游戏客户端的大部分代码。你编写的代码在游戏界面上绘制了网格线，并允许玩家在网格线上放置新的线条。在第二部分，也是本教程的最后一部分，你将完成游戏服务端的编写，通过客户端与服务端的连接通信，实现多玩家游戏。</value></post_desc></item>
<item><title><value>13岁Python开发者写给青少年的Python入门教程</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80379/</value></title_url><post_desc><value>你曾经想知道计算机是如何工作的吗？尽管我们不能在一篇文章里面教会你所有的东西，但是通过学习如何写出你自己的程序来获得一个良好的开端。在这篇Python教程中，你将会学到计算机编程的基础知识，使用对新手来说最棒的编程语言之一。</value></post_desc></item>
<item><title><value>13岁Python开发者写给青少年的多人游戏编程（上）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80385/</value></title_url><post_desc><value>我确定，你一定曾和你的朋友们一起玩过在线多人游戏。但是你是否想过这些游戏的内部是怎样实现的呢，游戏是怎样在计算机中运行的呢？</value><value>在这个教程中，你将通过编写一个简单的游戏来学习有关多人游戏编程。与此同时，你也将学习到面向对象程序设计的思想。</value></post_desc></item>
<item><title><value>10 个 Python IDE 和代码编辑器</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/80478/</value></title_url><post_desc><value>Python 的学习过程少不了 IDE 或者代码编辑器，或者集成的开发编辑器（IDE）。这些 Python 开发工具帮助开发者加快使用 Python 开发的速度，提高效率。高效的代码编辑器或者 IDE 应该会提供插件，工具等能帮助开发者高效开发的特性。</value></post_desc></item>
<item><title><value>高性能的Python扩展（2）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/79331/</value></title_url><post_desc><value>这篇文章是这系列文章的第二篇，我们的关注点在使用Numpy API为Python编写C扩展模块的过程。在第一部分中，我们建立了一个简单的N体模拟，并发现其瓶颈是计算体之间的相互作用力，这是一个复杂度为O(N^2)的操作。通过在C语言中实现一个时间演化函数，我们大概能以大约70倍来加速计算。</value></post_desc></item>
<item><title><value>写给已有编程经验的 Python 初学者的总结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/79197/</value></title_url><post_desc><value>当我开始学习Python的时候，有些事我希望我一早就知道。我花费了很多时间才学会这些东西。我想要把这些重点都编纂到一篇文章当中。这篇文章的目标读者，是刚刚开始学习Python语言的有经验的程序员，想要跳过前几个月研究Python使用的那些他们已经在用的类似工具。包管理和标准工具这两节对于初学者来说同样很有帮助。</value></post_desc></item>
<item><title><value>重写Reddit</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/79097/</value></title_url><post_desc><value>2012年注：本文首发于2005年。发布之后，Django上线了一个RemovingTheMagic项目，提出了我的一些质疑（尽管我本人发现它仍然不可用），web.py促进了FriendFeed的tornado.web和Google的gae.webapp以及其它项目（尽管如此我仍然喜欢web.py），本文引起了Reddit流量的永久井喷，仍然没有真正地停止增长。</value></post_desc></item>
<item><title><value>用 Python 和 OpenCV 检测图片上的条形码</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80448/</value></title_url><post_desc><value>这篇博文的目的是应用计算机视觉和图像处理技术，展示一个条形码检测的基本实现。我所实现的算法本质上基于StackOverflow 上的这个问题，浏览代码之后，我提供了一些对原始算法的更新和改进。不过这个算法并不是对所有条形码有效。</value></post_desc></item>
<item><title><value>用 Python 编写一个国际象棋 AI 程序</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/80007/</value></title_url><post_desc><value>最近我用Python做了一个国际象棋程序并把代码发布在Github上了。这个代码不到1000行，大概20%用来实现AI。在这篇文章中我会介绍这个AI如何工作，每一个部分做什么，它为什么能那样工作起来。你可以直接通读本文，或者去下载代码，边读边看代码。</value></post_desc></item>
<item><title><value>高性能的Python扩展（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/78859/</value></title_url><post_desc><value>通常来说，Python不是一种高性能的语言，在某种意义上，这种说法是真的。但是，随着以Numpy为中心的数学和科学软件包的生态圈的发展，达到合理的性能不会太困难。当性能成为问题时，运行时间通常由几个函数决定。用C重写这些函数，通常能极大的提升性能。</value></post_desc></item>
<item><title><value>超酷算法：基数估计</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/78255/</value></title_url><post_desc><value>假设你有一个很大的数据集，非常非常大，以至于不能全部存入内存。这个数据集中有重复的数据，你想找出有多少重复的数据，但数据并没有排序，由于数据量太大所以排序是不切实际的。你如何来估计数据集中含有多少无重复的数据呢？</value></post_desc></item>
<item><title><value>零基础自学用Python 3开发网络爬虫(四): 登录</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/77878/</value></title_url><post_desc><value>今天的工作很有意思, 我们用 Python 来登录网站, 用Cookies记录登录信息, 然后就可以抓取登录之后才能看到的信息. 今天我们拿知乎网来做示范. </value></post_desc></item>
<item><title><value>零基础自学用Python 3开发网络爬虫(三): 伪装浏览器君</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/77830/</value></title_url><post_desc><value>上一次我自学爬虫的时候, 写了一个简陋的勉强能运行的爬虫alpha. alpha版有很多问题. 比如一个网站上不了, 爬虫却一直在等待连接返回response, 不知道超时跳过</value></post_desc></item>
<item><title><value>零基础自学用Python 3开发网络爬虫(二): 用到的数据结构简介以及爬虫Ver1.0 alpha</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/77825/</value></title_url><post_desc><value>上一回, 我学会了</value><value>用伪代码写出爬虫的主要框架;</value><value>
用Python的urllib.request库抓取指定url的页面;</value><value>
用Python的urllib.parse库对普通字符串转符合url的字符串.</value></post_desc></item>
<item><title><value>零基础自学用Python 3开发网络爬虫(一)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/77821/</value></title_url><post_desc><value>由于本学期好多神都选了Cisco网络课, 而我这等弱渣没选, 去蹭了一节发现讲的内容虽然我不懂但是还是无爱. 我想既然都本科就出来工作还是按照自己爱好来点技能吧, 于是我就不去了. 一个人在宿舍没有点计划好的事情做就会很容易虚度, 正好这个学期主打网络与数据库开发, 那就先学学Python开发爬虫吧. </value></post_desc></item>
<item><title><value>Python编程语言的发展简史</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/77656/</value></title_url><post_desc><value>Python是我喜欢的语言，简洁、优美、易用。前两天，我很激昂地向朋友宣传Python的好处。（宣传过程不顺利）所以为了雪耻，我花时间调查了Python的历史。我看到了Python中许多功能的来源和Python的设计理念，看到了一门编程语言的演化历史，看到了Python与开源运动的奇妙联系。从Python的历史中，我们可以一窥开源开发的理念和成就。</value></post_desc></item>
<item><title><value>python greenlet背景介绍与实现机制</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/77240/</value></title_url><post_desc><value>最近开始研究Python的并行开发技术，包括多线程，多进程，协程等。逐步整理了网上的一些资料，今天整理一下greenlet相关的资料。</value></post_desc></item>
<item><title><value>如何教新人编程：授人以渔（可他要是钓到河豚会死的）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/58281/</value></title_url><post_desc><value>我们来谈谈如何教新人编程。在各种编程语言的邮件群和用户小组中我经常看见一句谚语。每个人都知道这句话，这篇文章的标题就是它的后半部分。</value><value>授人以鱼，不如授人以渔</value></post_desc></item>
<item><title><value>Python程序员必知必会的开发者工具</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/58226/</value></title_url><post_desc><value>本文介绍了Python程序员必知必会的一些开发者工具。这些工具覆盖了文档工具，测试工具，调试工具，性能分析工具以及性能调优工具。文章中包含了大量的代码实例，浅显易懂。</value></post_desc></item>
<item><title><value>Python之父：为什么Python数组下标从0开始</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/58018/</value></title_url><post_desc><value>曾经有人在Twitter上问我为什么Python使用以0为首位的数组索引法(0-based)，并且还给我了一个相关优秀文章的链接。这让我想起许多往事：Python的前身之一，ABC语言使用的是以1为首位的数组索引方式（1-based），而对Python有着巨大影响的C语言则使用的是0-based。我早期开发的程序语言（Algol、Fortran、Pascal）有的使用1-based，有的则比较灵活。我认为切片语法是我做出这个决定的原因之一。</value></post_desc></item>
<item><title><value>Python 代码性能优化技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/77042/</value></title_url><post_desc><value>选择了脚本语言就要忍受其速度，这句话在某种程度上说明了 python 作为脚本的一个不足之处，那就是执行效率和性能不够理想，特别是在 performance 较差的机器上，因此有必要进行一定的代码优化来提高程序的执行效率。</value></post_desc></item>
<item><title><value>Python中何时使用断言</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/76285/</value></title_url><post_desc><value>这个问题是如何在一些场景下使用断言表达式，通常会有人误用它，所以我决定写一篇文章来说明何时使用断言，什么时候不用。</value><value>为那些还不清楚它的人，Python的assert是用来检查一个条件，如果它为真，就不做任何事。如果它为假，则会抛出AssertError并且包含错误信息。</value></post_desc></item>
<item><title><value>快速入门：十分钟学会Python</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/43922/</value></title_url><post_desc><value>假设你希望学习Python这门语言，却苦于找不到一个简短而全面的入门教程。那么本教程将花费十分钟的时间带你走入Python的大门。</value></post_desc></item>
<item><title><value>提高你的Python能力：理解单元测试</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/55180/</value></title_url><post_desc><value>对于程序开发新手来说，一个最常见的困惑是测试的主题。他们隐约觉得“单元测试”是很好的，而且他们也应该做单元测试。但他们却不懂这个词的真正含义。如果这听起来像是在说你，不要怕！在这篇文章中，我将介绍什么是单元测试，为什么它有用，以及如何对Python的代码进行单元测试。</value></post_desc></item>
<item><title><value>单身数学家如何通过数据挖掘找真爱</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/57618/</value></title_url><post_desc><value>凌晨三点，在加州大学洛杉矶分校（UCLA）数学系大楼五楼的一个拥挤小隔间里，只有一只灯泡和一台计算机的屏幕发出光亮。克里斯·麦金利（Chris McKinlay）正在为他的博士论文《大规模数据处理和并行数值方法》跑程序。计算机发出嘎嚓声，他点击打开第二个窗口，检查了一下他在交友网站OkCupid的收件箱。</value></post_desc></item>
<item><title><value>Python解释器简介（4）：动态语言</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/57381/</value></title_url><post_desc><value>当我开始研究python内部工作的时候，我一直很困惑为什么能够进行“编译”的python还是“动态语言”。通常，我们都将这两个词作为一对反义词——“动态语言”1包括Python、Ruby和 Javascript等，而“编译语言”则包括C、Java和Haskell等。</value></post_desc></item>
<item><title><value>漫画：为什么 C 被踢出窗外？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/56762/</value></title_url><post_desc><value>Java、C++、C、Python 四个人一起在会议室……</value><value>Java 问其他三位：“如何让妹纸们对我们更感兴趣？”</value><value>C++说：“要不多搞些异常？”</value><value>Python说：“要不改进我们的方法？”</value></post_desc></item>
<item><title><value>实例详解Django的 select_related 和 prefetch_related 函数对 QuerySet 查询的优化（三）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/75435/</value></title_url><post_desc><value>这是本系列的最后一篇，主要是select_related() 和 prefetch_related() 的最佳实践。</value><value>
第一篇在这里 讲例子和select_related()</value><value>
第二篇在这里 讲prefetch_related()</value></post_desc></item>
<item><title><value>你所写过的最好的Python脚本是什么？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/75244/</value></title_url><post_desc><value>Quora问题你所写过的最好的Python脚本是什么排名前两名的答案。得到最多赞的用户介绍了他写的在Facebook上面感谢好友的脚本。排名第二的答案介绍了他写的点击一次自动字幕下载的脚本、IMDb信息查找脚本、theoatmeal.com网站漫画下载脚本和someecards.com下载脚本。该用户也因为这些脚本而得到了一份工作。</value></post_desc></item>
<item><title><value>Python 3 能振兴 Python</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/75158/</value></title_url><post_desc><value>我从Stephen A. Goss那读到关于了《Python 3正在毁灭Python》。这篇文章有不少精彩的论点，但我却并不认为Python 3是在毁灭Python，也不认为整个局面对Python一点也不利。</value><value>但是正如那些比较俗气的格言所说，也许每一次危机也意味着一次机遇。</value></post_desc></item>
<item><title><value>Python趣文：Import Girlfriend</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/56878/</value></title_url><post_desc><value>Python 趣文：Import Girlfriend</value></post_desc></item>
<item><title><value>Python解释器简介（3）：理解字节码</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/56761/</value></title_url><post_desc><value>字节码其实就是一系列的字节。解释器会循环接收各个字节，查找每个字节的指令然后执行这个指令。为了知道python字节码的意思，我们还使用dis 模块来深度解析字节码里的信息。</value></post_desc></item>
<item><title><value>Python解释器简介（2）：代码对象</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/56300/</value></title_url><post_desc><value>这是Python解释器简介的第二部分。完成编译之前的三个步骤都是在检查一个简单的函数对象。我们现在来谈谈更深层次的对象——函数的代码对象。所谓的代码对象就是函数对象的一个属性。</value></post_desc></item>
<item><title><value>Python解释器简介（1）：函数对象</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/55327/</value></title_url><post_desc><value>在最近三个月，我和Ned Batchelder用了很多时间在做 byterun。它是用Python写的Python字节码解释器。做 byterun 的过程十分有趣，也让我收获了很多知识。在这个系列文章的结尾，我将试着让你相信：你也能轻松愉快地“玩” byterun。但在那之前，我们需要做一些准备工作：大概了解python内部是如何工作的。</value></post_desc></item>
<item><title><value>关于Python 3的一些想法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/54846/</value></title_url><post_desc><value>Python社区的朋友们、开发者们，我们需要谈谈了。2008年12月3日，Python 3.0 首次发行。当时人们普遍认为，距离Python3能真正被所有人广泛使用，还需要一段很长的时间。当时大家的估计是五年。而现在距离当时，正好已经五年了。</value></post_desc></item>
<item><title><value>用 Python 脚本实现对 Linux 服务器的监控</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/54563/</value></title_url><post_desc><value>目前 Linux 下有一些使用 Python 语言编写的 Linux 系统监控工具 比如 inotify-sync（文件系统安全监控软件）、glances（资源监控工具）在实际工作中，Linux 系统管理员可以根据自己使用的服务器的具体情况编写一下简单实用的脚本实现对 Linux 服务器的监控。 本文介绍一下使用 Python 脚本实现对 Linux 服务器 CPU 内存 网络的监控脚本的编写。</value></post_desc></item>
<item><title><value>像老大一样优化Python</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/54057/</value></title_url><post_desc><value>我们应该忘掉一些小的效率问题，在 97% 的情况下是这么说的：过早优化是万恶之源。—— Donald Knuth</value><value>如果不首先想想这句Knuth的名言，就开始进行优化工作是不明智的。可是，你很快写出来加入一些特性的代码，可能会很丑陋，你需要注意了。这篇文章就是为这时候准备的。</value></post_desc></item>
<item><title><value>Python热点回顾第一期</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/53346/</value></title_url><post_desc><value>Python 热点回顾第一期，包括 Python 资讯、讨论帖、开源项目、学习资源、技术文章。提示：有些内容需要翻墙访问。</value></post_desc></item>
<item><title><value>Python中的method</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/53989/</value></title_url><post_desc><value>什么是method？</value><value>function就是可以通过名字可以调用的一段代码,我们可以传参数进去，得到返回值。所有的参数都是明确的传递过去的。</value><value>
method是function与对象的结合。我们调用一个方法的时候，有些参数是隐含的传递过去的。下文会详细介绍。</value></post_desc></item>
<item><title><value>像老大一样调试Python</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/52171/</value></title_url><post_desc><value>上面的一段代码有木有很像你平时调试代码的样子？好吧，我原来也是这样。老实说，这并不坏。敲一些print进去，运行代码，然后看会发生什么。你肯定需要在输出里面翻来翻去的，但你能找到你想要的结果。至少，当你知道你想要什么。不过通常不是这样，如果你知道检验些什么，你可能就不会需要打印那些输出了。</value></post_desc></item>
<item><title><value>我常用的Python调试工具（二）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/52090/</value></title_url><post_desc><value>这是对上一篇关于调试器的文章的一个小小的补充。</value><value>标准库有三种分析方法（cProfile和profile，hotshot）以及不计其数的第三方可视化工具，转化器，以及诸如此类的东西。</value><value>工具多了，不靠谱的建议自然少不了。</value></post_desc></item>
<item><title><value>Python中的生产者消费者问题</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/52412/</value></title_url><post_desc><value>我们将使用Python线程来解决Python中的生产者消费者问题。这个问题完全不像他们在学校中说的那么难。</value><value>如果你对生产者消费者问题有了解，看这篇博客会更有意义。</value></post_desc></item>
<item><title><value>用Python的 __slots__ 节省9G内存</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/52420/</value></title_url><post_desc><value>我们曾经提到，Oyster.com的Python web服务器怎样利用一个巨大的Python dicts（hash table），缓存大量的静态资源。我们最近在Image类中，用仅仅一行__slots__代码，让每个6G内存占用的服务进程（共4个），省出超过2G来。</value></post_desc></item>
<item><title><value>学习Python编程的11个资源</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/71064/</value></title_url><post_desc><value>用 Python 写代码并不难，事实上，它一直以来都是被声称为最容易学习的编程语言。如果你正打算学习 web 开发，Python 是一个不错的选择，甚至你想学游戏开发也可 以从 Python 开始，因为用 Python 来构建游戏的资源实在是太多了。这是一种快速 学习语言的一种方法。</value></post_desc></item>
<item><title><value>Python编程中常用的12种基础知识总结</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/48541/</value></title_url><post_desc><value>Python编程中常用的12种基础知识总结：正则表达式替换，遍历目录方法，列表按列排序、去重，字典排序，字典、列表、字符串互转，时间对象操作，命令行参数解析(getopt)，print 格式化输出，进制转换，Python调用系统命令或者脚本，Python 读写文件。</value></post_desc></item>
<item><title><value>30个有关Python的小技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/63320/</value></title_url><post_desc><value>作者在学习python的时候有个很好的习惯，总结在项目中和解决问题中的看到的小技巧。这些小技巧在帮助人们提高python技巧和代码可读性方面有着很实际的用途。</value></post_desc></item>
<item><title><value>高级正则表达式技术（Python版）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/65605/</value></title_url><post_desc><value>正则表达式是从信息中搜索特定的模式的一把瑞士军刀。它们是一个巨大的工具库，其中的一些功能经常被忽视或未被充分利用。今天我将向你们展示一些正则表达式的高级用法。</value><value>举个例子，这是一个我们可能用来检测电话美国电话号码的正则表达式：</value></post_desc></item>
<item><title><value>50行Python代码写一个语言检测器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/54707/</value></title_url><post_desc><value>你有没有曾经好奇过Chrome浏览器是如何知道一个网页的语言，并对外国文字的网页提供翻译服务的？或者，Facebook是如何翻译你朋友用写在你主页上的外国文字？检测一种语言实际上非常简单，改进了用户体验，而且不需要用户做任何的事情。</value></post_desc></item>
<item><title><value>25本免费的Python电子书</value></title><lei><value>书籍</value></lei><title_url><value>http://python.jobbole.com/29281/</value></title_url><post_desc><value>下面是 sangkrit 收集整理的 25 本免费的 Python 电子书。如果你是 Python 新手，并且不知该先看哪本，sangkrit 是建议从第 12 本开始。</value><value>
对于Python新手应该从哪本开始，如果各位朋友有不同看法，欢迎在评论中留言。</value></post_desc></item>
<item><title><value>Slashdot对Python之父的采访</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/47081/</value></title_url><post_desc><value>Python之父Guido van Rossum在2013年1月正式从Google离职后并正式加入 Dropbox。2013年8月19日，Slashdot 网站发起了一个对 Guido 的访谈主题帖，网友在评论中提问。8月25日，Slashdot 在另外一个帖子中汇总了“面向对象、函数式编程、PyPy、Python 3”等问题和回复。该汇总帖现已由 贱圣OMG 翻译成中文。</value></post_desc></item>
<item><title><value>设置 Sublime Text 的 Python 开发环境</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/40660/</value></title_url><post_desc><value>最近，当我主要使用Python开发环境编辑的时候，我开始越来越多地用到Sublinme Text 2.这篇文章主要说明了能让Python的编程者使用更方便的一些设置和调整。</value></post_desc></item>
<item><title><value>Python中的默认参数值</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/40088/</value></title_url><post_desc><value>本文的主题：不要使用可变对象作为函数的默认参数例如 list，dict，因为def是一个可执行语句，只有def执行的时候才会计算默认默认参数的值，所以使用默认参数会造成函数执行的时候一直在使用同一个对象，引起bug。</value></post_desc></item>
<item><title><value>Python状况：为什么PyPy是Python的未来？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/39757/</value></title_url><post_desc><value>Python 现在已经不仅仅是胶水脚本语言了。 不信？看看下面使用Python的成功案例</value></post_desc></item>
<item><title><value>Python 新手常犯错误（第二部分）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/43826/</value></title_url><post_desc><value>在之前几个月里，我教一些不了解Python的孩子来慢慢熟悉这门语言。渐渐地，我发现了一些几乎所有Python初学者都会犯的错误，所以我决定跟来跟大家分享我的建议。这个系列的每个部分都会关注不同的常见错误，描述如何产生这种错误的，并且提供解决的方法。</value></post_desc></item>
<item><title><value>用语音写代码比键盘更快</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/45781/</value></title_url><post_desc><value>这是 Tavis Rudd 在 2013 年 Python 大会上的演讲，展示了如何使用语音进行编程。他在手部肌肉麻木后无法顺利敲键盘，于是利用语音识别工具来写代码。一开始很慢，后来熟练后，速度比敲键盘还快。他认为语音识别不再只是方便残障人士，已是一个可以使全体程序员受益的技术。</value></post_desc></item>
<item><title><value>我常用的 Python 调试工具</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/51062/</value></title_url><post_desc><value>以下是我做调试或分析时用过的工具的一个概览。</value><value>如果你知道有更好的工具，请在评论中留言，可以不用很完整的介绍。</value></post_desc></item>
<item><title><value>Vim 7.4 计划已公布，具体发布时间待定</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/39429/</value></title_url><post_desc><value>Bram Moolenaar 于 5 月 9 日上午在Vim 谷歌群组发布了一条消息，告知有关 Vim 7.4 的计划。全文编译如下：</value><value>“各位 Vim 用户好，我们现在最新的补丁数字是 7.3.931，再过几周就要发布 7.3.999 了。该考虑 Vim 7.4 了！</value></post_desc></item>
<item><title><value>Python正则表达式指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/75188/</value></title_url><post_desc><value>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。</value></post_desc></item>
<item><title><value>Python正则表达式的七个使用范例</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/74844/</value></title_url><post_desc><value>作为一个概念而言，正则表达式对于Python来说并不是独有的。但是，Python中的正则表达式在实际使用过程中还是有一些细小的差别。在这个系列的第一篇文章中，我们将重点讨论如何使用Python中的正则表达式并突出Python中一些独有的特性。</value></post_desc></item>
<item><title><value>再谈PHP、Python与Ruby</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/43792/</value></title_url><post_desc><value>一句话简单地总结：假如你想帮他尽快找个活儿，赚到钱，推荐PHP；假如你想让他成为一个高效工程师，推荐 Python； 假如你想让他爱上他的工作，推荐 Ruby。</value></post_desc></item>
<item><title><value>给Python初学者的一些技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/32748/</value></title_url><post_desc><value>以下是我近些年收集的一些Python实用技巧和工具，希望能对你有所帮助。</value></post_desc></item>
<item><title><value>Python 新手常犯错误（第一部分）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/42706/</value></title_url><post_desc><value>在之前几个月里，我教一些不了解Python的孩子来慢慢熟悉这门语言。渐渐地，我发现了一些几乎所有Python初学者都会犯的错误，所以我决定跟来跟大家分享我的建议。这个系列的每个部分都会关注不同的常见错误，描述如何产生这种错误的，并且提供解决的方法。</value></post_desc></item>
<item><title><value>用 Python 做个简单的井字游戏</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/44235/</value></title_url><post_desc><value>在这个教程中，我将展示如何利用Python来做一个井字游戏。这将包括函数、列表、if语句、while循环、for循环以及错误处理等等。</value></post_desc></item>
<item><title><value>Python编程中需要注意的一些事</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/19835/</value></title_url><post_desc><value>围绕一门语言，学习它的文化精髓，能让你成为一名更优秀的程序员。如果你还没读过Python之禅(Zen of Python) ，那么打开Python的命令提示符输入import this，列表中的每一项你都可以在这里找到相对应的例子。</value></post_desc></item>
<item><title><value>实例详解Django的 select_related 和 prefetch_related 函数对 QuerySet 查询的优化（二）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/74914/</value></title_url><post_desc><value>对于多对多字段（ManyToManyField）和一对多字段，可以使用prefetch_related()来进行优化。或许你会说，没有一个叫OneToManyField的东西啊。实际上 ，ForeignKey就是一个多对一的字段，而被ForeignKey关联的字段就是一对多字段了。</value></post_desc></item>
<item><title><value>实例详解Django的 select_related 和 prefetch_related 函数对 QuerySet 查询的优化（一）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/74881/</value></title_url><post_desc><value>在数据库有外键的时候，使用 select_related() 和 prefetch_related() 可以很好的减少数据库请求的次数，从而提高性能。本文通过一个简单的例子详解这两个函数的作用。</value></post_desc></item>
<item><title><value>Python编程中的反模式</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/74252/</value></title_url><post_desc><value>这篇文章总结了Python编程初学者可能遇到的一些反模式：迭代，列表解析，性能缺陷，变量泄露，代码风格等；让每个初学者写出Python化、干净、整洁的代码。</value></post_desc></item>
<item><title><value>Python 代码性能优化技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/24197/</value></title_url><post_desc><value>代码优化能够让程序运行更快，它是在不改变程序运行结果的情况下使得程序的运行效率更高，根据 80/20 原则，实现程序的重构、优化、扩展以及文档相关的事情通常需要消耗 80% 的工作量。优化通常包含两方面的内容：减小代码的体积，提高代码的运行效率。</value></post_desc></item>
<item><title><value>Python 性能分析入门指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/74266/</value></title_url><post_desc><value>虽然并非你编写的每个 Python 程序都要求一个严格的性能分析，但是让人放心的是，当问题发生的时候，Python 生态圈有各种各样的工具可以处理这类问题。</value></post_desc></item>
<item><title><value>为什么对数组排序让Python循环运行更快</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/73819/</value></title_url><post_desc><value>如你所见，两个脚本有完全相同的行为。都产生一个包含前一百万个整数的列表，并打印对这些整数求和的时间。唯一的不同是 slow.py 先将整数随机排序。尽管这看起来有些奇怪，似乎随机化足够将程序明显变慢。</value></post_desc></item>
<item><title><value>关于你不想知道的所有Python3 unicode特性</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/73974/</value></title_url><post_desc><value>我的读者知道我是一个喜欢痛骂Python3 unicode的人。这次也不例外。我将会告诉你用unicode有多痛苦和为什么我不能闭嘴。我花了两周时间研究Python3，我需要发泄我的失望。在这些责骂中，仍然有有用的信息，因为它教我们如何来处理Python3。如果没有被我烦到，就读一读吧。</value></post_desc></item>
<item><title><value>30 行 Python 代码搞定 X 算法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/74000/</value></title_url><post_desc><value>如果你是数独游戏爱好者，或者是算法爱好者，亦或者是Python爱好者，你都会惊讶用Python实现X算法搞定数独，核心代码只有30行！</value></post_desc></item>
<item><title><value>9本免费的Python编程书</value></title><lei><value>书籍</value></lei><title_url><value>http://python.jobbole.com/765/</value></title_url><post_desc><value>本文将向各位推荐 9 本免费的 Python 语言编程书籍，希望对你学习 Python 编程有所帮助。</value></post_desc></item>
<item><title><value>10个实用的Django建议</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/15555/</value></title_url><post_desc><value>Django 作为一个杰出的Python开源框架，或许得不到和其它流行框架如Rails这样多的赞美，但是它和其他框架一样精炼，非常注重DRY(Don’t Repeat Yoursef)原则、组件的重用性,通过自动化过程使编码更简洁。</value></post_desc></item>
<item><title><value>加速你的Python代码</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/36701/</value></title_url><post_desc><value>在我看来，python社区分为了三个流派，分别是python 2.x组织，3.x组织和PyPy组织。这个分类基本上可以归根于类库的兼容性和速度。这篇文章将聚焦于一些通用代码的优化技巧以及编译成C后性能的显著提升，当然我也会给出三大主要python流派运行时间。我的目的不是为了证明一个比另一个强，只是为了让你知道如何在不同的环境下使用这些具体例子作比较。</value></post_desc></item>
<item><title><value>用 RAKE 和 Maui 做 NLP 关键词提取的教程</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82230/</value></title_url><post_desc><value>在这个教程中，你将会学到如何用Python和Java自动提取关键词，而且你将理解与之相关的任务，例如有控制词表的关键短语提取（换句话说是把文本分类到各种可能类别的超大集合中），还有术语提取。</value></post_desc></item>
<item><title><value>定位Python built-in函数的源码实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82237/</value></title_url><post_desc><value>用Python开发的代码，有些时候会出现一些故障，这些故障很难从Python级调试中排查出原因。此时，需要对Python解释器进行C级调试，以排查更底层的原因。本文以定位Python built-in函数的源码实现为例，展示这种C级调试的片段。</value></post_desc></item>
<item><title><value>用 GDB 排查 Python 程序故障</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82232/</value></title_url><post_desc><value>某Team在用Python开发一些代码，涉及子进程以及设法消除僵尸进程的需求。实践中他们碰上Python程序非预期退出的现象。最初他们决定用GDB调试Python解释器，查看exit()的源头。我听了之后，觉得这个问题应该用别的调试思路。帮他们排查这次程序故障时，除去原始问题，还衍生了其他问题。</value></post_desc></item>
<item><title><value>对比Ruby和Python的垃圾回收（2）：代式垃圾回收机制</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/73300/</value></title_url><post_desc><value>作者在本文中讲解了Ruby和Python所使用的基于代(Generation)的垃圾回收机制，通过分代，GC能够对属于不同代的对象采取不同的回收策略，这样能够大大提高垃圾回收的效率。</value></post_desc></item>
<item><title><value>Scrapy 轻松定制网络爬虫</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/73115/</value></title_url><post_desc><value>网络爬虫（Web Crawler, Spider）就是一个在网络上乱爬的机器人。当然它通常并不是一个实体的机器人，因为网络本身也是虚拟的东西，所以这个“机器人”其实也就是一段程序，并且它也不是乱爬，而是有一定目的的，并且在爬行的时候会搜集一些信息。例如 Google 就有一大堆爬虫会在 Internet 上搜集网页内容以及它们之间的链接等信息…</value></post_desc></item>
<item><title><value>Python，变调，电脑钢琴</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/72745/</value></title_url><post_desc><value>录一段音频，把它的音高改变50次并把每一个新的音频匹配到键盘的一个键位，你就能把电脑变成一架钢琴！</value></post_desc></item>
<item><title><value>可爱的 Python : Python中的函数式编程，第三部分</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/35045/</value></title_url><post_desc><value>摘要：  作者David Mertz在其文章《可爱的Python：“Python中的函数式编程”》中的第一部分和第二部分中触及了函数式编程的大量基本概念。本文中他将继续前面的讨论，解释函数式编程的其它功能，如currying和Xoltar Toolkit中的其它一些高阶函数。</value></post_desc></item>
<item><title><value>可爱的 Python : Python中函数式编程，第二部分</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/35042/</value></title_url><post_desc><value>摘要：  本专栏继续让David对Python中的函数式编程(FP)进行介绍。读完本文，可以享受到使用不同的编程范型（paradigm）解决问题所带来的乐趣。David在本文中对FP中的多个中级和高级概念进行了详细的讲解。</value></post_desc></item>
<item><title><value>可爱的 Python : Python中函数式编程，第一部分</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/35028/</value></title_url><post_desc><value>摘要：虽然人们总把Python当作过程化的，面向对象的语言，但是他实际上包含了函数化编程中，你需要的任何东西。这篇文章主要讨论函数化编程的一般概念，并说明用Python来函数化编程的技术。</value></post_desc></item>
<item><title><value>为什么 BIND 10 要用 C++ 和 Python 来写</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/34289/</value></title_url><post_desc><value>这篇博文是对来自Twitter的这个问题的答复：</value><value>@nodakai: 为什么BIND10非要用C++编写?? 我认为从这个不幸的事件中，托管语言的支持者们有许多需要学习了解的地方。</value></post_desc></item>
<item><title><value>2013年2月Web编程语言就业趋势</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/33825/</value></title_url><post_desc><value>继2月18日Rob Diana发表有关2013年传统编程语言的就业趋势后，他在21日发布了另外一篇文章，有关2013年”Web脚本编程语言“的就业趋势，其中包括 Ruby</value></post_desc></item>
<item><title><value>从头开始实现神经网络：入门</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82208/</value></title_url><post_desc><value>本文中我们会从头实现一个简单的3层神经网络。我们不会推导所有的数学公式，但会给我们正在做的事情一个相对直观的解释。我也会给出你研读所需的资源链接。</value></post_desc></item>
<item><title><value>Python 3.5发布：新增模块，性能优化，对开发者更友好</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/82227/</value></title_url><post_desc><value>Python 3.5.0在9月13号正式发布，与3.4相比，有哪些让人期待的新特性呢？</value></post_desc></item>
<item><title><value>基于 Spark 和 Flask 的一个可伸缩的电影推荐系统</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82207/</value></title_url><post_desc><value>这篇Apache Spark教程将一步一步指导你学习如何采用协同过滤技术利用MovieLens数据集构建一个电影推荐系统。文章分两部分，第一部分是关于在Spark RDDs中获取并分析电影和评级数据。第二部分是建立和使用我们的在线推荐系统。</value></post_desc></item>
<item><title><value>如何用 Python 追踪 NBA 球员的移动轨迹</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/82085/</value></title_url><post_desc><value>在这篇文章中，我介绍了如何从 stats.nba.com 上现场实况运动动画中提取一些额外的信息。</value></post_desc></item>
<item><title><value>15个最受欢迎的Python开源框架</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/72306/</value></title_url><post_desc><value>以下是伯乐在线从GitHub中整理出的15个最受欢迎的Python开源框架。这些框架包括事件I/O，OLAP，Web开发，高性能网络通信，测试，爬虫等。</value></post_desc></item>
<item><title><value>Python程序员的10个常见错误</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/68256/</value></title_url><post_desc><value>Python简单、易学的语法可能会误导一些Python程序员（特别是那些刚接触这门语言的人们），可能会忽略某些细微之处和这门语言的强大之处。本文列出了“十大”甚至是高级的Python程序员都可能犯的，却又不容易发现的细微错误。</value></post_desc></item>
<item><title><value>对比Ruby和Python的垃圾回收（1）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/60900/</value></title_url><post_desc><value>这篇文章基于我在布达佩斯的RuPy大会上所作的演讲。我觉得与其直接将幻灯片发布出来，不如在我还有印象的时候将它写成博客来的更有意义。同样，我会在将来发布RuPy大会的视频链接。我计划将在RubyConf大会上发表类似的演讲，除了有关于Python的部分，并且将对比MRI、JRuby以及Rubinius的垃圾回收器是怎样工作的。</value></post_desc></item>
<item><title><value>Python程序员的常见错误</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/69834/</value></title_url><post_desc><value>在这篇文章中，我将总结新老Python程序员常犯的一些错误，以帮助你们在自己的工作避免犯同样或类似错误。</value><value>首先我要说明一下的是，这些都是来源于第一手的经验。我以讲授Python的知识为生。在过去的7年里，我已经给上千名学生讲授上百堂Python的课程，同时看着这些学生们犯同样的错。</value></post_desc></item>
<item><title><value>Python yield 使用浅析</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/32876/</value></title_url><post_desc><value>您可能听说过，带有 yield 的函数在 Python 中被称之为 generator（生成器），何谓 generator ？</value><value>我们先抛开 generator，以一个常见的编程题目来展示 yield 的概念。</value></post_desc></item>
<item><title><value>Python 关键字 yield 详解</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/28506/</value></title_url><post_desc><value>此文由伯乐在线 –刘志军编译自stackoverflow Python标签中投票率最高的一个问题《The Python yield keyword explained》，e-satis 详细回答了关于yield 以及 generator、iterable、iterator、iteration之间的关系。</value></post_desc></item>
<item><title><value>用 Python 从零开始写一个简单的解释器（1）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82206/</value></title_url><post_desc><value>大学里计算机科学最吸引我的地方就是编译器。最神奇的是，编译器是如何读出我写的那些烂代码，并且还能生成那么复杂的程序。当我终于选了一门编译方面的课程时，我发现这个过程比我想的要简单得多。</value></post_desc></item>
<item><title><value>想理解Python的列表解析吗？Think in Excel or SQL.</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82087/</value></title_url><post_desc><value>推导式是 Python 中最有用的设计之一。它融合了老的、可靠的“map”和“filter” 函数到一段紧凑的代码，它语法优雅，允许我们在小段代码中表达复杂的想法。推导式是 Python 高手工具箱里面一个最重要的工具。</value></post_desc></item>
<item><title><value>Python 3 正在毁灭 Python</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/69811/</value></title_url><post_desc><value>Python 3毫不费力地成为发生在Python社区里最糟糕的事。我还记得第一次使用Python的时候，我还在花大量时间在C++这块上，而Python就像是我的一次开光。我可以打开文本编辑器用几秒钟或者几分钟写出一个可以工作的程序，而不是用几小时或几天。我记得Python 2.5出来的时候，带来了一大堆崭新的简洁的语言特性</value></post_desc></item>
<item><title><value>动态规划用于解决重叠子问题的示例(Python版)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/67588/</value></title_url><post_desc><value>Train Empire 提供了一个绝佳的的例子，以展示动态规划是如何在有重叠子问题的问题做出最优决策。 Python 强大的表达能力再一次让我们很简单地就能把想法实现，并且写出清晰且高效的算法。</value></post_desc></item>
<item><title><value>Python高级特性（3）: Classes和Metaclasses</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/67748/</value></title_url><post_desc><value>类和函数一样都是Python中的对象。当一个类定义完成之后，Python将创建一个“类对象”并将其赋值给一个同名变量。类是type类型的对象。</value></post_desc></item>
<item><title><value>500 行 Python 代码做一个英文解析器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/67009/</value></title_url><post_desc><value>语法分析器描述了一个句子的语法结构，用来帮助其他的应用进行推理。自然语言引入了很多意外的歧义，以我们对世界的了解可以迅速地发现这些歧义。</value></post_desc></item>
<item><title><value>2012年Linux Journal读者选择奖结果公布</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/31329/</value></title_url><post_desc><value>Linux 业界知名的杂志 Linux Journal 近日在其官网公布了2012年Linux Journal读者选择奖（Readers’ Choice Awards）投票结果。</value></post_desc></item>
<item><title><value>Python之父从Google离职，加入Dropbox</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/31146/</value></title_url><post_desc><value>Python之父，首位“仁慈独裁者（Benevolent Dictator For Life）”荣誉获得者 Guido van Rossum，从Google 跳槽到 Dropbox。Van Rossum 于2005年加入Google。他加盟Dropbox，应对Dropbox会有巨大帮助，因为Dropbox软件就是Python编写的。Dropbox这个云存储创业公司最近迎来了第1亿位用户，平均每天保存超过10亿个文件。</value></post_desc></item>
<item><title><value>我是如何在8周内自学编程的</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/25858/</value></title_url><post_desc><value>对于绝大多数非程序员来说，学习如何编程是一项不可能完成而且令人畏惧的任务，好在有大量免费的在线资源，当然自学成才没那么容易。</value><value>我开始学习写代码是在今年的早些时候，这里我可以分享一下自己的一些经验，构建一套你自己的原型没有想象的那么困难。</value></post_desc></item>
<item><title><value>Python Howto 之 logging 模块</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82221/</value></title_url><post_desc><value>本文来源于对py2.7.9 docs中howto-logging部分加之源代码的理解。官方文档链接如下，我用的是下载的pdf版本，应该是一致的：https://docs.python.org/2/howto/logging.html</value></post_desc></item>
<item><title><value>Python函数式编程指南（4）：生成器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82178/</value></title_url><post_desc><value>生成器是迭代器，同时也并不仅仅是迭代器，不过迭代器之外的用途实在是不多，所以我们可以大声地说：生成器提供了非常方便的自定义迭代器的途径。</value></post_desc></item>
<item><title><value>Python函数式编程指南（3）：迭代器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82171/</value></title_url><post_desc><value>这一篇我们将讨论迭代器。迭代器并不是函数式编程特有的东西，但它仍然是函数式编程的一个重要的组成部分，或者说是一个重要的工具。</value></post_desc></item>
<item><title><value>Python函数式编程指南（2）：函数</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82167/</value></title_url><post_desc><value>这是此系列的第二篇，试图说明在Python中如何更好地使用函数并引导诸位使用函数式的思维进行思考。掌握并应用这些内容，就已经是至少形似的函数式风格的代码了，至于思维么，这个真靠自己。</value></post_desc></item>
<item><title><value>Python也可以很美</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/20351/</value></title_url><post_desc><value>我最近读到一遍文章其主要关注点是在Python社区，讲的是为什么Python应用如此丑陋？</value><value>尽管某些情况下他的观点是正确的，但是对于他问的这个问题“亲爱的Python，你为何如此丑陋”真是荒谬至极。</value></post_desc></item>
<item><title><value>好奇号火星车的一些计算机软硬件信息</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/25037/</value></title_url><post_desc><value>自从好奇号火星车在8月6日13点31分（北京时间）着陆火星后，这几天有关它的消息媒体一直有报道。本文将综合整理网上讨论“好奇号”引出的一些软硬件信息。</value></post_desc></item>
<item><title><value>陈皓：代码执行的效率</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/23773/</value></title_url><post_desc><value>在《性能调优攻略》里，我说过，要调优性需要找到程序中的Hotspot，也就是被调用最多的地方，这种地方，只要你能优化一点点，你的性能就会有质的提高。在这里我给大家举三个关于代码执行效率的例子（它们都来自于网上）</value></post_desc></item>
<item><title><value>Python十分钟入门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/23425/</value></title_url><post_desc><value>Python是一种动态解释型的编程语言。Python可以在Windows、UNIX、MAC等多种操作系统上使用，也可以在Java、.NET开发平台上使用。</value></post_desc></item>
<item><title><value>深刻理解Python中的元类(metaclass)</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/21351/</value></title_url><post_desc><value>这是一篇在Stack overflow上很热的帖子。提问者自称已经掌握了有关Python OOP编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。</value></post_desc></item>
<item><title><value>ML/NLP入门教程Python版（第一部分：文本处理）</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/81397/</value></title_url><post_desc><value>欢迎来到机器学习和自然语言处理原型编码教程系列的第一部分。 Thoughtly正在制作一个着重于理解机器学习基础的系列教程,着重关注于在自然语言处理中的应用。</value></post_desc></item>
<item><title><value>如何使用 urllib 包获取网络资源</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81398/</value></title_url><post_desc><value>urllib.request是一个用于获取URL(Uniform Resource Locators)的Python模块。它提供的接口（以urlopen函数的形式）非常简单。它可以用不同的协议去获取URL。</value></post_desc></item>
<item><title><value>Flask、Django、Pyramid三个框架的对比</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81396/</value></title_url><post_desc><value>在python web框架的世界里充满了选择。有Django，Flask，Pyramid，Tornado，Bottle，Diesel，Pecan，Falcon等等的来吸引开发者的注意。作为一个开发者，你想要从中选择一个框架来帮你完成项目，并且能继续做大事情。</value></post_desc></item>
<item><title><value>Python函数式编程指南（1）：概述</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82163/</value></title_url><post_desc><value>这大概算是Python最难啃的一块骨头吧。在我Python生涯的这一年里，我遇到了一些Pythoner，他们毫无例外地完全不会使用函数式编程（有些人喜欢称为Pythonic），比如，从来不会传递函数，不知道lambda是什么意思</value></post_desc></item>
<item><title><value>白话 Tornado 源码(5)：褪去模板的外衣</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82176/</value></title_url><post_desc><value>上一篇《白话tornado源码(3):请求来了》介绍了客户端请求在tornado框架中的生命周期，其本质就是利用epoll和socket来获取并处理请求。</value></post_desc></item>
<item><title><value>非典型性吐槽：亲爱的Python，你为何如此丑陋</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/18629/</value></title_url><post_desc><value>亲爱的Python，有些事情已经困扰我一段时间了，恩，是这样的，其实你…有点丑。瞧，你的内在是如此美丽：Python是一种优美的编程语言，而且Python社区也是开放和受欢迎的。但Python的一些相关资源已经丑到一定程度了，足以影响其可用性和接受程度了。这对整个Python社区都是有害的。</value></post_desc></item>
<item><title><value>一行 Python 代码搞定一棵树</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/18159/</value></title_url><post_desc><value>使用 Python 内建的 defaultdict 方法可以轻松定义一个树的数据结构。</value></post_desc></item>
<item><title><value>初学者必知的Python中优雅的用法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/81393/</value></title_url><post_desc><value>Hi 朋友们。由于我最近都比较忙，所以已经很长一段时间没有写博客了。在这篇文章中我将和大家分享一些真正有用的技巧和窍门，这些技巧和窍门你们之前可能并不知道。</value></post_desc></item>
<item><title><value>Scrapy + Flask + Mongodb + Swift 开发爬虫全攻略（1）</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/81388/</value></title_url><post_desc><value>先一一介绍一下上面4个东西。第一个叫做Scrapy的东西是用python写的爬虫框架。Flask是python写的一个非常有名的web开发框架，python界有两个名气最大的web开发框架，Flask是其中之一，另一个叫做Djang</value></post_desc></item>
<item><title><value>Python爬虫实战（5）：模拟登录淘宝并获取所有订单</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81361/</value></title_url><post_desc><value>经过多次尝试，模拟登录淘宝终于成功了，实在是不容易，淘宝的登录加密和验证太复杂了，煞费苦心，在此写出来和大家一起分享，希望大家支持。</value></post_desc></item>
<item><title><value>Python爬虫实战（4）：抓取淘宝MM照片</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81359/</value></title_url><post_desc><value>福利啊福利，本次为大家带来的项目是抓取淘宝MM照片并保存起来，大家有没有很激动呢？</value></post_desc></item>
<item><title><value>Python爬虫实战（3）：计算大学本学期绩点</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81357/</value></title_url><post_desc><value>大家好，本次为大家带来的项目是计算大学本学期绩点。首先说明的是，博主来自山东大学，有属于个人的学生成绩管理系统，需要学号密码才可以登录，不过可能广大读者没有这个学号密码，不能实际进行操作，所以最主要的还是获取它的原理。最主要的是了解cookie的相关操作。</value></post_desc></item>
<item><title><value>白话 Tornado 源码(4)：褪去模板外衣的前戏</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82127/</value></title_url><post_desc><value>本篇的内容从题目中就可以看出来，就是为之后剖析tornado模板做准备，也是由于该知识点使用的巧妙，所有就单独用一篇来介绍了</value></post_desc></item>
<item><title><value>白话 Tornado 源码(3)：请求来了</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82165/</value></title_url><post_desc><value>上一篇《白话tornado源码之待请求阶段》中介绍了tornado框架在客户端请求之前所做的准备（下图1、2部分），本质上就是创建了一个socket服务端，并进行了IP和端口的绑定，但是未执行 socket的accept方法，也就是未获取客户端请求信息。</value></post_desc></item>
<item><title><value>白话 Tornado 源码(2)：待请求阶段</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82145/</value></title_url><post_desc><value>上篇《白话 Tornado 源码(1)：一个脚本引发的血案》用上帝视角多整个框架做了一个概述，同时也看清了web框架的的本质，下面我们从tornado程序的起始来分析其源码。</value></post_desc></item>
<item><title><value>Python爬虫实战（2）：百度贴吧帖子</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81353/</value></title_url><post_desc><value>大家好，上次我们实验了爬取了糗事百科的段子，那么这次我们来尝试一下爬取百度贴吧的帖子。与上一篇不同的是，这次我们需要用到文件的相关操作。</value></post_desc></item>
<item><title><value>Python爬虫实战（1）：爬取糗事百科段子</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81351/</value></title_url><post_desc><value>大家好，前面入门已经说了那么多基础知识了，下面我们做几个实战项目来挑战一下吧。那么这次为大家带来，Python爬取糗事百科的小段子的例子。</value></post_desc></item>
<item><title><value>Python爬虫入门（8）：Beautiful Soup的用法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81349/</value></title_url><post_desc><value>上一节我们介绍了正则表达式，它的内容其实还是蛮多的，如果一个正则匹配稍有差池，那可能程序就处在永久的循环之中，而且有的小伙伴们也对写正则表达式的写法用得不熟练，没关系，我们还有一个更强大的工具，叫Beautiful Soup.</value></post_desc></item>
<item><title><value>Python爬虫入门（7）：正则表达式</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81346/</value></title_url><post_desc><value>在前面我们已经搞定了怎样获取页面的内容，不过还差一步，这么多杂乱的代码夹杂文字我们怎样把它提取出来整理呢？下面就开始介绍一个十分强大的工具，正则表达式！</value></post_desc></item>
<item><title><value>Python装饰器实例：调用参数合法性验证</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82114/</value></title_url><post_desc><value>python是不带静态检查的动态语言，有时候需要在调用函数时保证参数合法。检查参数合法性是一个显著的切面场景，各个函数都可能有这个需求。但另一方面，参数合法性是不是应该由调用方来保证比较好也是一个需要结合实际才能回答的问题，总之双方约定好，不要都不检查或者都检查就可以了</value></post_desc></item>
<item><title><value>Python装饰器与面向切面编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82112/</value></title_url><post_desc><value>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</value></post_desc></item>
<item><title><value>Python爬虫入门（6）：Cookie的使用</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81344/</value></title_url><post_desc><value>为什么要使用Cookie呢？</value><value>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</value></post_desc></item>
<item><title><value>Python爬虫入门（5）：URLError异常处理</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81341/</value></title_url><post_desc><value>大家好，本节在这里主要说的是URLError还有HTTPError，以及对它们的一些处理。</value></post_desc></item>
<item><title><value>Python爬虫入门（4）：Urllib库的高级用法</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81339/</value></title_url><post_desc><value>有些网站不会同意程序直接用上面的方式进行访问，如果识别有问题，那么站点根本不会响应，所以为了完全模拟浏览器的工作，我们需要设置一些Headers 的属性。</value></post_desc></item>
<item><title><value>Python爬虫入门（3）：Urllib库的基本使用</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81336/</value></title_url><post_desc><value>怎样扒网页呢？其实就是根据URL来获取它的网页信息，虽然我们在浏览器中看到的是一幅幅优美的画面，但是其实是由浏览器解释才呈现出来的，实质它是一段HTML代码，加 JS、CSS.</value></post_desc></item>
<item><title><value>Python爬虫入门（2）：爬虫基础了解</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81334/</value></title_url><post_desc><value>爬虫，即网络爬虫，大家可以理解为在网络上爬行的一直蜘蛛，互联网就比作一张大网，而爬虫便是在这张网上爬来爬去的蜘蛛咯，如果它遇到资源，那么它就会抓取下来。想抓取什么？这个由你来控制它咯。</value></post_desc></item>
<item><title><value>Python爬虫入门（1）：综述</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81332/</value></title_url><post_desc><value>大家好哈，最近博主在学习Python，学习期间也遇到一些问题，获得了一些经验，在此将自己的学习系统地整理下来，如果大家有兴趣学习爬虫的话，可以将这些文章作为参考，也欢迎大家一共分享学习经验。</value></post_desc></item>
<item><title><value>如何在Python中实现这五类强大的概率分布</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81321/</value></title_url><post_desc><value>R编程语言已经成为统计分析中的事实标准。但在这篇文章中，我将告诉你在Python中实现统计学概念会是如此容易。我要使用Python实现一些离散和连续的概率分布。虽然我不会讨论这些分布的数学细节，但我会以链接的方式给你一些学习这些统计学概念的好资料。</value></post_desc></item>
<item><title><value>Python下用Scrapy和MongoDB构建爬虫系统（2）</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/81280/</value></title_url><post_desc><value>在上一篇中，我们实现了一个基本网络爬虫，它可以从StackOverflow上下载最新的问题，并将它们存储在MongoDB数据库中。在本文中，我们将对其扩展，使它能够爬取每个网页底部的分页链接，并从每一页中下载问题（包含问题标题和URL）。</value></post_desc></item>
<item><title><value>我不能胜任开发开源软件</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/16387/</value></title_url><post_desc><value>事实上，我并非不能胜任——几年中我已经开发了很多开源软件。然而，在某种意义上，这又是事实：只有全职开发开源软件的程序员中的佼佼者才能得到报酬，而我不是。Linus Torvalds（Linux之父）是其中之一，还有Guido van Rossum（Python编程语言创始人）。尽管Guido van Rossum只在开源软件上花了部分时间，没有将全部时间用在Python开发上。</value></post_desc></item>
<item><title><value>孩子们为什么要学Python编程</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/17295/</value></title_url><post_desc><value>这个问题，即使你说出许多理由也无济于事，需要依靠实际统计数字来说话。</value><value>4月6日，Black Duck Software, Inc. 发布一项内容十分周详的调查报告，题为”Open Source By The Numbers“（报告人是Rich Sands ），读后有感。</value></post_desc></item>
<item><title><value>你最喜爱的编程语言不够好</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/16231/</value></title_url><post_desc><value>我相信，程序员热烈的去为某种语言编程辩护的行为，其主要的一个原因就是：懒惰。当然，优秀的程序员通常是很懒惰的(他们喜欢让所有的工作都能自动 化完成)，但我说的这种懒惰是特指的，是非常不好的懒惰——懒得去学习。如果我最爱的语言是最好的，或只要不比其他语言差，我就不需要花时间和精力学习新 的语言了。</value></post_desc></item>
<item><title><value>趣文：Python程序员的进化史</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/15005/</value></title_url><post_desc><value>下面代码来自 fmeyer ，列举了各种程序员所写的阶乘算法代码，甚至包括网页设计师的。 :)</value></post_desc></item>
<item><title><value>Google App Engine正式支持Python 2.7</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/14174/</value></title_url><post_desc><value>最近，Google 在其 Google App Engine（以下简称 GAE）官方博客上宣布正式支持 Python 2.7，对开发者来说又多了一种选择。</value><value>GAE 在几个月之前实验性的引入了 Python 2.7 环境，此后一直在修改缺陷和进行优化。随着这次 Python 2.7 的正式支持，相信对开发人员更有帮助：</value></post_desc></item>
<item><title><value>为什么Python对程序员重要？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/13153/</value></title_url><post_desc><value>我相信Python对软件开发人员很重要。现今已经诞生了不少的编程语言，它们都有各自不同的特性：强大者如Lisp，快速如C，运用广泛如Java，论古怪则如Haskell。与这些语言不同，Python是一门比较中庸的编程语言，它将语言的很多特性进行了融合，迄今我还未有其他语言如Python这般协调。 </value></post_desc></item>
<item><title><value>创建成功的Python项目</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/12649/</value></title_url><post_desc><value>创建一个成功的开源Python项目所涉及的并不仅仅是编写有用的代码，与其相关的还有社区的参与、越来越多的合作机会、技艺以及支持等。探索最佳的做法有助于你创建出自己的成功项目。</value></post_desc></item>
<item><title><value>我是如何在12周内成为一名程序员的</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/8464/</value></title_url><post_desc><value>在海军陆战队服役超过10年后，我于去年7月份退役了。随后在8月份找到了一份州彩票（state lottery）做公关的工作，到今年2月中旬的时候又被辞退了。到5月中旬的时候我在DE协会找到了一份临时的“初级用户体验工程师”工作，而到了8月底我则成了正式的“用户体验工程师”。</value></post_desc></item>
<item><title><value>谁说不能用Python写出让人迷惑的代码？</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/1414/</value></title_url><post_desc><value>这里是显示彭罗斯点阵的Python的脚本。是的，这是可以运行的有效Phython代码。</value><value>编注：彭罗斯点阵，物理学术语。上世纪70年代英国数学家彭罗斯第一次提出了这个概念，称为彭罗斯点阵(Pen-rose tiles)。</value></post_desc></item>
<item><title><value>常高伟：如何学习一门新的语言</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/1322/</value></title_url><post_desc><value>这两天在看《编程人生:15位软件先驱访谈录》，这本书确实非常不错。而且看得也特别的轻松。其中有几个人都谈到了如何学习新的语言，但是给我最深刻的是google的首席java架构师joshua bloch。正好最近我也在学习python，所以顺便总结一下如何学习一门新的语言。希望你能补充一些。</value></post_desc></item>
<item><title><value>每个程序员都应该学习使用Python或Ruby</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/1141/</value></title_url><post_desc><value>如果你是个学生，你应该会C，C++和Java。还会一些VB，或C#/.NET。多少你还可能开发过一些Web网页，你知道一些HTML，CSS和JavaScript知识。总体上说，我们很难发现会有学生显露出掌握超出这几种语言范围外的语言的才能。这真让人遗憾，因为还有很多种编程语言，它们能让你成为一个更好的程序员。</value></post_desc></item>
<item><title><value>陈皓：程序员技术练级攻略</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/1101/</value></title_url><post_desc><value>这篇文章取名叫Build Your Programming Technical Skills，我实在不知道用中文怎么翻译，但我在写的过程中，我觉得这很像一个打网游做任务升级的一个过程，所以取名叫“技术练级攻略”，题目有点大，呵呵，这个标题纯粹是为了好玩。这里仅仅是在分享Mailper和我个人的学习经历。</value></post_desc></item>
<item><title><value>如何成为Python高手</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/955/</value></title_url><post_desc><value>这篇文章主要是对我收集的一些文章的摘要。因为已经有很多比我有才华的人写出了大量关于如何成为优秀Python程序员的好文章。</value></post_desc></item>
<item><title><value>Zed Shaw：一位老程序员的建议</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/943/</value></title_url><post_desc><value>看完了《Learn Python The Hard Way》这本书，你决定继续做编程。也许它能成为你的一个职业，也许它能成为你的一项爱好。但你需要一些指导，确保自己不会走错了道路，或帮助你从这个新业余爱好中得到最大的乐趣。</value></post_desc></item>
<item><title><value>用Python写一个FUSE（用户态文件系统）文件系统</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/51268/</value></title_url><post_desc><value>如果你是我的长期读者，那么你应该知道我在寻找一个完美备份程序，最后我写了一个基于bup的我自己的加密层。</value><value>在写encbup的时候，我对仅仅恢复一个文件就必须要下载整个巨大的档案文件的做法不甚满意，但仍然希望能将EncFS和 rdiff-backup一起使用来实现可远程挂载、加密、去重、版本化备份的功能。</value></post_desc></item>
<item><title><value>Python 程序员应该知道的 10 个库</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/52355/</value></title_url><post_desc><value>Python是优雅的，使用这些库可以使你的代码更简洁，并保持持久性。欢迎各位补充，并提出意见！</value></post_desc></item>
<item><title><value>理解 Python 中的线程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/52060/</value></title_url><post_desc><value>我们将会看到一些在Python中使用线程的实例和如何避免线程之间的竞争。你应当将下边的例子运行多次，以便可以注意到线程是不可预测的和线程每次运行出的不同结果。声明：从这里开始忘掉你听到过的关于GIL的东西，因为GIL不会影响到我想要展示的东西。</value></post_desc></item>
<item><title><value>Python编码和Unicode</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/50345/</value></title_url><post_desc><value>我确定有一些关于unicode和Python的说明，但我准备以我的理解来写一些东西。</value></post_desc></item>
<item><title><value>Python IDE：PyCharm中的那些实用功能</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/51498/</value></title_url><post_desc><value>到目前为止，我用Eclipse已经有一些年头了，大部分的时间都是用来写Python和C++。最近我从一个好友那听说了PyCharm以及它新的免费社区版logr。我这个朋友用Eclipse也很长时间了，对PyCharm也是赞不绝口，所以我决定至少在家办公的时候试着用用PyCharm。目前为止，我已经深深的喜欢上了它，甚至于在日常工作时也用PyCharm。</value></post_desc></item>
<item><title><value>IPython Notebook 和 Github 是怎样改变了我的 Python 教学方法</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/50927/</value></title_url><post_desc><value>我在阿拉斯加州东南部的一所小高中教书，每年我都教授编程课的导论（介绍）。最近我学会了如何用IPython Notebook，并且它已经彻底改变了我教课的方式。对于CS（计算机科学）教育而言，美国的K-12教育体系中还有很多地方需要提升，因此分享我们的故事和资源对于我们提供给学生的（帮助）会有长远的影响。</value></post_desc></item>
<item><title><value>Python 实用技巧（上）</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/50420/</value></title_url><post_desc><value>本文根据SO上的热门问答hidden features of python整理而成，早期有人做过类似的整理，但是内容比较旧而且比较粗糙，因此笔者在原文基础上加入自己的一些理解，另外那些高质量的评论也引入进来了。总之，这是一篇用心之作，希望你可以喜欢。</value></post_desc></item>
<item><title><value>Python 中的 is 和 id</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/49705/</value></title_url><post_desc><value>首先id函数可以获得对象的内存地址，如果两个对象的内存地址是一样的，那么这两个对象肯定是一个对象。和is是等价的。Python源代码为证。</value></post_desc></item>
<item><title><value>既然PyPy的速度是CPython的6.3倍，难道我不应该放弃CPython转用PyPy？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/49341/</value></title_url><post_desc><value>我已经听说了很多关于Pypy 的项目。他们宣称在自己的网站上的处理速度是CPython 的6.3 倍。</value><value>任何时候我们讨论起像Python 一样的动态编程语言，速度总是最重要的考量之一。PyPy的网站宣称解决了速度的问题，比传统CPython 的处理速度快6.3倍。</value></post_desc></item>
<item><title><value>Python程序的性能分析指南</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/47619/</value></title_url><post_desc><value>虽然不是所有的Python程序都需要严格的性能分析，不过知道如何利用Python生态圈里的工具来分析性能，也是不错的。</value><value>分析一个程序的性能，总结下来就是要回答4个问题：1.它运行的有多块？ 2.它的瓶颈在哪？ 3.它占用了多少内存？ 4.哪里有内存泄漏？ 接下来，我们会着手使用一些很棒的工具来回答这些问题。</value></post_desc></item>
<item><title><value>如何使用Python编写一个Lisp解释器</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/47659/</value></title_url><post_desc><value>本文有两个目的：一是讲述实现计算机语言解释器的通用方法，另外一点，着重展示如何使用Python来实现Lisp方言Scheme的一个子集。我将我的解释器称之为Lispy (lis.py)。几年前，我介绍过如何使用Java编写一个Scheme解释器，同时我还使用Common Lisp语言编写过一个版本。</value></post_desc></item>
<item><title><value>Go学习笔记：关于Java、Python、Go编程思想的不同</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/44849/</value></title_url><post_desc><value>看了两周七牛团队翻译的《Go语言程序设计》，基本上领略到了Go语言的魅力。学习一个语言，语法什么的任何人都是很容易学会，难就难在充分领略到这门编程语言的思想。</value></post_desc></item>
<item><title><value>趣文：如果编程语言是女人（新编版）</value></title><lei><value>2  条评论</value></lei><title_url><value>http://python.jobbole.com/44736/</value></title_url><post_desc><value>Ruby 是一个略显丰满的女孩，但其令人窒息的甜蜜面容绝对会成为你一生的梦想，然而，当你最终得到了她，她却开始迅速发胖，你开始认识到了她华丽外表下所有恶劣的性格缺陷。你坚持认为事情会有好转，但事实却不是这样，你最终不得不苦恼的把所有时间都花在寻找新的能让她保持高兴的事情上。</value></post_desc></item>
<item><title><value>使用 Python 获取 Linux 系统信息</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/44644/</value></title_url><post_desc><value>在本文中，我们将会探索使用Python编程语言工具来检索Linux系统各种信息。走你。</value><value>哪个Python版本?</value></post_desc></item>
<item><title><value>使用 Python 进行稳定可靠的文件操作</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/44442/</value></title_url><post_desc><value>程序需要更新文件。虽然大部分程序员知道在执行I/O的时候会发生不可预期的事情，但是我经常看到一些异常幼稚的代码。在本文中，我想要分享一些如何在Python代码中改善I/O可靠性的见解。</value></post_desc></item>
<item><title><value>Python 如何使基于 Java 的 StubHub 受益</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/43976/</value></title_url><post_desc><value>自2006年以来，Python 已经相当流行，你可以看到越来越多的初创公司在他们开始自己的业务时选择 Python作为主要语言，例如：</value><value>Netflix – 在线电视节目和电影公司</value><value>
Dropbox – 最流行的文件同步和共享工具</value></post_desc></item>
<item><title><value>有史以来最出彩的编程语言名字</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/42999/</value></title_url><post_desc><value>我脑子里经常会萦绕一些很无聊的小问题，其中一个就是，这么多的编程语言的名字都是怎么出来的？让我们来给它们归归类。</value></post_desc></item>
<item><title><value>成人网站性能提升20倍之经验谈</value></title><lei><value>实践项目</value></lei><title_url><value>http://python.jobbole.com/39323/</value></title_url><post_desc><value>色情业是个大行业。互联网上没有多少网站的流量能和最大的色情网站相匹敌。要搞定这巨大的流量很难。更困难的是，在色情网站上提供的很多内容都是低延迟的实时流媒体而不是简单的静态视频。但是对于所有碰到过的挑战，我很少看到有搞定过它们的开发人员写的东西。所以我决定把自己在这方面的经验写出来。</value></post_desc></item>
<item><title><value>12岁的少年教你用Python做小游戏</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/46308/</value></title_url><post_desc><value>你有没有想过电脑游戏是怎样制作出来的？其实它没有你想象的那样复杂！在这个教程里，你要学做一个叫《兔子和獾》的塔防游戏，兔子作为英雄，需要在城堡里抵御獾的进攻。（PS. 本文作者是一位12岁的少年）</value></post_desc></item>
<item><title><value>Python开发者在转到Go语言之前需要了解什么？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/42908/</value></title_url><post_desc><value>这是一篇（长）博文， 介绍了我们在 Repustate 迁移大量 Python/Cython 代码到 Go 语言的经验。如果你想了解整个故事，背景和所有的事情，请继续往下读。如果你只是想了解 Python 开发者在一头扎进 Go 语言前需要了解什么，</value></post_desc></item>
<item><title><value>Iconfinder 如何杜绝盗版，哈希算法检测图像重复</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/65914/</value></title_url><post_desc><value>每个月都有成千上万个图标被上传到Iconfinder.com，同时也伴随而来大量的盗版图。本文将提出一个新颖巧妙的图像查重技术杜绝盗版。</value></post_desc></item>
<item><title><value>Python高级特性（2）：Closures、Decorators和functools</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/66895/</value></title_url><post_desc><value>装饰器是这样一种设计模式：如果一个类希望添加其他类的一些功能，而不希望通过继承或是直接修改源代码实现，那么可以使用装饰器模式。简单来说Python中的装饰器就是指某些函数或其他可调用对象，以函数或类作为可选输入参数，然后返回函数或类的形式。通过这个在Python2.6版本中被新加入的特性可以用来实现装饰器设计模式。</value></post_desc></item>
<item><title><value>Python高级特性（1）：Iterators、Generators和itertools</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/66097/</value></title_url><post_desc><value>对数学家来说，Python这门语言有着很多吸引他们的地方。举几个例子：对于tuple、lists以及sets等容器的支持，使用与传统数学类似的符号标记方式，还有列表推导式这样与数学中集合推导式和集的结构式(set-builder notation)很相似的语法结构。</value></post_desc></item>
<item><title><value>Python 中的高级数据结构</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/65218/</value></title_url><post_desc><value>数据结构是用来存储一系列关联数据的东西。在Python中有四种内建的数据结构，分别是List、Tuple、Dictionary以及Set。大部分的应用程序不需要其他类型的数据结构，但若是真需要也有很多高级数据结构可供选择，例如Collection、Array、Heapq、Bisect、Weakref、Copy以及Pprint。本文将介绍这些数据结构的用法，看看它们是如何帮助我们的应用程序的。</value></post_desc></item>
<item><title><value>Pyston：Dropbox 正开发的开源 Python 解释器</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/65414/</value></title_url><post_desc><value>Pyston 是一个正在由 Dropbox 开发的开源 Python 解释器。 这个项目的目标是产生一个高性能的 Python 解释器，使 Python 也能用于那些被如 C++ 这样的传统系统语言占据的领域。</value></post_desc></item>
<item><title><value>同一个 bug 不要修复两次</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/64440/</value></title_url><post_desc><value>Noah Sussman 曾经写过一篇文章 《你应该测试的东西：软件系统测试清单》这份清单里面大部分东西都是有帮助的。然而我觉得它所鼓励的理念，本质上来说有误。</value><value>它的理念基本上是这样：找出开发者常犯的错误，然后确保你写了测试样例来检查你没有犯了这样的错误。</value></post_desc></item>
<item><title><value>Python中的并发编程</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/64560/</value></title_url><post_desc><value>我们将一个正在运行的程序成为进程。每个进程都有它自己的系统状态，包含内存状态、打开文件列表、追踪指令执行情况的程序指针以及一个保存局部变量的调用栈。通常情况下，一个进程依照一个单序列控制流顺序执行，这个控制流被称为该进程的主线程。在任何给定的时刻，一个程序只做一件事情。</value></post_desc></item>
<item><title><value>Python中的上下文管理器</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/64175/</value></title_url><post_desc><value>什么是Python中的上下文管理器？怎么使用上下文管理器？如何创建自己的上下文管理器？关于Python上下文库(contextlib)？</value></post_desc></item>
<item><title><value>python:利用asyncio进行快速抓取</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/63897/</value></title_url><post_desc><value>web数据抓取是一个经常在python的讨论中出现的主题。有很多方法可以用来进行web数据抓取，然而其中好像并没有一个最好的办法。有一些如scrapy这样十分成熟的框架，更多的则是像mechanize这样的轻量级库。DIY自己的解决方案同样十分流行：你可以使用requests、beautifulsoup或者pyquery来实现。</value></post_desc></item>
<item><title><value>Ian Bicking：跟Python说再见</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/63037/</value></title_url><post_desc><value>这篇文章有点长，这并非声明观点，只是对我一路走来的反思。我很久以前就离开了Python世界但我从没机会说个再见。</value><value>在我多年前离开Python的时候，无限感慨，不太承认我不会再回来。当我对PyCon2013的提议被拒绝时，我非常泄气并且感觉到我不再是Python社区的一员了。</value></post_desc></item>
<item><title><value>如何用程序解图片迷宫？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/62895/</value></title_url><post_desc><value>原文是StackOverflow上一个如何用程序读取迷宫图片并求解的问题，几位参与者热烈地讨论并给出了自己的代码，涉及到用Python对图片的处理以及广度优先(BFS)算法等。</value></post_desc></item>
<item><title><value>编程语言拟人化：Java、C++、Python、Ruby、PHP、C#、JS</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/63311/</value></title_url><post_desc><value>编程语言拟人化（第一弹），本篇包括这些语言：Java、C++、Python、Ruby、PHP、C#、JavaScript。</value></post_desc></item>
<item><title><value>Python高级编程技巧</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/61171/</value></title_url><post_desc><value>本文展示一些高级的Python设计结构和它们的使用方法。在日常工作中，你可以根据需要选择合适的数据结构，例如对快速查找性的要求、对数据一致性的要求或是对索引的要求等，同时也可以将各种数据结构合适地结合在一起，从而生成具有逻辑性并易于理解的数据模型。</value></post_desc></item>
<item><title><value>写给Python初学者的设计模式入门</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/62023/</value></title_url><post_desc><value>有没有想过设计模式到底是什么？通过本文可以看到设计模式为什么这么重要，通过几个Python的示例展示为什么需要设计模式，以及如何使用。</value></post_desc></item>
<item><title><value>如果一切需要重学，2014年应该学哪些技术？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/61248/</value></title_url><post_desc><value>如果一切需要重学，2014年应该学哪些技术？这个问题经常的会被人提及。我一般会这样说，学习一种能让你开发大型系统的语言，还要学JavaScript。</value></post_desc></item>
<item><title><value>Python 2013 精彩回顾：新闻、好文和资源</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/59535/</value></title_url><post_desc><value>本文罗列了2013年里有关于Python的精彩回顾。包括Python的新闻，好文以及资源的列表。干货十足，值得Pythoner收藏。</value></post_desc></item>
<item><title><value>为什么“except:pass”是一个不好的Python编程习惯？</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/59854/</value></title_url><post_desc><value>我时常在StackOverflow上看到有人评论关于except: pass的使用，他们都提到这是一个不好的Python编程习惯，应该避免。可我想知道为什么？</value><value>有时候我并不在意出现的错误，而是只想让我的程序继续进行下去。</value></post_desc></item>
<item><title><value>一行代码完成并行任务</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/58700/</value></title_url><post_desc><value>众所周知，Python的并行处理能力很不理想。我认为如果不考虑线程和GIL的标准参数（它们大多是合法的），其原因不是因为技术不到位，而是我们的使用方法不恰当。大多数关于Python线程和多进程的教材虽然都很出色，但是内容繁琐冗长。它们的确在开篇铺陈了许多有用信息，但往往都不会涉及真正能提高日常工作的部分。</value></post_desc></item>
<item><title><value>Python超级程序员使用的开发工具</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/59000/</value></title_url><post_desc><value>我以个人的身份采访了几个顶尖的Python程序员，问了他们以下5个简单的问题：</value></post_desc></item>
<item><title><value>用Python处理视频</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/58257/</value></title_url><post_desc><value>Stickyworld 的网页应用已经支持视频拨放一段时间，但都是通过YouTube的嵌入模式实现。我们开始提供新的版本可以支持视频操作，可以让我们的使用者不用受制于YouTube的服务。我过去曾经参与过一个项目，客户需要视频转码功能，这实在不是个容易达成的需求。需要大量的读取每一个视频、音讯与视频容器的格式再输出符合网页使用与喜好的视频格式。</value></post_desc></item>
<item><title><value>Python 快速教程（补充篇05）：字符串格式化 (%操作符)</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82673/</value></title_url><post_desc><value>本文是python补充篇第5课，主要讲述python字符串格式化问题。</value></post_desc></item>
<item><title><value>Python 快速教程（补充篇04）： Python简史</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82671/</value></title_url><post_desc><value>本文是python补充篇第4课，主要讲述python简史。</value></post_desc></item>
<item><title><value>Python 快速教程（补充篇03）： Python内置函数清单</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82665/</value></title_url><post_desc><value>本文是python补充篇第3课，主要讲述python内置函数。</value></post_desc></item>
<item><title><value>Python 快速教程（补充篇02）： Python小技巧</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82663/</value></title_url><post_desc><value>本文是python补充篇第2课，主要讲述python使用中的小技巧。</value></post_desc></item>
<item><title><value>Dropbox 开源的 Python 解释器 Pyston 0.4 发布了</value></title><lei><value>观点与动态</value></lei><title_url><value>http://python.jobbole.com/82055/</value></title_url><post_desc><value>我们非常激动向大家发布 Pyston 0.4，这是这款高性能 Python JIT 的最新版。该版本中含有众多改进，最重要的是，Pyston已经能够渲染Dropbox的页面，且在我们的性能测试中比 CPython 的快 25%。同时我们也非常激动的向大家展示 Pyston 的 logo。</value></post_desc></item>
<item><title><value>Python 爬虫的工具列表</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82633/</value></title_url><post_desc><value>这个列表包含与网页抓取和数据处理的 Python 库</value></post_desc></item>
<item><title><value>Python 快速教程（补充篇01）： Python的序列的方法</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82655/</value></title_url><post_desc><value>本文是python补充篇第1课，主要讲述python序列的相关用法。</value></post_desc></item>
<item><title><value>Python 快速教程（深入篇06）： Python的内存管理</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82653/</value></title_url><post_desc><value>本文是python快速教程深入篇第6课，主要讲述python的内存管理。</value></post_desc></item>
<item><title><value>深入 Python 整数对象的实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82632/</value></title_url><post_desc><value>本文会深入探究 在Python 内部整数对象是如何实现的。在 Python 内部，一个整数对象是用 PyIntObject 结构来表示的，该整数对象的值属性为 long 型。</value></post_desc></item>
<item><title><value>Python 调试工具 pudb 的使用指南</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82638/</value></title_url><post_desc><value>最近在调试python程序，对于这种动态语言，我之前的方法大多都是打tag，真是痛苦的要死。话说回来，debug是为了什么？debug可以看成是对我们的猜测的一种验证。如果我们能通过工具将需要的信息（变量、堆栈）都显示出来，调试就很有效率。</value></post_desc></item>
<item><title><value>不停机条件下部署 Django 应用</value></title><lei><value>工具与框架</value></lei><title_url><value>http://python.jobbole.com/82631/</value></title_url><post_desc><value>当我们上线新的服务应用时，经常不得不重启Web服务器以完成部署。但这会对用户造成一定影响，特别是服务器处于繁忙状态时，问题更严重。本文中，作者将针对这一问题，讲述其如何在不停机条件下部署Django应用。</value></post_desc></item>
<item><title><value>Python 快速教程（深入篇05）： 装饰器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82626/</value></title_url><post_desc><value>本文是python快速教程深入篇第1课，主要讲述python的装饰器。</value></post_desc></item>
<item><title><value>Python 快速教程（深入篇04）：闭包</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82624/</value></title_url><post_desc><value>本文是python快速教程深入篇第4课，主要讲述python的闭包。</value></post_desc></item>
<item><title><value>Python 快速教程（深入篇03）：对象的属性</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82622/</value></title_url><post_desc><value>本文是python快速教程深入篇第3课，主要讲述python的对象的属性。</value></post_desc></item>
<item><title><value>Python 快速教程（深入篇02）：上下文管理器</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82620/</value></title_url><post_desc><value>本文是python快速教程深入篇第2课，主要讲述python的上下文管理器。</value></post_desc></item>
<item><title><value>Python 快速教程（深入篇01）：特殊方法与多范式</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82618/</value></title_url><post_desc><value>本文是python快速教程深入篇第1课，主要讲述python的特殊方法与多范式。</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇09）：动态类型</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82616/</value></title_url><post_desc><value>本文是python进阶第9课，主要讲述python的动态类型。</value></post_desc></item>
<item><title><value>Python 中 import 的机制与实现</value></title><lei><value>基础知识</value></lei><title_url><value>http://python.jobbole.com/82604/</value></title_url><post_desc><value>在真正的将python应用到实际的项目中，最让人困惑不解的问题有二类，一个编码问题，另一个则是引用问题。本文主要讨论关于Python中import的机制与实现、以及介绍一些有意思的Python Hooks。</value></post_desc></item>
<item><title><value>必看的 Python 视频</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82605/</value></title_url><post_desc><value>Shahriar Tajbakhsh 受《必看的 JavaScript 视频》启发，发起整编了一个 Python 视频系列。</value><value>小提示：视频均在 Youtube。如有搬运到国内的热心童鞋，请在评论中留言；</value></post_desc></item>
<item><title><value>Python 快速教程（进阶篇08）：异常处理</value></title><lei><value>系列教程</value></lei><title_url><value>http://python.jobbole.com/82599/</value></title_url><post_desc><value>本文是python进阶第8课，主要讲述python的异常处理。</value></post_desc></item>
</items>